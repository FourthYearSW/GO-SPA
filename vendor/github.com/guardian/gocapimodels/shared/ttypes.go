// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package shared

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//date times are reprsented as i64 - epoch millis
type DateTime int64

func DateTimePtr(v DateTime) *DateTime { return &v }

type OpaqueJson string

func OpaqueJsonPtr(v OpaqueJson) *OpaqueJson { return &v }

// Attributes:
//  - Email
//  - FirstName
//  - LastName
type User struct {
	Email     string  `thrift:"email,1,required" json:"email"`
	FirstName *string `thrift:"firstName,2" json:"firstName,omitempty"`
	LastName  *string `thrift:"lastName,3" json:"lastName,omitempty"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) GetEmail() string {
	return p.Email
}

var User_FirstName_DEFAULT string

func (p *User) GetFirstName() string {
	if !p.IsSetFirstName() {
		return User_FirstName_DEFAULT
	}
	return *p.FirstName
}

var User_LastName_DEFAULT string

func (p *User) GetLastName() string {
	if !p.IsSetLastName() {
		return User_LastName_DEFAULT
	}
	return *p.LastName
}
func (p *User) IsSetFirstName() bool {
	return p.FirstName != nil
}

func (p *User) IsSetLastName() bool {
	return p.LastName != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetEmail bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetEmail = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEmail {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Email is not set"))
	}
	return nil
}

func (p *User) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *User) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FirstName = &v
	}
	return nil
}

func (p *User) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastName = &v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstName() {
		if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FirstName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.firstName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstName: ", p), err)
		}
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastName() {
		if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LastName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastName: ", p), err)
		}
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - Date: when the change occured
//  - User: the user that performed the change
type ChangeRecord struct {
	Date DateTime `thrift:"date,1,required" json:"date"`
	User *User    `thrift:"user,2" json:"user,omitempty"`
}

func NewChangeRecord() *ChangeRecord {
	return &ChangeRecord{}
}

func (p *ChangeRecord) GetDate() DateTime {
	return p.Date
}

var ChangeRecord_User_DEFAULT *User

func (p *ChangeRecord) GetUser() *User {
	if !p.IsSetUser() {
		return ChangeRecord_User_DEFAULT
	}
	return p.User
}
func (p *ChangeRecord) IsSetUser() bool {
	return p.User != nil
}

func (p *ChangeRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDate bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetDate = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Date is not set"))
	}
	return nil
}

func (p *ChangeRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := DateTime(v)
		p.Date = temp
	}
	return nil
}

func (p *ChangeRecord) readField2(iprot thrift.TProtocol) error {
	p.User = &User{}
	if err := p.User.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
	}
	return nil
}

func (p *ChangeRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ChangeRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ChangeRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("date", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:date: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Date)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.date (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:date: ", p), err)
	}
	return err
}

func (p *ChangeRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
		}
		if err := p.User.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
		}
	}
	return err
}

func (p *ChangeRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeRecord(%+v)", *p)
}

// Represents a section.
//
// All tags exist within a section and the content's section is derived from the section of the most
// important tag.
//
// Attributes:
//  - ID: The id of the section. This is derived from the R2 section id
//  - Name: The section's name
//  - PathPrefix: The path fragment implied by the section.
//
// content paths include {section.pathPrefix}/{tag.slug}/{date}/{content.slug}
//  - Slug: The url slug used when refering to the section
type Section struct {
	ID         int64   `thrift:"id,1,required" json:"id"`
	Name       *string `thrift:"name,2" json:"name,omitempty"`
	PathPrefix *string `thrift:"pathPrefix,3" json:"pathPrefix,omitempty"`
	Slug       *string `thrift:"slug,4" json:"slug,omitempty"`
}

func NewSection() *Section {
	return &Section{}
}

func (p *Section) GetID() int64 {
	return p.ID
}

var Section_Name_DEFAULT string

func (p *Section) GetName() string {
	if !p.IsSetName() {
		return Section_Name_DEFAULT
	}
	return *p.Name
}

var Section_PathPrefix_DEFAULT string

func (p *Section) GetPathPrefix() string {
	if !p.IsSetPathPrefix() {
		return Section_PathPrefix_DEFAULT
	}
	return *p.PathPrefix
}

var Section_Slug_DEFAULT string

func (p *Section) GetSlug() string {
	if !p.IsSetSlug() {
		return Section_Slug_DEFAULT
	}
	return *p.Slug
}
func (p *Section) IsSetName() bool {
	return p.Name != nil
}

func (p *Section) IsSetPathPrefix() bool {
	return p.PathPrefix != nil
}

func (p *Section) IsSetSlug() bool {
	return p.Slug != nil
}

func (p *Section) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *Section) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Section) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Section) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PathPrefix = &v
	}
	return nil
}

func (p *Section) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Slug = &v
	}
	return nil
}

func (p *Section) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Section"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Section) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Section) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *Section) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPathPrefix() {
		if err := oprot.WriteFieldBegin("pathPrefix", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pathPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PathPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pathPrefix (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pathPrefix: ", p), err)
		}
	}
	return err
}

func (p *Section) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlug() {
		if err := oprot.WriteFieldBegin("slug", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:slug: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Slug)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.slug (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:slug: ", p), err)
		}
	}
	return err
}

func (p *Section) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Section(%+v)", *p)
}

// Represents a tag applied to content
//
// The id is the only required field, all the rest of the data can be looked up using the id.
//
// Attributes:
//  - ID: The id of the tag. This is the R2 id and can be used to look up the tag in the tagApi etc.
//  - Type: The tag's type
//  - InternalName: The internal name of the tag
//  - ExternalName: The external name of the tag
//  - Slug: The path fragment associated with the tag
//  - Section: The section the tag belongs to
//  - Path: The full path of the tag
type Tag struct {
	ID           int64    `thrift:"id,1,required" json:"id"`
	Type         *string  `thrift:"type,2" json:"type,omitempty"`
	InternalName *string  `thrift:"internalName,3" json:"internalName,omitempty"`
	ExternalName *string  `thrift:"externalName,4" json:"externalName,omitempty"`
	Slug         *string  `thrift:"slug,5" json:"slug,omitempty"`
	Section      *Section `thrift:"section,6" json:"section,omitempty"`
	Path         *string  `thrift:"path,7" json:"path,omitempty"`
}

func NewTag() *Tag {
	return &Tag{}
}

func (p *Tag) GetID() int64 {
	return p.ID
}

var Tag_Type_DEFAULT string

func (p *Tag) GetType() string {
	if !p.IsSetType() {
		return Tag_Type_DEFAULT
	}
	return *p.Type
}

var Tag_InternalName_DEFAULT string

func (p *Tag) GetInternalName() string {
	if !p.IsSetInternalName() {
		return Tag_InternalName_DEFAULT
	}
	return *p.InternalName
}

var Tag_ExternalName_DEFAULT string

func (p *Tag) GetExternalName() string {
	if !p.IsSetExternalName() {
		return Tag_ExternalName_DEFAULT
	}
	return *p.ExternalName
}

var Tag_Slug_DEFAULT string

func (p *Tag) GetSlug() string {
	if !p.IsSetSlug() {
		return Tag_Slug_DEFAULT
	}
	return *p.Slug
}

var Tag_Section_DEFAULT *Section

func (p *Tag) GetSection() *Section {
	if !p.IsSetSection() {
		return Tag_Section_DEFAULT
	}
	return p.Section
}

var Tag_Path_DEFAULT string

func (p *Tag) GetPath() string {
	if !p.IsSetPath() {
		return Tag_Path_DEFAULT
	}
	return *p.Path
}
func (p *Tag) IsSetType() bool {
	return p.Type != nil
}

func (p *Tag) IsSetInternalName() bool {
	return p.InternalName != nil
}

func (p *Tag) IsSetExternalName() bool {
	return p.ExternalName != nil
}

func (p *Tag) IsSetSlug() bool {
	return p.Slug != nil
}

func (p *Tag) IsSetSection() bool {
	return p.Section != nil
}

func (p *Tag) IsSetPath() bool {
	return p.Path != nil
}

func (p *Tag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *Tag) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Tag) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *Tag) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InternalName = &v
	}
	return nil
}

func (p *Tag) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExternalName = &v
	}
	return nil
}

func (p *Tag) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Slug = &v
	}
	return nil
}

func (p *Tag) readField6(iprot thrift.TProtocol) error {
	p.Section = &Section{}
	if err := p.Section.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Section), err)
	}
	return nil
}

func (p *Tag) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tag"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalName() {
		if err := oprot.WriteFieldBegin("internalName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InternalName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalName: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalName() {
		if err := oprot.WriteFieldBegin("externalName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:externalName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExternalName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.externalName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:externalName: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSlug() {
		if err := oprot.WriteFieldBegin("slug", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:slug: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Slug)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.slug (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:slug: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSection() {
		if err := oprot.WriteFieldBegin("section", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:section: ", p), err)
		}
		if err := p.Section.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Section), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:section: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:path: ", p), err)
		}
	}
	return err
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

// Represents where the contant appears in the newspaper
//
// The book is the physical printed thing (G1, G2 etc), the bookSection is the subsection of the
// book (news, business, obituries etc.) and the publication is the physical publication(The Guardian, The Observer).
// This information, along with the newspaperPageNumber and newspaperPublicationDate fields,
// is used to produce the daily newspaper navigation pages.
//
// Attributes:
//  - Book: The book tag represents the physical printed thing (G1, G2 etc) the content appeared in
//  - BookSection: bookSection represents the subsection of the book (news, business, obituries etc.) he content appeared in
//  - Publication: publication represents the physical publication the content has been printed in
type Newspaper_ struct {
	Book        *Tag `thrift:"book,1,required" json:"book"`
	BookSection *Tag `thrift:"bookSection,2,required" json:"bookSection"`
	Publication *Tag `thrift:"publication,3,required" json:"publication"`
}

func NewNewspaper_() *Newspaper_ {
	return &Newspaper_{}
}

var Newspaper__Book_DEFAULT *Tag

func (p *Newspaper_) GetBook() *Tag {
	if !p.IsSetBook() {
		return Newspaper__Book_DEFAULT
	}
	return p.Book
}

var Newspaper__BookSection_DEFAULT *Tag

func (p *Newspaper_) GetBookSection() *Tag {
	if !p.IsSetBookSection() {
		return Newspaper__BookSection_DEFAULT
	}
	return p.BookSection
}

var Newspaper__Publication_DEFAULT *Tag

func (p *Newspaper_) GetPublication() *Tag {
	if !p.IsSetPublication() {
		return Newspaper__Publication_DEFAULT
	}
	return p.Publication
}
func (p *Newspaper_) IsSetBook() bool {
	return p.Book != nil
}

func (p *Newspaper_) IsSetBookSection() bool {
	return p.BookSection != nil
}

func (p *Newspaper_) IsSetPublication() bool {
	return p.Publication != nil
}

func (p *Newspaper_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBook bool = false
	var issetBookSection bool = false
	var issetPublication bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetBook = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetBookSection = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetPublication = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBook {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Book is not set"))
	}
	if !issetBookSection {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BookSection is not set"))
	}
	if !issetPublication {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Publication is not set"))
	}
	return nil
}

func (p *Newspaper_) readField1(iprot thrift.TProtocol) error {
	p.Book = &Tag{}
	if err := p.Book.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Book), err)
	}
	return nil
}

func (p *Newspaper_) readField2(iprot thrift.TProtocol) error {
	p.BookSection = &Tag{}
	if err := p.BookSection.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BookSection), err)
	}
	return nil
}

func (p *Newspaper_) readField3(iprot thrift.TProtocol) error {
	p.Publication = &Tag{}
	if err := p.Publication.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Publication), err)
	}
	return nil
}

func (p *Newspaper_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Newspaper"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Newspaper_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("book", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:book: ", p), err)
	}
	if err := p.Book.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Book), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:book: ", p), err)
	}
	return err
}

func (p *Newspaper_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bookSection", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bookSection: ", p), err)
	}
	if err := p.BookSection.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BookSection), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bookSection: ", p), err)
	}
	return err
}

func (p *Newspaper_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publication", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:publication: ", p), err)
	}
	if err := p.Publication.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Publication), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:publication: ", p), err)
	}
	return err
}

func (p *Newspaper_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Newspaper_(%+v)", *p)
}

// Represents a Tag's application to content.
//
// Includes the Tag and if the tag <-> content relationship is marked as lead
//
// Attributes:
//  - Tag: The tag applied to content
//  - IsLead: true if the content is lead for this tag
type TagUsage struct {
	Tag    *Tag `thrift:"tag,1,required" json:"tag"`
	IsLead bool `thrift:"isLead,2,required" json:"isLead"`
}

func NewTagUsage() *TagUsage {
	return &TagUsage{}
}

var TagUsage_Tag_DEFAULT *Tag

func (p *TagUsage) GetTag() *Tag {
	if !p.IsSetTag() {
		return TagUsage_Tag_DEFAULT
	}
	return p.Tag
}

func (p *TagUsage) GetIsLead() bool {
	return p.IsLead
}
func (p *TagUsage) IsSetTag() bool {
	return p.Tag != nil
}

func (p *TagUsage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTag bool = false
	var issetIsLead bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTag = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIsLead = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTag {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tag is not set"))
	}
	if !issetIsLead {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsLead is not set"))
	}
	return nil
}

func (p *TagUsage) readField1(iprot thrift.TProtocol) error {
	p.Tag = &Tag{}
	if err := p.Tag.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tag), err)
	}
	return nil
}

func (p *TagUsage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsLead = v
	}
	return nil
}

func (p *TagUsage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TagUsage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TagUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err)
	}
	if err := p.Tag.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tag), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err)
	}
	return err
}

func (p *TagUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isLead", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isLead: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsLead)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isLead (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isLead: ", p), err)
	}
	return err
}

func (p *TagUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagUsage(%+v)", *p)
}

// An external reference applied to content
//
// An external reference typically refers to a thing in another system or a real world thing.
// Examples include the isbn of a book the content is reviewing or a cricket match.
//
// Attributes:
//  - ID: The external id
//  - Type: The type of reference
type Reference struct {
	ID   string `thrift:"id,1,required" json:"id"`
	Type string `thrift:"type,2,required" json:"type"`
}

func NewReference() *Reference {
	return &Reference{}
}

func (p *Reference) GetID() string {
	return p.ID
}

func (p *Reference) GetType() string {
	return p.Type
}
func (p *Reference) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetType = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *Reference) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Reference) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Reference) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Reference"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Reference) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Reference) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Reference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reference(%+v)", *p)
}

// Taxonomy represents the tags and references of a piece of content
//
// Attributes:
//  - Tags: The list of tags applied to the content.
//
// The tags in this list are all the non contributor, newspaper and publication tags. They
// are ordered by importance (most important first). Any tag in this list can be marked as 'lead'
// marking this content as the most important story for the tag at the time of publication.
//  - Contributors: The list of contributor tags for this content.
//
// Contributors are managed via the content's byline and links to the contributor tag pages are
// included in the byline
//  - Publication: The publication that commissioned this content
//  - Newspaper_: The newspaper book and book section that the content appeared in
//  - References: The external references applied to this content
type Taxonomy struct {
	Tags         []*TagUsage  `thrift:"tags,1" json:"tags,omitempty"`
	Contributors []*Tag       `thrift:"contributors,2" json:"contributors,omitempty"`
	Publication  *Tag         `thrift:"publication,3" json:"publication,omitempty"`
	Newspaper_   *Newspaper_  `thrift:"newspaper,4" json:"newspaper,omitempty"`
	References   []*Reference `thrift:"references,5" json:"references,omitempty"`
}

func NewTaxonomy() *Taxonomy {
	return &Taxonomy{}
}

var Taxonomy_Tags_DEFAULT []*TagUsage

func (p *Taxonomy) GetTags() []*TagUsage {
	return p.Tags
}

var Taxonomy_Contributors_DEFAULT []*Tag

func (p *Taxonomy) GetContributors() []*Tag {
	return p.Contributors
}

var Taxonomy_Publication_DEFAULT *Tag

func (p *Taxonomy) GetPublication() *Tag {
	if !p.IsSetPublication() {
		return Taxonomy_Publication_DEFAULT
	}
	return p.Publication
}

var Taxonomy_Newspaper__DEFAULT *Newspaper_

func (p *Taxonomy) GetNewspaper_() *Newspaper_ {
	if !p.IsSetNewspaper_() {
		return Taxonomy_Newspaper__DEFAULT
	}
	return p.Newspaper_
}

var Taxonomy_References_DEFAULT []*Reference

func (p *Taxonomy) GetReferences() []*Reference {
	return p.References
}
func (p *Taxonomy) IsSetTags() bool {
	return p.Tags != nil
}

func (p *Taxonomy) IsSetContributors() bool {
	return p.Contributors != nil
}

func (p *Taxonomy) IsSetPublication() bool {
	return p.Publication != nil
}

func (p *Taxonomy) IsSetNewspaper_() bool {
	return p.Newspaper_ != nil
}

func (p *Taxonomy) IsSetReferences() bool {
	return p.References != nil
}

func (p *Taxonomy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Taxonomy) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TagUsage, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &TagUsage{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Tags = append(p.Tags, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Taxonomy) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tag, 0, size)
	p.Contributors = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Tag{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Contributors = append(p.Contributors, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Taxonomy) readField3(iprot thrift.TProtocol) error {
	p.Publication = &Tag{}
	if err := p.Publication.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Publication), err)
	}
	return nil
}

func (p *Taxonomy) readField4(iprot thrift.TProtocol) error {
	p.Newspaper_ = &Newspaper_{}
	if err := p.Newspaper_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Newspaper_), err)
	}
	return nil
}

func (p *Taxonomy) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Reference, 0, size)
	p.References = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Reference{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.References = append(p.References, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Taxonomy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Taxonomy"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Taxonomy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tags: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tags {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tags: ", p), err)
		}
	}
	return err
}

func (p *Taxonomy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContributors() {
		if err := oprot.WriteFieldBegin("contributors", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contributors: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contributors)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Contributors {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contributors: ", p), err)
		}
	}
	return err
}

func (p *Taxonomy) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublication() {
		if err := oprot.WriteFieldBegin("publication", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:publication: ", p), err)
		}
		if err := p.Publication.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Publication), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:publication: ", p), err)
		}
	}
	return err
}

func (p *Taxonomy) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewspaper_() {
		if err := oprot.WriteFieldBegin("newspaper", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newspaper: ", p), err)
		}
		if err := p.Newspaper_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Newspaper_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newspaper: ", p), err)
		}
	}
	return err
}

func (p *Taxonomy) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferences() {
		if err := oprot.WriteFieldBegin("references", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:references: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.References {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:references: ", p), err)
		}
	}
	return err
}

func (p *Taxonomy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Taxonomy(%+v)", *p)
}
