// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package content

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/guardian/gocapimodels/contentatom"
	"github.com/guardian/gocapimodels/story_package_article"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = story_package_article.GoUnusedProtection__
var _ = contentatom.GoUnusedProtection__
var GoUnusedProtection__ int

type ContentType int64

const (
	ContentType_ARTICLE     ContentType = 0
	ContentType_LIVEBLOG    ContentType = 1
	ContentType_GALLERY     ContentType = 2
	ContentType_INTERACTIVE ContentType = 3
	ContentType_PICTURE     ContentType = 4
	ContentType_VIDEO       ContentType = 5
	ContentType_CROSSWORD   ContentType = 6
	ContentType_AUDIO       ContentType = 7
)

func (p ContentType) String() string {
	switch p {
	case ContentType_ARTICLE:
		return "ARTICLE"
	case ContentType_LIVEBLOG:
		return "LIVEBLOG"
	case ContentType_GALLERY:
		return "GALLERY"
	case ContentType_INTERACTIVE:
		return "INTERACTIVE"
	case ContentType_PICTURE:
		return "PICTURE"
	case ContentType_VIDEO:
		return "VIDEO"
	case ContentType_CROSSWORD:
		return "CROSSWORD"
	case ContentType_AUDIO:
		return "AUDIO"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "ARTICLE":
		return ContentType_ARTICLE, nil
	case "LIVEBLOG":
		return ContentType_LIVEBLOG, nil
	case "GALLERY":
		return ContentType_GALLERY, nil
	case "INTERACTIVE":
		return ContentType_INTERACTIVE, nil
	case "PICTURE":
		return ContentType_PICTURE, nil
	case "VIDEO":
		return ContentType_VIDEO, nil
	case "CROSSWORD":
		return ContentType_CROSSWORD, nil
	case "AUDIO":
		return ContentType_AUDIO, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
	q, err := ContentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ElementType int64

const (
	ElementType_TEXT        ElementType = 0
	ElementType_IMAGE       ElementType = 1
	ElementType_EMBED       ElementType = 2
	ElementType_FORM        ElementType = 3
	ElementType_PULLQUOTE   ElementType = 4
	ElementType_INTERACTIVE ElementType = 5
	ElementType_COMMENT     ElementType = 6
	ElementType_RICH_LINK   ElementType = 7
	ElementType_TABLE       ElementType = 8
	ElementType_VIDEO       ElementType = 9
	ElementType_TWEET       ElementType = 10
	ElementType_WITNESS     ElementType = 11
	ElementType_CODE        ElementType = 12
	ElementType_AUDIO       ElementType = 13
	ElementType_MAP         ElementType = 14
	ElementType_DOCUMENT    ElementType = 15
	ElementType_MEMBERSHIP  ElementType = 16
	ElementType_INSTAGRAM   ElementType = 17
	ElementType_CONTENTATOM ElementType = 18
	ElementType_VINE        ElementType = 19
)

func (p ElementType) String() string {
	switch p {
	case ElementType_TEXT:
		return "TEXT"
	case ElementType_IMAGE:
		return "IMAGE"
	case ElementType_EMBED:
		return "EMBED"
	case ElementType_FORM:
		return "FORM"
	case ElementType_PULLQUOTE:
		return "PULLQUOTE"
	case ElementType_INTERACTIVE:
		return "INTERACTIVE"
	case ElementType_COMMENT:
		return "COMMENT"
	case ElementType_RICH_LINK:
		return "RICH_LINK"
	case ElementType_TABLE:
		return "TABLE"
	case ElementType_VIDEO:
		return "VIDEO"
	case ElementType_TWEET:
		return "TWEET"
	case ElementType_WITNESS:
		return "WITNESS"
	case ElementType_CODE:
		return "CODE"
	case ElementType_AUDIO:
		return "AUDIO"
	case ElementType_MAP:
		return "MAP"
	case ElementType_DOCUMENT:
		return "DOCUMENT"
	case ElementType_MEMBERSHIP:
		return "MEMBERSHIP"
	case ElementType_INSTAGRAM:
		return "INSTAGRAM"
	case ElementType_CONTENTATOM:
		return "CONTENTATOM"
	case ElementType_VINE:
		return "VINE"
	}
	return "<UNSET>"
}

func ElementTypeFromString(s string) (ElementType, error) {
	switch s {
	case "TEXT":
		return ElementType_TEXT, nil
	case "IMAGE":
		return ElementType_IMAGE, nil
	case "EMBED":
		return ElementType_EMBED, nil
	case "FORM":
		return ElementType_FORM, nil
	case "PULLQUOTE":
		return ElementType_PULLQUOTE, nil
	case "INTERACTIVE":
		return ElementType_INTERACTIVE, nil
	case "COMMENT":
		return ElementType_COMMENT, nil
	case "RICH_LINK":
		return ElementType_RICH_LINK, nil
	case "TABLE":
		return ElementType_TABLE, nil
	case "VIDEO":
		return ElementType_VIDEO, nil
	case "TWEET":
		return ElementType_TWEET, nil
	case "WITNESS":
		return ElementType_WITNESS, nil
	case "CODE":
		return ElementType_CODE, nil
	case "AUDIO":
		return ElementType_AUDIO, nil
	case "MAP":
		return ElementType_MAP, nil
	case "DOCUMENT":
		return ElementType_DOCUMENT, nil
	case "MEMBERSHIP":
		return ElementType_MEMBERSHIP, nil
	case "INSTAGRAM":
		return ElementType_INSTAGRAM, nil
	case "CONTENTATOM":
		return ElementType_CONTENTATOM, nil
	case "VINE":
		return ElementType_VINE, nil
	}
	return ElementType(0), fmt.Errorf("not a valid ElementType string")
}

func ElementTypePtr(v ElementType) *ElementType { return &v }

func (p ElementType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ElementType) UnmarshalText(text []byte) error {
	q, err := ElementTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TagType int64

const (
	TagType_CONTRIBUTOR            TagType = 0
	TagType_KEYWORD                TagType = 1
	TagType_SERIES                 TagType = 2
	TagType_NEWSPAPER_BOOK_SECTION TagType = 3
	TagType_NEWSPAPER_BOOK         TagType = 4
	TagType_BLOG                   TagType = 5
	TagType_TONE                   TagType = 6
	TagType_TYPE                   TagType = 7
	TagType_PUBLICATION            TagType = 8
	TagType_TRACKING               TagType = 9
	TagType_PAID_CONTENT           TagType = 10
)

func (p TagType) String() string {
	switch p {
	case TagType_CONTRIBUTOR:
		return "CONTRIBUTOR"
	case TagType_KEYWORD:
		return "KEYWORD"
	case TagType_SERIES:
		return "SERIES"
	case TagType_NEWSPAPER_BOOK_SECTION:
		return "NEWSPAPER_BOOK_SECTION"
	case TagType_NEWSPAPER_BOOK:
		return "NEWSPAPER_BOOK"
	case TagType_BLOG:
		return "BLOG"
	case TagType_TONE:
		return "TONE"
	case TagType_TYPE:
		return "TYPE"
	case TagType_PUBLICATION:
		return "PUBLICATION"
	case TagType_TRACKING:
		return "TRACKING"
	case TagType_PAID_CONTENT:
		return "PAID_CONTENT"
	}
	return "<UNSET>"
}

func TagTypeFromString(s string) (TagType, error) {
	switch s {
	case "CONTRIBUTOR":
		return TagType_CONTRIBUTOR, nil
	case "KEYWORD":
		return TagType_KEYWORD, nil
	case "SERIES":
		return TagType_SERIES, nil
	case "NEWSPAPER_BOOK_SECTION":
		return TagType_NEWSPAPER_BOOK_SECTION, nil
	case "NEWSPAPER_BOOK":
		return TagType_NEWSPAPER_BOOK, nil
	case "BLOG":
		return TagType_BLOG, nil
	case "TONE":
		return TagType_TONE, nil
	case "TYPE":
		return TagType_TYPE, nil
	case "PUBLICATION":
		return TagType_PUBLICATION, nil
	case "TRACKING":
		return TagType_TRACKING, nil
	case "PAID_CONTENT":
		return TagType_PAID_CONTENT, nil
	}
	return TagType(0), fmt.Errorf("not a valid TagType string")
}

func TagTypePtr(v TagType) *TagType { return &v }

func (p TagType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TagType) UnmarshalText(text []byte) error {
	q, err := TagTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CrosswordType int64

const (
	CrosswordType_QUICK                  CrosswordType = 0
	CrosswordType_CRYPTIC                CrosswordType = 1
	CrosswordType_QUIPTIC                CrosswordType = 2
	CrosswordType_SPEEDY                 CrosswordType = 3
	CrosswordType_PRIZE                  CrosswordType = 4
	CrosswordType_EVERYMAN               CrosswordType = 5
	CrosswordType_DIAN_QUIPTIC_CROSSWORD CrosswordType = 6
)

func (p CrosswordType) String() string {
	switch p {
	case CrosswordType_QUICK:
		return "QUICK"
	case CrosswordType_CRYPTIC:
		return "CRYPTIC"
	case CrosswordType_QUIPTIC:
		return "QUIPTIC"
	case CrosswordType_SPEEDY:
		return "SPEEDY"
	case CrosswordType_PRIZE:
		return "PRIZE"
	case CrosswordType_EVERYMAN:
		return "EVERYMAN"
	case CrosswordType_DIAN_QUIPTIC_CROSSWORD:
		return "DIAN_QUIPTIC_CROSSWORD"
	}
	return "<UNSET>"
}

func CrosswordTypeFromString(s string) (CrosswordType, error) {
	switch s {
	case "QUICK":
		return CrosswordType_QUICK, nil
	case "CRYPTIC":
		return CrosswordType_CRYPTIC, nil
	case "QUIPTIC":
		return CrosswordType_QUIPTIC, nil
	case "SPEEDY":
		return CrosswordType_SPEEDY, nil
	case "PRIZE":
		return CrosswordType_PRIZE, nil
	case "EVERYMAN":
		return CrosswordType_EVERYMAN, nil
	case "DIAN_QUIPTIC_CROSSWORD":
		return CrosswordType_DIAN_QUIPTIC_CROSSWORD, nil
	}
	return CrosswordType(0), fmt.Errorf("not a valid CrosswordType string")
}

func CrosswordTypePtr(v CrosswordType) *CrosswordType { return &v }

func (p CrosswordType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CrosswordType) UnmarshalText(text []byte) error {
	q, err := CrosswordTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Office int64

const (
	Office_UK  Office = 0
	Office_US  Office = 1
	Office_AUS Office = 2
)

func (p Office) String() string {
	switch p {
	case Office_UK:
		return "UK"
	case Office_US:
		return "US"
	case Office_AUS:
		return "AUS"
	}
	return "<UNSET>"
}

func OfficeFromString(s string) (Office, error) {
	switch s {
	case "UK":
		return Office_UK, nil
	case "US":
		return Office_US, nil
	case "AUS":
		return Office_AUS, nil
	}
	return Office(0), fmt.Errorf("not a valid Office string")
}

func OfficePtr(v Office) *Office { return &v }

func (p Office) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Office) UnmarshalText(text []byte) error {
	q, err := OfficeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type AssetType int64

const (
	AssetType_IMAGE AssetType = 0
	AssetType_VIDEO AssetType = 1
	AssetType_AUDIO AssetType = 2
	AssetType_EMBED AssetType = 3
	AssetType_TWEET AssetType = 4
)

func (p AssetType) String() string {
	switch p {
	case AssetType_IMAGE:
		return "IMAGE"
	case AssetType_VIDEO:
		return "VIDEO"
	case AssetType_AUDIO:
		return "AUDIO"
	case AssetType_EMBED:
		return "EMBED"
	case AssetType_TWEET:
		return "TWEET"
	}
	return "<UNSET>"
}

func AssetTypeFromString(s string) (AssetType, error) {
	switch s {
	case "IMAGE":
		return AssetType_IMAGE, nil
	case "VIDEO":
		return AssetType_VIDEO, nil
	case "AUDIO":
		return AssetType_AUDIO, nil
	case "EMBED":
		return AssetType_EMBED, nil
	case "TWEET":
		return AssetType_TWEET, nil
	}
	return AssetType(0), fmt.Errorf("not a valid AssetType string")
}

func AssetTypePtr(v AssetType) *AssetType { return &v }

func (p AssetType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AssetType) UnmarshalText(text []byte) error {
	q, err := AssetTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type MembershipTier int64

const (
	MembershipTier_MEMBERS_ONLY      MembershipTier = 0
	MembershipTier_PAID_MEMBERS_ONLY MembershipTier = 1
)

func (p MembershipTier) String() string {
	switch p {
	case MembershipTier_MEMBERS_ONLY:
		return "MEMBERS_ONLY"
	case MembershipTier_PAID_MEMBERS_ONLY:
		return "PAID_MEMBERS_ONLY"
	}
	return "<UNSET>"
}

func MembershipTierFromString(s string) (MembershipTier, error) {
	switch s {
	case "MEMBERS_ONLY":
		return MembershipTier_MEMBERS_ONLY, nil
	case "PAID_MEMBERS_ONLY":
		return MembershipTier_PAID_MEMBERS_ONLY, nil
	}
	return MembershipTier(0), fmt.Errorf("not a valid MembershipTier string")
}

func MembershipTierPtr(v MembershipTier) *MembershipTier { return &v }

func (p MembershipTier) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *MembershipTier) UnmarshalText(text []byte) error {
	q, err := MembershipTierFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SponsorshipType int64

const (
	SponsorshipType_SPONSORED    SponsorshipType = 0
	SponsorshipType_FOUNDATION   SponsorshipType = 1
	SponsorshipType_PAID_CONTENT SponsorshipType = 2
)

func (p SponsorshipType) String() string {
	switch p {
	case SponsorshipType_SPONSORED:
		return "SPONSORED"
	case SponsorshipType_FOUNDATION:
		return "FOUNDATION"
	case SponsorshipType_PAID_CONTENT:
		return "PAID_CONTENT"
	}
	return "<UNSET>"
}

func SponsorshipTypeFromString(s string) (SponsorshipType, error) {
	switch s {
	case "SPONSORED":
		return SponsorshipType_SPONSORED, nil
	case "FOUNDATION":
		return SponsorshipType_FOUNDATION, nil
	case "PAID_CONTENT":
		return SponsorshipType_PAID_CONTENT, nil
	}
	return SponsorshipType(0), fmt.Errorf("not a valid SponsorshipType string")
}

func SponsorshipTypePtr(v SponsorshipType) *SponsorshipType { return &v }

func (p SponsorshipType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SponsorshipType) UnmarshalText(text []byte) error {
	q, err := SponsorshipTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - DateTime
//  - Iso8601
type CapiDateTime struct {
	DateTime int64  `thrift:"dateTime,1,required" json:"dateTime"`
	Iso8601  string `thrift:"iso8601,2,required" json:"iso8601"`
}

func NewCapiDateTime() *CapiDateTime {
	return &CapiDateTime{}
}

func (p *CapiDateTime) GetDateTime() int64 {
	return p.DateTime
}

func (p *CapiDateTime) GetIso8601() string {
	return p.Iso8601
}
func (p *CapiDateTime) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDateTime bool = false
	var issetIso8601 bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetDateTime = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIso8601 = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDateTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DateTime is not set"))
	}
	if !issetIso8601 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Iso8601 is not set"))
	}
	return nil
}

func (p *CapiDateTime) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DateTime = v
	}
	return nil
}

func (p *CapiDateTime) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Iso8601 = v
	}
	return nil
}

func (p *CapiDateTime) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CapiDateTime"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CapiDateTime) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dateTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dateTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dateTime: ", p), err)
	}
	return err
}

func (p *CapiDateTime) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iso8601", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iso8601: ", p), err)
	}
	if err := oprot.WriteString(string(p.Iso8601)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iso8601 (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iso8601: ", p), err)
	}
	return err
}

func (p *CapiDateTime) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CapiDateTime(%+v)", *p)
}

// Attributes:
//  - Syndicatable
//  - SubscriptionDatabases
//  - DeveloperCommunity
type Rights struct {
	Syndicatable          bool `thrift:"syndicatable,1" json:"syndicatable,omitempty"`
	SubscriptionDatabases bool `thrift:"subscriptionDatabases,2" json:"subscriptionDatabases,omitempty"`
	DeveloperCommunity    bool `thrift:"developerCommunity,3" json:"developerCommunity,omitempty"`
}

func NewRights() *Rights {
	return &Rights{}
}

var Rights_Syndicatable_DEFAULT bool = false

func (p *Rights) GetSyndicatable() bool {
	return p.Syndicatable
}

var Rights_SubscriptionDatabases_DEFAULT bool = false

func (p *Rights) GetSubscriptionDatabases() bool {
	return p.SubscriptionDatabases
}

var Rights_DeveloperCommunity_DEFAULT bool = false

func (p *Rights) GetDeveloperCommunity() bool {
	return p.DeveloperCommunity
}
func (p *Rights) IsSetSyndicatable() bool {
	return p.Syndicatable != Rights_Syndicatable_DEFAULT
}

func (p *Rights) IsSetSubscriptionDatabases() bool {
	return p.SubscriptionDatabases != Rights_SubscriptionDatabases_DEFAULT
}

func (p *Rights) IsSetDeveloperCommunity() bool {
	return p.DeveloperCommunity != Rights_DeveloperCommunity_DEFAULT
}

func (p *Rights) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Rights) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Syndicatable = v
	}
	return nil
}

func (p *Rights) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubscriptionDatabases = v
	}
	return nil
}

func (p *Rights) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DeveloperCommunity = v
	}
	return nil
}

func (p *Rights) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Rights"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Rights) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSyndicatable() {
		if err := oprot.WriteFieldBegin("syndicatable", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syndicatable: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.Syndicatable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.syndicatable (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syndicatable: ", p), err)
		}
	}
	return err
}

func (p *Rights) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriptionDatabases() {
		if err := oprot.WriteFieldBegin("subscriptionDatabases", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subscriptionDatabases: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.SubscriptionDatabases)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subscriptionDatabases (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subscriptionDatabases: ", p), err)
		}
	}
	return err
}

func (p *Rights) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeveloperCommunity() {
		if err := oprot.WriteFieldBegin("developerCommunity", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:developerCommunity: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.DeveloperCommunity)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.developerCommunity (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:developerCommunity: ", p), err)
		}
	}
	return err
}

func (p *Rights) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rights(%+v)", *p)
}

// Attributes:
//  - AspectRatio
//  - AltText
//  - IsInappropriateForAdverts
//  - Caption
//  - Credit
//  - Embeddable
//  - Photographer
//  - Source
//  - StillImageUrl
//  - Width
//  - Height
//  - Name
//  - SecureFile
//  - IsMaster
//  - SizeInBytes
//  - DurationMinutes
//  - DurationSeconds
//  - DisplayCredit
//  - ThumbnailUrl
//  - Role
//  - MediaId
//  - IframeUrl
//  - ScriptName
//  - ScriptUrl
//  - BlockAds
//  - HTML
//  - EmbedType
//  - Explicit
//  - Clean
//  - ThumbnailImageUrl
//  - LinkText
//  - LinkPrefix
//  - ShortUrl
//  - ImageType
//  - SuppliersReference
//  - MediaApiUri
//  - Copyright
//  - MimeType
//  - URL
//  - OriginalUrl
//  - ID
//  - Attribution
//  - Description
//  - Title
//  - ContentAuthSystem
//  - Alt
//  - PicdarUrn
//  - Comment
//  - WitnessEmbedType
//  - AuthorName
//  - AuthorUsername
//  - AuthorWitnessProfileUrl
//  - AuthorGuardianProfileUrl
//  - ApiUrl
//  - DateCreated
//  - YoutubeUrl
//  - YoutubeSource
//  - YoutubeTitle
//  - YoutubeDescription
//  - YoutubeAuthorName
//  - YoutubeHtml
//  - Venue
//  - Location
//  - Identifier
//  - Price
//  - Start
//  - SafeEmbedCode
type AssetFields struct {
	AspectRatio               *string       `thrift:"aspectRatio,1" json:"aspectRatio,omitempty"`
	AltText                   *string       `thrift:"altText,2" json:"altText,omitempty"`
	IsInappropriateForAdverts *bool         `thrift:"isInappropriateForAdverts,3" json:"isInappropriateForAdverts,omitempty"`
	Caption                   *string       `thrift:"caption,4" json:"caption,omitempty"`
	Credit                    *string       `thrift:"credit,5" json:"credit,omitempty"`
	Embeddable                *bool         `thrift:"embeddable,6" json:"embeddable,omitempty"`
	Photographer              *string       `thrift:"photographer,7" json:"photographer,omitempty"`
	Source                    *string       `thrift:"source,8" json:"source,omitempty"`
	StillImageUrl             *string       `thrift:"stillImageUrl,9" json:"stillImageUrl,omitempty"`
	Width                     *int32        `thrift:"width,10" json:"width,omitempty"`
	Height                    *int32        `thrift:"height,11" json:"height,omitempty"`
	Name                      *string       `thrift:"name,12" json:"name,omitempty"`
	SecureFile                *string       `thrift:"secureFile,13" json:"secureFile,omitempty"`
	IsMaster                  *bool         `thrift:"isMaster,14" json:"isMaster,omitempty"`
	SizeInBytes               *int64        `thrift:"sizeInBytes,15" json:"sizeInBytes,omitempty"`
	DurationMinutes           *int32        `thrift:"durationMinutes,16" json:"durationMinutes,omitempty"`
	DurationSeconds           *int32        `thrift:"durationSeconds,17" json:"durationSeconds,omitempty"`
	DisplayCredit             *bool         `thrift:"displayCredit,18" json:"displayCredit,omitempty"`
	ThumbnailUrl              *string       `thrift:"thumbnailUrl,19" json:"thumbnailUrl,omitempty"`
	Role                      *string       `thrift:"role,20" json:"role,omitempty"`
	MediaId                   *string       `thrift:"mediaId,21" json:"mediaId,omitempty"`
	IframeUrl                 *string       `thrift:"iframeUrl,22" json:"iframeUrl,omitempty"`
	ScriptName                *string       `thrift:"scriptName,23" json:"scriptName,omitempty"`
	ScriptUrl                 *string       `thrift:"scriptUrl,24" json:"scriptUrl,omitempty"`
	BlockAds                  *bool         `thrift:"blockAds,25" json:"blockAds,omitempty"`
	HTML                      *string       `thrift:"html,26" json:"html,omitempty"`
	EmbedType                 *string       `thrift:"embedType,27" json:"embedType,omitempty"`
	Explicit                  *bool         `thrift:"explicit,28" json:"explicit,omitempty"`
	Clean                     *bool         `thrift:"clean,29" json:"clean,omitempty"`
	ThumbnailImageUrl         *string       `thrift:"thumbnailImageUrl,30" json:"thumbnailImageUrl,omitempty"`
	LinkText                  *string       `thrift:"linkText,31" json:"linkText,omitempty"`
	LinkPrefix                *string       `thrift:"linkPrefix,32" json:"linkPrefix,omitempty"`
	ShortUrl                  *string       `thrift:"shortUrl,33" json:"shortUrl,omitempty"`
	ImageType                 *string       `thrift:"imageType,34" json:"imageType,omitempty"`
	SuppliersReference        *string       `thrift:"suppliersReference,35" json:"suppliersReference,omitempty"`
	MediaApiUri               *string       `thrift:"mediaApiUri,36" json:"mediaApiUri,omitempty"`
	Copyright                 *string       `thrift:"copyright,37" json:"copyright,omitempty"`
	MimeType                  *string       `thrift:"mimeType,38" json:"mimeType,omitempty"`
	URL                       *string       `thrift:"url,39" json:"url,omitempty"`
	OriginalUrl               *string       `thrift:"originalUrl,40" json:"originalUrl,omitempty"`
	ID                        *string       `thrift:"id,41" json:"id,omitempty"`
	Attribution               *string       `thrift:"attribution,42" json:"attribution,omitempty"`
	Description               *string       `thrift:"description,43" json:"description,omitempty"`
	Title                     *string       `thrift:"title,44" json:"title,omitempty"`
	ContentAuthSystem         *string       `thrift:"contentAuthSystem,45" json:"contentAuthSystem,omitempty"`
	Alt                       *string       `thrift:"alt,46" json:"alt,omitempty"`
	PicdarUrn                 *string       `thrift:"picdarUrn,47" json:"picdarUrn,omitempty"`
	Comment                   *string       `thrift:"comment,48" json:"comment,omitempty"`
	WitnessEmbedType          *string       `thrift:"witnessEmbedType,49" json:"witnessEmbedType,omitempty"`
	AuthorName                *string       `thrift:"authorName,50" json:"authorName,omitempty"`
	AuthorUsername            *string       `thrift:"authorUsername,51" json:"authorUsername,omitempty"`
	AuthorWitnessProfileUrl   *string       `thrift:"authorWitnessProfileUrl,52" json:"authorWitnessProfileUrl,omitempty"`
	AuthorGuardianProfileUrl  *string       `thrift:"authorGuardianProfileUrl,53" json:"authorGuardianProfileUrl,omitempty"`
	ApiUrl                    *string       `thrift:"apiUrl,54" json:"apiUrl,omitempty"`
	DateCreated               *CapiDateTime `thrift:"dateCreated,55" json:"dateCreated,omitempty"`
	YoutubeUrl                *string       `thrift:"youtubeUrl,56" json:"youtubeUrl,omitempty"`
	YoutubeSource             *string       `thrift:"youtubeSource,57" json:"youtubeSource,omitempty"`
	YoutubeTitle              *string       `thrift:"youtubeTitle,58" json:"youtubeTitle,omitempty"`
	YoutubeDescription        *string       `thrift:"youtubeDescription,59" json:"youtubeDescription,omitempty"`
	YoutubeAuthorName         *string       `thrift:"youtubeAuthorName,60" json:"youtubeAuthorName,omitempty"`
	YoutubeHtml               *string       `thrift:"youtubeHtml,61" json:"youtubeHtml,omitempty"`
	Venue                     *string       `thrift:"venue,62" json:"venue,omitempty"`
	Location                  *string       `thrift:"location,63" json:"location,omitempty"`
	Identifier                *string       `thrift:"identifier,64" json:"identifier,omitempty"`
	Price                     *string       `thrift:"price,65" json:"price,omitempty"`
	Start                     *CapiDateTime `thrift:"start,66" json:"start,omitempty"`
	// unused field # 67
	SafeEmbedCode *bool `thrift:"safeEmbedCode,68" json:"safeEmbedCode,omitempty"`
}

func NewAssetFields() *AssetFields {
	return &AssetFields{}
}

var AssetFields_AspectRatio_DEFAULT string

func (p *AssetFields) GetAspectRatio() string {
	if !p.IsSetAspectRatio() {
		return AssetFields_AspectRatio_DEFAULT
	}
	return *p.AspectRatio
}

var AssetFields_AltText_DEFAULT string

func (p *AssetFields) GetAltText() string {
	if !p.IsSetAltText() {
		return AssetFields_AltText_DEFAULT
	}
	return *p.AltText
}

var AssetFields_IsInappropriateForAdverts_DEFAULT bool

func (p *AssetFields) GetIsInappropriateForAdverts() bool {
	if !p.IsSetIsInappropriateForAdverts() {
		return AssetFields_IsInappropriateForAdverts_DEFAULT
	}
	return *p.IsInappropriateForAdverts
}

var AssetFields_Caption_DEFAULT string

func (p *AssetFields) GetCaption() string {
	if !p.IsSetCaption() {
		return AssetFields_Caption_DEFAULT
	}
	return *p.Caption
}

var AssetFields_Credit_DEFAULT string

func (p *AssetFields) GetCredit() string {
	if !p.IsSetCredit() {
		return AssetFields_Credit_DEFAULT
	}
	return *p.Credit
}

var AssetFields_Embeddable_DEFAULT bool

func (p *AssetFields) GetEmbeddable() bool {
	if !p.IsSetEmbeddable() {
		return AssetFields_Embeddable_DEFAULT
	}
	return *p.Embeddable
}

var AssetFields_Photographer_DEFAULT string

func (p *AssetFields) GetPhotographer() string {
	if !p.IsSetPhotographer() {
		return AssetFields_Photographer_DEFAULT
	}
	return *p.Photographer
}

var AssetFields_Source_DEFAULT string

func (p *AssetFields) GetSource() string {
	if !p.IsSetSource() {
		return AssetFields_Source_DEFAULT
	}
	return *p.Source
}

var AssetFields_StillImageUrl_DEFAULT string

func (p *AssetFields) GetStillImageUrl() string {
	if !p.IsSetStillImageUrl() {
		return AssetFields_StillImageUrl_DEFAULT
	}
	return *p.StillImageUrl
}

var AssetFields_Width_DEFAULT int32

func (p *AssetFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return AssetFields_Width_DEFAULT
	}
	return *p.Width
}

var AssetFields_Height_DEFAULT int32

func (p *AssetFields) GetHeight() int32 {
	if !p.IsSetHeight() {
		return AssetFields_Height_DEFAULT
	}
	return *p.Height
}

var AssetFields_Name_DEFAULT string

func (p *AssetFields) GetName() string {
	if !p.IsSetName() {
		return AssetFields_Name_DEFAULT
	}
	return *p.Name
}

var AssetFields_SecureFile_DEFAULT string

func (p *AssetFields) GetSecureFile() string {
	if !p.IsSetSecureFile() {
		return AssetFields_SecureFile_DEFAULT
	}
	return *p.SecureFile
}

var AssetFields_IsMaster_DEFAULT bool

func (p *AssetFields) GetIsMaster() bool {
	if !p.IsSetIsMaster() {
		return AssetFields_IsMaster_DEFAULT
	}
	return *p.IsMaster
}

var AssetFields_SizeInBytes_DEFAULT int64

func (p *AssetFields) GetSizeInBytes() int64 {
	if !p.IsSetSizeInBytes() {
		return AssetFields_SizeInBytes_DEFAULT
	}
	return *p.SizeInBytes
}

var AssetFields_DurationMinutes_DEFAULT int32

func (p *AssetFields) GetDurationMinutes() int32 {
	if !p.IsSetDurationMinutes() {
		return AssetFields_DurationMinutes_DEFAULT
	}
	return *p.DurationMinutes
}

var AssetFields_DurationSeconds_DEFAULT int32

func (p *AssetFields) GetDurationSeconds() int32 {
	if !p.IsSetDurationSeconds() {
		return AssetFields_DurationSeconds_DEFAULT
	}
	return *p.DurationSeconds
}

var AssetFields_DisplayCredit_DEFAULT bool

func (p *AssetFields) GetDisplayCredit() bool {
	if !p.IsSetDisplayCredit() {
		return AssetFields_DisplayCredit_DEFAULT
	}
	return *p.DisplayCredit
}

var AssetFields_ThumbnailUrl_DEFAULT string

func (p *AssetFields) GetThumbnailUrl() string {
	if !p.IsSetThumbnailUrl() {
		return AssetFields_ThumbnailUrl_DEFAULT
	}
	return *p.ThumbnailUrl
}

var AssetFields_Role_DEFAULT string

func (p *AssetFields) GetRole() string {
	if !p.IsSetRole() {
		return AssetFields_Role_DEFAULT
	}
	return *p.Role
}

var AssetFields_MediaId_DEFAULT string

func (p *AssetFields) GetMediaId() string {
	if !p.IsSetMediaId() {
		return AssetFields_MediaId_DEFAULT
	}
	return *p.MediaId
}

var AssetFields_IframeUrl_DEFAULT string

func (p *AssetFields) GetIframeUrl() string {
	if !p.IsSetIframeUrl() {
		return AssetFields_IframeUrl_DEFAULT
	}
	return *p.IframeUrl
}

var AssetFields_ScriptName_DEFAULT string

func (p *AssetFields) GetScriptName() string {
	if !p.IsSetScriptName() {
		return AssetFields_ScriptName_DEFAULT
	}
	return *p.ScriptName
}

var AssetFields_ScriptUrl_DEFAULT string

func (p *AssetFields) GetScriptUrl() string {
	if !p.IsSetScriptUrl() {
		return AssetFields_ScriptUrl_DEFAULT
	}
	return *p.ScriptUrl
}

var AssetFields_BlockAds_DEFAULT bool

func (p *AssetFields) GetBlockAds() bool {
	if !p.IsSetBlockAds() {
		return AssetFields_BlockAds_DEFAULT
	}
	return *p.BlockAds
}

var AssetFields_HTML_DEFAULT string

func (p *AssetFields) GetHTML() string {
	if !p.IsSetHTML() {
		return AssetFields_HTML_DEFAULT
	}
	return *p.HTML
}

var AssetFields_EmbedType_DEFAULT string

func (p *AssetFields) GetEmbedType() string {
	if !p.IsSetEmbedType() {
		return AssetFields_EmbedType_DEFAULT
	}
	return *p.EmbedType
}

var AssetFields_Explicit_DEFAULT bool

func (p *AssetFields) GetExplicit() bool {
	if !p.IsSetExplicit() {
		return AssetFields_Explicit_DEFAULT
	}
	return *p.Explicit
}

var AssetFields_Clean_DEFAULT bool

func (p *AssetFields) GetClean() bool {
	if !p.IsSetClean() {
		return AssetFields_Clean_DEFAULT
	}
	return *p.Clean
}

var AssetFields_ThumbnailImageUrl_DEFAULT string

func (p *AssetFields) GetThumbnailImageUrl() string {
	if !p.IsSetThumbnailImageUrl() {
		return AssetFields_ThumbnailImageUrl_DEFAULT
	}
	return *p.ThumbnailImageUrl
}

var AssetFields_LinkText_DEFAULT string

func (p *AssetFields) GetLinkText() string {
	if !p.IsSetLinkText() {
		return AssetFields_LinkText_DEFAULT
	}
	return *p.LinkText
}

var AssetFields_LinkPrefix_DEFAULT string

func (p *AssetFields) GetLinkPrefix() string {
	if !p.IsSetLinkPrefix() {
		return AssetFields_LinkPrefix_DEFAULT
	}
	return *p.LinkPrefix
}

var AssetFields_ShortUrl_DEFAULT string

func (p *AssetFields) GetShortUrl() string {
	if !p.IsSetShortUrl() {
		return AssetFields_ShortUrl_DEFAULT
	}
	return *p.ShortUrl
}

var AssetFields_ImageType_DEFAULT string

func (p *AssetFields) GetImageType() string {
	if !p.IsSetImageType() {
		return AssetFields_ImageType_DEFAULT
	}
	return *p.ImageType
}

var AssetFields_SuppliersReference_DEFAULT string

func (p *AssetFields) GetSuppliersReference() string {
	if !p.IsSetSuppliersReference() {
		return AssetFields_SuppliersReference_DEFAULT
	}
	return *p.SuppliersReference
}

var AssetFields_MediaApiUri_DEFAULT string

func (p *AssetFields) GetMediaApiUri() string {
	if !p.IsSetMediaApiUri() {
		return AssetFields_MediaApiUri_DEFAULT
	}
	return *p.MediaApiUri
}

var AssetFields_Copyright_DEFAULT string

func (p *AssetFields) GetCopyright() string {
	if !p.IsSetCopyright() {
		return AssetFields_Copyright_DEFAULT
	}
	return *p.Copyright
}

var AssetFields_MimeType_DEFAULT string

func (p *AssetFields) GetMimeType() string {
	if !p.IsSetMimeType() {
		return AssetFields_MimeType_DEFAULT
	}
	return *p.MimeType
}

var AssetFields_URL_DEFAULT string

func (p *AssetFields) GetURL() string {
	if !p.IsSetURL() {
		return AssetFields_URL_DEFAULT
	}
	return *p.URL
}

var AssetFields_OriginalUrl_DEFAULT string

func (p *AssetFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return AssetFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var AssetFields_ID_DEFAULT string

func (p *AssetFields) GetID() string {
	if !p.IsSetID() {
		return AssetFields_ID_DEFAULT
	}
	return *p.ID
}

var AssetFields_Attribution_DEFAULT string

func (p *AssetFields) GetAttribution() string {
	if !p.IsSetAttribution() {
		return AssetFields_Attribution_DEFAULT
	}
	return *p.Attribution
}

var AssetFields_Description_DEFAULT string

func (p *AssetFields) GetDescription() string {
	if !p.IsSetDescription() {
		return AssetFields_Description_DEFAULT
	}
	return *p.Description
}

var AssetFields_Title_DEFAULT string

func (p *AssetFields) GetTitle() string {
	if !p.IsSetTitle() {
		return AssetFields_Title_DEFAULT
	}
	return *p.Title
}

var AssetFields_ContentAuthSystem_DEFAULT string

func (p *AssetFields) GetContentAuthSystem() string {
	if !p.IsSetContentAuthSystem() {
		return AssetFields_ContentAuthSystem_DEFAULT
	}
	return *p.ContentAuthSystem
}

var AssetFields_Alt_DEFAULT string

func (p *AssetFields) GetAlt() string {
	if !p.IsSetAlt() {
		return AssetFields_Alt_DEFAULT
	}
	return *p.Alt
}

var AssetFields_PicdarUrn_DEFAULT string

func (p *AssetFields) GetPicdarUrn() string {
	if !p.IsSetPicdarUrn() {
		return AssetFields_PicdarUrn_DEFAULT
	}
	return *p.PicdarUrn
}

var AssetFields_Comment_DEFAULT string

func (p *AssetFields) GetComment() string {
	if !p.IsSetComment() {
		return AssetFields_Comment_DEFAULT
	}
	return *p.Comment
}

var AssetFields_WitnessEmbedType_DEFAULT string

func (p *AssetFields) GetWitnessEmbedType() string {
	if !p.IsSetWitnessEmbedType() {
		return AssetFields_WitnessEmbedType_DEFAULT
	}
	return *p.WitnessEmbedType
}

var AssetFields_AuthorName_DEFAULT string

func (p *AssetFields) GetAuthorName() string {
	if !p.IsSetAuthorName() {
		return AssetFields_AuthorName_DEFAULT
	}
	return *p.AuthorName
}

var AssetFields_AuthorUsername_DEFAULT string

func (p *AssetFields) GetAuthorUsername() string {
	if !p.IsSetAuthorUsername() {
		return AssetFields_AuthorUsername_DEFAULT
	}
	return *p.AuthorUsername
}

var AssetFields_AuthorWitnessProfileUrl_DEFAULT string

func (p *AssetFields) GetAuthorWitnessProfileUrl() string {
	if !p.IsSetAuthorWitnessProfileUrl() {
		return AssetFields_AuthorWitnessProfileUrl_DEFAULT
	}
	return *p.AuthorWitnessProfileUrl
}

var AssetFields_AuthorGuardianProfileUrl_DEFAULT string

func (p *AssetFields) GetAuthorGuardianProfileUrl() string {
	if !p.IsSetAuthorGuardianProfileUrl() {
		return AssetFields_AuthorGuardianProfileUrl_DEFAULT
	}
	return *p.AuthorGuardianProfileUrl
}

var AssetFields_ApiUrl_DEFAULT string

func (p *AssetFields) GetApiUrl() string {
	if !p.IsSetApiUrl() {
		return AssetFields_ApiUrl_DEFAULT
	}
	return *p.ApiUrl
}

var AssetFields_DateCreated_DEFAULT *CapiDateTime

func (p *AssetFields) GetDateCreated() *CapiDateTime {
	if !p.IsSetDateCreated() {
		return AssetFields_DateCreated_DEFAULT
	}
	return p.DateCreated
}

var AssetFields_YoutubeUrl_DEFAULT string

func (p *AssetFields) GetYoutubeUrl() string {
	if !p.IsSetYoutubeUrl() {
		return AssetFields_YoutubeUrl_DEFAULT
	}
	return *p.YoutubeUrl
}

var AssetFields_YoutubeSource_DEFAULT string

func (p *AssetFields) GetYoutubeSource() string {
	if !p.IsSetYoutubeSource() {
		return AssetFields_YoutubeSource_DEFAULT
	}
	return *p.YoutubeSource
}

var AssetFields_YoutubeTitle_DEFAULT string

func (p *AssetFields) GetYoutubeTitle() string {
	if !p.IsSetYoutubeTitle() {
		return AssetFields_YoutubeTitle_DEFAULT
	}
	return *p.YoutubeTitle
}

var AssetFields_YoutubeDescription_DEFAULT string

func (p *AssetFields) GetYoutubeDescription() string {
	if !p.IsSetYoutubeDescription() {
		return AssetFields_YoutubeDescription_DEFAULT
	}
	return *p.YoutubeDescription
}

var AssetFields_YoutubeAuthorName_DEFAULT string

func (p *AssetFields) GetYoutubeAuthorName() string {
	if !p.IsSetYoutubeAuthorName() {
		return AssetFields_YoutubeAuthorName_DEFAULT
	}
	return *p.YoutubeAuthorName
}

var AssetFields_YoutubeHtml_DEFAULT string

func (p *AssetFields) GetYoutubeHtml() string {
	if !p.IsSetYoutubeHtml() {
		return AssetFields_YoutubeHtml_DEFAULT
	}
	return *p.YoutubeHtml
}

var AssetFields_Venue_DEFAULT string

func (p *AssetFields) GetVenue() string {
	if !p.IsSetVenue() {
		return AssetFields_Venue_DEFAULT
	}
	return *p.Venue
}

var AssetFields_Location_DEFAULT string

func (p *AssetFields) GetLocation() string {
	if !p.IsSetLocation() {
		return AssetFields_Location_DEFAULT
	}
	return *p.Location
}

var AssetFields_Identifier_DEFAULT string

func (p *AssetFields) GetIdentifier() string {
	if !p.IsSetIdentifier() {
		return AssetFields_Identifier_DEFAULT
	}
	return *p.Identifier
}

var AssetFields_Price_DEFAULT string

func (p *AssetFields) GetPrice() string {
	if !p.IsSetPrice() {
		return AssetFields_Price_DEFAULT
	}
	return *p.Price
}

var AssetFields_Start_DEFAULT *CapiDateTime

func (p *AssetFields) GetStart() *CapiDateTime {
	if !p.IsSetStart() {
		return AssetFields_Start_DEFAULT
	}
	return p.Start
}

var AssetFields_SafeEmbedCode_DEFAULT bool

func (p *AssetFields) GetSafeEmbedCode() bool {
	if !p.IsSetSafeEmbedCode() {
		return AssetFields_SafeEmbedCode_DEFAULT
	}
	return *p.SafeEmbedCode
}
func (p *AssetFields) IsSetAspectRatio() bool {
	return p.AspectRatio != nil
}

func (p *AssetFields) IsSetAltText() bool {
	return p.AltText != nil
}

func (p *AssetFields) IsSetIsInappropriateForAdverts() bool {
	return p.IsInappropriateForAdverts != nil
}

func (p *AssetFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *AssetFields) IsSetCredit() bool {
	return p.Credit != nil
}

func (p *AssetFields) IsSetEmbeddable() bool {
	return p.Embeddable != nil
}

func (p *AssetFields) IsSetPhotographer() bool {
	return p.Photographer != nil
}

func (p *AssetFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *AssetFields) IsSetStillImageUrl() bool {
	return p.StillImageUrl != nil
}

func (p *AssetFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *AssetFields) IsSetHeight() bool {
	return p.Height != nil
}

func (p *AssetFields) IsSetName() bool {
	return p.Name != nil
}

func (p *AssetFields) IsSetSecureFile() bool {
	return p.SecureFile != nil
}

func (p *AssetFields) IsSetIsMaster() bool {
	return p.IsMaster != nil
}

func (p *AssetFields) IsSetSizeInBytes() bool {
	return p.SizeInBytes != nil
}

func (p *AssetFields) IsSetDurationMinutes() bool {
	return p.DurationMinutes != nil
}

func (p *AssetFields) IsSetDurationSeconds() bool {
	return p.DurationSeconds != nil
}

func (p *AssetFields) IsSetDisplayCredit() bool {
	return p.DisplayCredit != nil
}

func (p *AssetFields) IsSetThumbnailUrl() bool {
	return p.ThumbnailUrl != nil
}

func (p *AssetFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *AssetFields) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *AssetFields) IsSetIframeUrl() bool {
	return p.IframeUrl != nil
}

func (p *AssetFields) IsSetScriptName() bool {
	return p.ScriptName != nil
}

func (p *AssetFields) IsSetScriptUrl() bool {
	return p.ScriptUrl != nil
}

func (p *AssetFields) IsSetBlockAds() bool {
	return p.BlockAds != nil
}

func (p *AssetFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *AssetFields) IsSetEmbedType() bool {
	return p.EmbedType != nil
}

func (p *AssetFields) IsSetExplicit() bool {
	return p.Explicit != nil
}

func (p *AssetFields) IsSetClean() bool {
	return p.Clean != nil
}

func (p *AssetFields) IsSetThumbnailImageUrl() bool {
	return p.ThumbnailImageUrl != nil
}

func (p *AssetFields) IsSetLinkText() bool {
	return p.LinkText != nil
}

func (p *AssetFields) IsSetLinkPrefix() bool {
	return p.LinkPrefix != nil
}

func (p *AssetFields) IsSetShortUrl() bool {
	return p.ShortUrl != nil
}

func (p *AssetFields) IsSetImageType() bool {
	return p.ImageType != nil
}

func (p *AssetFields) IsSetSuppliersReference() bool {
	return p.SuppliersReference != nil
}

func (p *AssetFields) IsSetMediaApiUri() bool {
	return p.MediaApiUri != nil
}

func (p *AssetFields) IsSetCopyright() bool {
	return p.Copyright != nil
}

func (p *AssetFields) IsSetMimeType() bool {
	return p.MimeType != nil
}

func (p *AssetFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *AssetFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *AssetFields) IsSetID() bool {
	return p.ID != nil
}

func (p *AssetFields) IsSetAttribution() bool {
	return p.Attribution != nil
}

func (p *AssetFields) IsSetDescription() bool {
	return p.Description != nil
}

func (p *AssetFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *AssetFields) IsSetContentAuthSystem() bool {
	return p.ContentAuthSystem != nil
}

func (p *AssetFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *AssetFields) IsSetPicdarUrn() bool {
	return p.PicdarUrn != nil
}

func (p *AssetFields) IsSetComment() bool {
	return p.Comment != nil
}

func (p *AssetFields) IsSetWitnessEmbedType() bool {
	return p.WitnessEmbedType != nil
}

func (p *AssetFields) IsSetAuthorName() bool {
	return p.AuthorName != nil
}

func (p *AssetFields) IsSetAuthorUsername() bool {
	return p.AuthorUsername != nil
}

func (p *AssetFields) IsSetAuthorWitnessProfileUrl() bool {
	return p.AuthorWitnessProfileUrl != nil
}

func (p *AssetFields) IsSetAuthorGuardianProfileUrl() bool {
	return p.AuthorGuardianProfileUrl != nil
}

func (p *AssetFields) IsSetApiUrl() bool {
	return p.ApiUrl != nil
}

func (p *AssetFields) IsSetDateCreated() bool {
	return p.DateCreated != nil
}

func (p *AssetFields) IsSetYoutubeUrl() bool {
	return p.YoutubeUrl != nil
}

func (p *AssetFields) IsSetYoutubeSource() bool {
	return p.YoutubeSource != nil
}

func (p *AssetFields) IsSetYoutubeTitle() bool {
	return p.YoutubeTitle != nil
}

func (p *AssetFields) IsSetYoutubeDescription() bool {
	return p.YoutubeDescription != nil
}

func (p *AssetFields) IsSetYoutubeAuthorName() bool {
	return p.YoutubeAuthorName != nil
}

func (p *AssetFields) IsSetYoutubeHtml() bool {
	return p.YoutubeHtml != nil
}

func (p *AssetFields) IsSetVenue() bool {
	return p.Venue != nil
}

func (p *AssetFields) IsSetLocation() bool {
	return p.Location != nil
}

func (p *AssetFields) IsSetIdentifier() bool {
	return p.Identifier != nil
}

func (p *AssetFields) IsSetPrice() bool {
	return p.Price != nil
}

func (p *AssetFields) IsSetStart() bool {
	return p.Start != nil
}

func (p *AssetFields) IsSetSafeEmbedCode() bool {
	return p.SafeEmbedCode != nil
}

func (p *AssetFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.readField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.readField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.readField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.readField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.readField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.readField41(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.readField42(iprot); err != nil {
				return err
			}
		case 43:
			if err := p.readField43(iprot); err != nil {
				return err
			}
		case 44:
			if err := p.readField44(iprot); err != nil {
				return err
			}
		case 45:
			if err := p.readField45(iprot); err != nil {
				return err
			}
		case 46:
			if err := p.readField46(iprot); err != nil {
				return err
			}
		case 47:
			if err := p.readField47(iprot); err != nil {
				return err
			}
		case 48:
			if err := p.readField48(iprot); err != nil {
				return err
			}
		case 49:
			if err := p.readField49(iprot); err != nil {
				return err
			}
		case 50:
			if err := p.readField50(iprot); err != nil {
				return err
			}
		case 51:
			if err := p.readField51(iprot); err != nil {
				return err
			}
		case 52:
			if err := p.readField52(iprot); err != nil {
				return err
			}
		case 53:
			if err := p.readField53(iprot); err != nil {
				return err
			}
		case 54:
			if err := p.readField54(iprot); err != nil {
				return err
			}
		case 55:
			if err := p.readField55(iprot); err != nil {
				return err
			}
		case 56:
			if err := p.readField56(iprot); err != nil {
				return err
			}
		case 57:
			if err := p.readField57(iprot); err != nil {
				return err
			}
		case 58:
			if err := p.readField58(iprot); err != nil {
				return err
			}
		case 59:
			if err := p.readField59(iprot); err != nil {
				return err
			}
		case 60:
			if err := p.readField60(iprot); err != nil {
				return err
			}
		case 61:
			if err := p.readField61(iprot); err != nil {
				return err
			}
		case 62:
			if err := p.readField62(iprot); err != nil {
				return err
			}
		case 63:
			if err := p.readField63(iprot); err != nil {
				return err
			}
		case 64:
			if err := p.readField64(iprot); err != nil {
				return err
			}
		case 65:
			if err := p.readField65(iprot); err != nil {
				return err
			}
		case 66:
			if err := p.readField66(iprot); err != nil {
				return err
			}
		case 68:
			if err := p.readField68(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AssetFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AspectRatio = &v
	}
	return nil
}

func (p *AssetFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AltText = &v
	}
	return nil
}

func (p *AssetFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsInappropriateForAdverts = &v
	}
	return nil
}

func (p *AssetFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *AssetFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Credit = &v
	}
	return nil
}

func (p *AssetFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Embeddable = &v
	}
	return nil
}

func (p *AssetFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Photographer = &v
	}
	return nil
}

func (p *AssetFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *AssetFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.StillImageUrl = &v
	}
	return nil
}

func (p *AssetFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *AssetFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *AssetFields) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *AssetFields) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.SecureFile = &v
	}
	return nil
}

func (p *AssetFields) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.IsMaster = &v
	}
	return nil
}

func (p *AssetFields) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.SizeInBytes = &v
	}
	return nil
}

func (p *AssetFields) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.DurationMinutes = &v
	}
	return nil
}

func (p *AssetFields) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.DurationSeconds = &v
	}
	return nil
}

func (p *AssetFields) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.DisplayCredit = &v
	}
	return nil
}

func (p *AssetFields) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.ThumbnailUrl = &v
	}
	return nil
}

func (p *AssetFields) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *AssetFields) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *AssetFields) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.IframeUrl = &v
	}
	return nil
}

func (p *AssetFields) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ScriptName = &v
	}
	return nil
}

func (p *AssetFields) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.ScriptUrl = &v
	}
	return nil
}

func (p *AssetFields) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.BlockAds = &v
	}
	return nil
}

func (p *AssetFields) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *AssetFields) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.EmbedType = &v
	}
	return nil
}

func (p *AssetFields) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.Explicit = &v
	}
	return nil
}

func (p *AssetFields) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.Clean = &v
	}
	return nil
}

func (p *AssetFields) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ThumbnailImageUrl = &v
	}
	return nil
}

func (p *AssetFields) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.LinkText = &v
	}
	return nil
}

func (p *AssetFields) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.LinkPrefix = &v
	}
	return nil
}

func (p *AssetFields) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.ShortUrl = &v
	}
	return nil
}

func (p *AssetFields) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.ImageType = &v
	}
	return nil
}

func (p *AssetFields) readField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.SuppliersReference = &v
	}
	return nil
}

func (p *AssetFields) readField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.MediaApiUri = &v
	}
	return nil
}

func (p *AssetFields) readField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.Copyright = &v
	}
	return nil
}

func (p *AssetFields) readField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.MimeType = &v
	}
	return nil
}

func (p *AssetFields) readField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *AssetFields) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *AssetFields) readField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *AssetFields) readField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.Attribution = &v
	}
	return nil
}

func (p *AssetFields) readField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 43: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *AssetFields) readField44(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 44: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *AssetFields) readField45(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 45: ", err)
	} else {
		p.ContentAuthSystem = &v
	}
	return nil
}

func (p *AssetFields) readField46(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 46: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *AssetFields) readField47(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 47: ", err)
	} else {
		p.PicdarUrn = &v
	}
	return nil
}

func (p *AssetFields) readField48(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 48: ", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *AssetFields) readField49(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 49: ", err)
	} else {
		p.WitnessEmbedType = &v
	}
	return nil
}

func (p *AssetFields) readField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.AuthorName = &v
	}
	return nil
}

func (p *AssetFields) readField51(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 51: ", err)
	} else {
		p.AuthorUsername = &v
	}
	return nil
}

func (p *AssetFields) readField52(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 52: ", err)
	} else {
		p.AuthorWitnessProfileUrl = &v
	}
	return nil
}

func (p *AssetFields) readField53(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 53: ", err)
	} else {
		p.AuthorGuardianProfileUrl = &v
	}
	return nil
}

func (p *AssetFields) readField54(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 54: ", err)
	} else {
		p.ApiUrl = &v
	}
	return nil
}

func (p *AssetFields) readField55(iprot thrift.TProtocol) error {
	p.DateCreated = &CapiDateTime{}
	if err := p.DateCreated.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateCreated), err)
	}
	return nil
}

func (p *AssetFields) readField56(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 56: ", err)
	} else {
		p.YoutubeUrl = &v
	}
	return nil
}

func (p *AssetFields) readField57(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 57: ", err)
	} else {
		p.YoutubeSource = &v
	}
	return nil
}

func (p *AssetFields) readField58(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 58: ", err)
	} else {
		p.YoutubeTitle = &v
	}
	return nil
}

func (p *AssetFields) readField59(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 59: ", err)
	} else {
		p.YoutubeDescription = &v
	}
	return nil
}

func (p *AssetFields) readField60(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 60: ", err)
	} else {
		p.YoutubeAuthorName = &v
	}
	return nil
}

func (p *AssetFields) readField61(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 61: ", err)
	} else {
		p.YoutubeHtml = &v
	}
	return nil
}

func (p *AssetFields) readField62(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 62: ", err)
	} else {
		p.Venue = &v
	}
	return nil
}

func (p *AssetFields) readField63(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 63: ", err)
	} else {
		p.Location = &v
	}
	return nil
}

func (p *AssetFields) readField64(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 64: ", err)
	} else {
		p.Identifier = &v
	}
	return nil
}

func (p *AssetFields) readField65(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 65: ", err)
	} else {
		p.Price = &v
	}
	return nil
}

func (p *AssetFields) readField66(iprot thrift.TProtocol) error {
	p.Start = &CapiDateTime{}
	if err := p.Start.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Start), err)
	}
	return nil
}

func (p *AssetFields) readField68(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 68: ", err)
	} else {
		p.SafeEmbedCode = &v
	}
	return nil
}

func (p *AssetFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AssetFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := p.writeField38(oprot); err != nil {
		return err
	}
	if err := p.writeField39(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField41(oprot); err != nil {
		return err
	}
	if err := p.writeField42(oprot); err != nil {
		return err
	}
	if err := p.writeField43(oprot); err != nil {
		return err
	}
	if err := p.writeField44(oprot); err != nil {
		return err
	}
	if err := p.writeField45(oprot); err != nil {
		return err
	}
	if err := p.writeField46(oprot); err != nil {
		return err
	}
	if err := p.writeField47(oprot); err != nil {
		return err
	}
	if err := p.writeField48(oprot); err != nil {
		return err
	}
	if err := p.writeField49(oprot); err != nil {
		return err
	}
	if err := p.writeField50(oprot); err != nil {
		return err
	}
	if err := p.writeField51(oprot); err != nil {
		return err
	}
	if err := p.writeField52(oprot); err != nil {
		return err
	}
	if err := p.writeField53(oprot); err != nil {
		return err
	}
	if err := p.writeField54(oprot); err != nil {
		return err
	}
	if err := p.writeField55(oprot); err != nil {
		return err
	}
	if err := p.writeField56(oprot); err != nil {
		return err
	}
	if err := p.writeField57(oprot); err != nil {
		return err
	}
	if err := p.writeField58(oprot); err != nil {
		return err
	}
	if err := p.writeField59(oprot); err != nil {
		return err
	}
	if err := p.writeField60(oprot); err != nil {
		return err
	}
	if err := p.writeField61(oprot); err != nil {
		return err
	}
	if err := p.writeField62(oprot); err != nil {
		return err
	}
	if err := p.writeField63(oprot); err != nil {
		return err
	}
	if err := p.writeField64(oprot); err != nil {
		return err
	}
	if err := p.writeField65(oprot); err != nil {
		return err
	}
	if err := p.writeField66(oprot); err != nil {
		return err
	}
	if err := p.writeField68(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AssetFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAspectRatio() {
		if err := oprot.WriteFieldBegin("aspectRatio", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aspectRatio: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AspectRatio)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.aspectRatio (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aspectRatio: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAltText() {
		if err := oprot.WriteFieldBegin("altText", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:altText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AltText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.altText (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:altText: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInappropriateForAdverts() {
		if err := oprot.WriteFieldBegin("isInappropriateForAdverts", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isInappropriateForAdverts: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsInappropriateForAdverts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isInappropriateForAdverts (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isInappropriateForAdverts: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caption: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredit() {
		if err := oprot.WriteFieldBegin("credit", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credit: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Credit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credit: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmbeddable() {
		if err := oprot.WriteFieldBegin("embeddable", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:embeddable: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Embeddable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.embeddable (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:embeddable: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotographer() {
		if err := oprot.WriteFieldBegin("photographer", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:photographer: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Photographer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.photographer (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:photographer: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:source: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStillImageUrl() {
		if err := oprot.WriteFieldBegin("stillImageUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stillImageUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StillImageUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stillImageUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stillImageUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:width: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:height: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:height: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:name: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecureFile() {
		if err := oprot.WriteFieldBegin("secureFile", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:secureFile: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SecureFile)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secureFile (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:secureFile: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMaster() {
		if err := oprot.WriteFieldBegin("isMaster", thrift.BOOL, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:isMaster: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMaster)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMaster (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:isMaster: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSizeInBytes() {
		if err := oprot.WriteFieldBegin("sizeInBytes", thrift.I64, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sizeInBytes: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SizeInBytes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sizeInBytes (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sizeInBytes: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationMinutes() {
		if err := oprot.WriteFieldBegin("durationMinutes", thrift.I32, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:durationMinutes: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DurationMinutes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durationMinutes (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:durationMinutes: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationSeconds() {
		if err := oprot.WriteFieldBegin("durationSeconds", thrift.I32, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:durationSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DurationSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durationSeconds (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:durationSeconds: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayCredit() {
		if err := oprot.WriteFieldBegin("displayCredit", thrift.BOOL, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:displayCredit: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.DisplayCredit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayCredit (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:displayCredit: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbnailUrl() {
		if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:thumbnailUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThumbnailUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:thumbnailUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:role: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:mediaId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:mediaId: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIframeUrl() {
		if err := oprot.WriteFieldBegin("iframeUrl", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:iframeUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.IframeUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.iframeUrl (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:iframeUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetScriptName() {
		if err := oprot.WriteFieldBegin("scriptName", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:scriptName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScriptName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scriptName (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:scriptName: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetScriptUrl() {
		if err := oprot.WriteFieldBegin("scriptUrl", thrift.STRING, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:scriptUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScriptUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scriptUrl (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:scriptUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlockAds() {
		if err := oprot.WriteFieldBegin("blockAds", thrift.BOOL, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:blockAds: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BlockAds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blockAds (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:blockAds: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:html: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmbedType() {
		if err := oprot.WriteFieldBegin("embedType", thrift.STRING, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:embedType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EmbedType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.embedType (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:embedType: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplicit() {
		if err := oprot.WriteFieldBegin("explicit", thrift.BOOL, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:explicit: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Explicit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.explicit (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:explicit: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetClean() {
		if err := oprot.WriteFieldBegin("clean", thrift.BOOL, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:clean: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Clean)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clean (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:clean: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbnailImageUrl() {
		if err := oprot.WriteFieldBegin("thumbnailImageUrl", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:thumbnailImageUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThumbnailImageUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.thumbnailImageUrl (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:thumbnailImageUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkText() {
		if err := oprot.WriteFieldBegin("linkText", thrift.STRING, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:linkText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkText (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:linkText: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkPrefix() {
		if err := oprot.WriteFieldBegin("linkPrefix", thrift.STRING, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:linkPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkPrefix (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:linkPrefix: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrl() {
		if err := oprot.WriteFieldBegin("shortUrl", thrift.STRING, 33); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:shortUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShortUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shortUrl (33) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 33:shortUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageType() {
		if err := oprot.WriteFieldBegin("imageType", thrift.STRING, 34); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:imageType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ImageType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageType (34) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 34:imageType: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuppliersReference() {
		if err := oprot.WriteFieldBegin("suppliersReference", thrift.STRING, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:suppliersReference: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SuppliersReference)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.suppliersReference (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:suppliersReference: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaApiUri() {
		if err := oprot.WriteFieldBegin("mediaApiUri", thrift.STRING, 36); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:mediaApiUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaApiUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaApiUri (36) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 36:mediaApiUri: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetCopyright() {
		if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 37); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:copyright: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Copyright)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.copyright (37) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 37:copyright: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField38(oprot thrift.TProtocol) (err error) {
	if p.IsSetMimeType() {
		if err := oprot.WriteFieldBegin("mimeType", thrift.STRING, 38); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:mimeType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MimeType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mimeType (38) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 38:mimeType: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField39(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 39); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (39) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 39:url: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 41); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (41) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 41:id: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttribution() {
		if err := oprot.WriteFieldBegin("attribution", thrift.STRING, 42); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:attribution: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Attribution)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.attribution (42) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 42:attribution: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 43); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (43) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 43:description: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField44(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 44); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (44) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 44:title: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField45(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentAuthSystem() {
		if err := oprot.WriteFieldBegin("contentAuthSystem", thrift.STRING, 45); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:contentAuthSystem: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContentAuthSystem)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentAuthSystem (45) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 45:contentAuthSystem: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField46(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 46); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (46) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 46:alt: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField47(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicdarUrn() {
		if err := oprot.WriteFieldBegin("picdarUrn", thrift.STRING, 47); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:picdarUrn: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PicdarUrn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.picdarUrn (47) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 47:picdarUrn: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField48(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 48); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:comment: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comment (48) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 48:comment: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField49(oprot thrift.TProtocol) (err error) {
	if p.IsSetWitnessEmbedType() {
		if err := oprot.WriteFieldBegin("witnessEmbedType", thrift.STRING, 49); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 49:witnessEmbedType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WitnessEmbedType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.witnessEmbedType (49) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 49:witnessEmbedType: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorName() {
		if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:authorName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorName (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:authorName: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorUsername() {
		if err := oprot.WriteFieldBegin("authorUsername", thrift.STRING, 51); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:authorUsername: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorUsername)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorUsername (51) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 51:authorUsername: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField52(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorWitnessProfileUrl() {
		if err := oprot.WriteFieldBegin("authorWitnessProfileUrl", thrift.STRING, 52); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:authorWitnessProfileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorWitnessProfileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorWitnessProfileUrl (52) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 52:authorWitnessProfileUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField53(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorGuardianProfileUrl() {
		if err := oprot.WriteFieldBegin("authorGuardianProfileUrl", thrift.STRING, 53); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:authorGuardianProfileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorGuardianProfileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorGuardianProfileUrl (53) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 53:authorGuardianProfileUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField54(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiUrl() {
		if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 54); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:apiUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ApiUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.apiUrl (54) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 54:apiUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateCreated() {
		if err := oprot.WriteFieldBegin("dateCreated", thrift.STRUCT, 55); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:dateCreated: ", p), err)
		}
		if err := p.DateCreated.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateCreated), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 55:dateCreated: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField56(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeUrl() {
		if err := oprot.WriteFieldBegin("youtubeUrl", thrift.STRING, 56); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 56:youtubeUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeUrl (56) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 56:youtubeUrl: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField57(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeSource() {
		if err := oprot.WriteFieldBegin("youtubeSource", thrift.STRING, 57); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 57:youtubeSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeSource (57) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 57:youtubeSource: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField58(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeTitle() {
		if err := oprot.WriteFieldBegin("youtubeTitle", thrift.STRING, 58); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 58:youtubeTitle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeTitle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeTitle (58) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 58:youtubeTitle: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField59(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeDescription() {
		if err := oprot.WriteFieldBegin("youtubeDescription", thrift.STRING, 59); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 59:youtubeDescription: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeDescription)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeDescription (59) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 59:youtubeDescription: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField60(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeAuthorName() {
		if err := oprot.WriteFieldBegin("youtubeAuthorName", thrift.STRING, 60); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:youtubeAuthorName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeAuthorName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeAuthorName (60) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 60:youtubeAuthorName: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField61(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeHtml() {
		if err := oprot.WriteFieldBegin("youtubeHtml", thrift.STRING, 61); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:youtubeHtml: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeHtml)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeHtml (61) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 61:youtubeHtml: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField62(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenue() {
		if err := oprot.WriteFieldBegin("venue", thrift.STRING, 62); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:venue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Venue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.venue (62) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 62:venue: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField63(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRING, 63); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:location: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Location)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.location (63) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 63:location: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField64(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentifier() {
		if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 64); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 64:identifier: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Identifier)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.identifier (64) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 64:identifier: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField65(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err := oprot.WriteFieldBegin("price", thrift.STRING, 65); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:price: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Price)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.price (65) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 65:price: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField66(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err := oprot.WriteFieldBegin("start", thrift.STRUCT, 66); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:start: ", p), err)
		}
		if err := p.Start.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Start), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 66:start: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) writeField68(oprot thrift.TProtocol) (err error) {
	if p.IsSetSafeEmbedCode() {
		if err := oprot.WriteFieldBegin("safeEmbedCode", thrift.BOOL, 68); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:safeEmbedCode: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SafeEmbedCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.safeEmbedCode (68) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 68:safeEmbedCode: ", p), err)
		}
	}
	return err
}

func (p *AssetFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AssetFields(%+v)", *p)
}

// Attributes:
//  - Type
//  - MimeType
//  - File
//  - TypeData
type Asset struct {
	Type     AssetType    `thrift:"type,1,required" json:"type"`
	MimeType *string      `thrift:"mimeType,2" json:"mimeType,omitempty"`
	File     *string      `thrift:"file,3" json:"file,omitempty"`
	TypeData *AssetFields `thrift:"typeData,4" json:"typeData,omitempty"`
}

func NewAsset() *Asset {
	return &Asset{}
}

func (p *Asset) GetType() AssetType {
	return p.Type
}

var Asset_MimeType_DEFAULT string

func (p *Asset) GetMimeType() string {
	if !p.IsSetMimeType() {
		return Asset_MimeType_DEFAULT
	}
	return *p.MimeType
}

var Asset_File_DEFAULT string

func (p *Asset) GetFile() string {
	if !p.IsSetFile() {
		return Asset_File_DEFAULT
	}
	return *p.File
}

var Asset_TypeData_DEFAULT *AssetFields

func (p *Asset) GetTypeData() *AssetFields {
	if !p.IsSetTypeData() {
		return Asset_TypeData_DEFAULT
	}
	return p.TypeData
}
func (p *Asset) IsSetMimeType() bool {
	return p.MimeType != nil
}

func (p *Asset) IsSetFile() bool {
	return p.File != nil
}

func (p *Asset) IsSetTypeData() bool {
	return p.TypeData != nil
}

func (p *Asset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *Asset) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AssetType(v)
		p.Type = temp
	}
	return nil
}

func (p *Asset) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MimeType = &v
	}
	return nil
}

func (p *Asset) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.File = &v
	}
	return nil
}

func (p *Asset) readField4(iprot thrift.TProtocol) error {
	p.TypeData = &AssetFields{}
	if err := p.TypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TypeData), err)
	}
	return nil
}

func (p *Asset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Asset"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Asset) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *Asset) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMimeType() {
		if err := oprot.WriteFieldBegin("mimeType", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mimeType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MimeType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mimeType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mimeType: ", p), err)
		}
	}
	return err
}

func (p *Asset) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFile() {
		if err := oprot.WriteFieldBegin("file", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:file: ", p), err)
		}
		if err := oprot.WriteString(string(*p.File)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.file (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:file: ", p), err)
		}
	}
	return err
}

func (p *Asset) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeData() {
		if err := oprot.WriteFieldBegin("typeData", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:typeData: ", p), err)
		}
		if err := p.TypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:typeData: ", p), err)
		}
	}
	return err
}

func (p *Asset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Asset(%+v)", *p)
}

// Attributes:
//  - HTML
type TextElementFields struct {
	HTML *string `thrift:"html,1" json:"html,omitempty"`
}

func NewTextElementFields() *TextElementFields {
	return &TextElementFields{}
}

var TextElementFields_HTML_DEFAULT string

func (p *TextElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return TextElementFields_HTML_DEFAULT
	}
	return *p.HTML
}
func (p *TextElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *TextElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TextElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *TextElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TextElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TextElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:html: ", p), err)
		}
	}
	return err
}

func (p *TextElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextElementFields(%+v)", *p)
}

// Attributes:
//  - HTML
//  - Attribution
type PullquoteElementFields struct {
	HTML        *string `thrift:"html,1" json:"html,omitempty"`
	Attribution *string `thrift:"attribution,2" json:"attribution,omitempty"`
}

func NewPullquoteElementFields() *PullquoteElementFields {
	return &PullquoteElementFields{}
}

var PullquoteElementFields_HTML_DEFAULT string

func (p *PullquoteElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return PullquoteElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var PullquoteElementFields_Attribution_DEFAULT string

func (p *PullquoteElementFields) GetAttribution() string {
	if !p.IsSetAttribution() {
		return PullquoteElementFields_Attribution_DEFAULT
	}
	return *p.Attribution
}
func (p *PullquoteElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *PullquoteElementFields) IsSetAttribution() bool {
	return p.Attribution != nil
}

func (p *PullquoteElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PullquoteElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *PullquoteElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Attribution = &v
	}
	return nil
}

func (p *PullquoteElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PullquoteElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PullquoteElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:html: ", p), err)
		}
	}
	return err
}

func (p *PullquoteElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttribution() {
		if err := oprot.WriteFieldBegin("attribution", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attribution: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Attribution)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.attribution (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attribution: ", p), err)
		}
	}
	return err
}

func (p *PullquoteElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PullquoteElementFields(%+v)", *p)
}

// Attributes:
//  - Source
//  - URL
//  - ID
//  - HTML
//  - OriginalUrl
//  - Role
type TweetElementFields struct {
	Source      *string `thrift:"source,1" json:"source,omitempty"`
	URL         *string `thrift:"url,2" json:"url,omitempty"`
	ID          *string `thrift:"id,3" json:"id,omitempty"`
	HTML        *string `thrift:"html,4" json:"html,omitempty"`
	OriginalUrl *string `thrift:"originalUrl,5" json:"originalUrl,omitempty"`
	Role        *string `thrift:"role,6" json:"role,omitempty"`
}

func NewTweetElementFields() *TweetElementFields {
	return &TweetElementFields{}
}

var TweetElementFields_Source_DEFAULT string

func (p *TweetElementFields) GetSource() string {
	if !p.IsSetSource() {
		return TweetElementFields_Source_DEFAULT
	}
	return *p.Source
}

var TweetElementFields_URL_DEFAULT string

func (p *TweetElementFields) GetURL() string {
	if !p.IsSetURL() {
		return TweetElementFields_URL_DEFAULT
	}
	return *p.URL
}

var TweetElementFields_ID_DEFAULT string

func (p *TweetElementFields) GetID() string {
	if !p.IsSetID() {
		return TweetElementFields_ID_DEFAULT
	}
	return *p.ID
}

var TweetElementFields_HTML_DEFAULT string

func (p *TweetElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return TweetElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var TweetElementFields_OriginalUrl_DEFAULT string

func (p *TweetElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return TweetElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var TweetElementFields_Role_DEFAULT string

func (p *TweetElementFields) GetRole() string {
	if !p.IsSetRole() {
		return TweetElementFields_Role_DEFAULT
	}
	return *p.Role
}
func (p *TweetElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *TweetElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *TweetElementFields) IsSetID() bool {
	return p.ID != nil
}

func (p *TweetElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *TweetElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *TweetElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *TweetElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TweetElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *TweetElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *TweetElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *TweetElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *TweetElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *TweetElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *TweetElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TweetElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TweetElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:source: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:html: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:role: ", p), err)
		}
	}
	return err
}

func (p *TweetElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TweetElementFields(%+v)", *p)
}

// Attributes:
//  - HTML
//  - Source
//  - Description
//  - Title
//  - Credit
//  - Caption
//  - DurationMinutes
//  - DurationSeconds
//  - Clean
//  - Explicit
type AudioElementFields struct {
	HTML            *string `thrift:"html,1" json:"html,omitempty"`
	Source          *string `thrift:"source,2" json:"source,omitempty"`
	Description     *string `thrift:"description,3" json:"description,omitempty"`
	Title           *string `thrift:"title,4" json:"title,omitempty"`
	Credit          *string `thrift:"credit,5" json:"credit,omitempty"`
	Caption         *string `thrift:"caption,6" json:"caption,omitempty"`
	DurationMinutes *int32  `thrift:"durationMinutes,7" json:"durationMinutes,omitempty"`
	DurationSeconds *int32  `thrift:"durationSeconds,8" json:"durationSeconds,omitempty"`
	Clean           *bool   `thrift:"clean,9" json:"clean,omitempty"`
	Explicit        *bool   `thrift:"explicit,10" json:"explicit,omitempty"`
}

func NewAudioElementFields() *AudioElementFields {
	return &AudioElementFields{}
}

var AudioElementFields_HTML_DEFAULT string

func (p *AudioElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return AudioElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var AudioElementFields_Source_DEFAULT string

func (p *AudioElementFields) GetSource() string {
	if !p.IsSetSource() {
		return AudioElementFields_Source_DEFAULT
	}
	return *p.Source
}

var AudioElementFields_Description_DEFAULT string

func (p *AudioElementFields) GetDescription() string {
	if !p.IsSetDescription() {
		return AudioElementFields_Description_DEFAULT
	}
	return *p.Description
}

var AudioElementFields_Title_DEFAULT string

func (p *AudioElementFields) GetTitle() string {
	if !p.IsSetTitle() {
		return AudioElementFields_Title_DEFAULT
	}
	return *p.Title
}

var AudioElementFields_Credit_DEFAULT string

func (p *AudioElementFields) GetCredit() string {
	if !p.IsSetCredit() {
		return AudioElementFields_Credit_DEFAULT
	}
	return *p.Credit
}

var AudioElementFields_Caption_DEFAULT string

func (p *AudioElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return AudioElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var AudioElementFields_DurationMinutes_DEFAULT int32

func (p *AudioElementFields) GetDurationMinutes() int32 {
	if !p.IsSetDurationMinutes() {
		return AudioElementFields_DurationMinutes_DEFAULT
	}
	return *p.DurationMinutes
}

var AudioElementFields_DurationSeconds_DEFAULT int32

func (p *AudioElementFields) GetDurationSeconds() int32 {
	if !p.IsSetDurationSeconds() {
		return AudioElementFields_DurationSeconds_DEFAULT
	}
	return *p.DurationSeconds
}

var AudioElementFields_Clean_DEFAULT bool

func (p *AudioElementFields) GetClean() bool {
	if !p.IsSetClean() {
		return AudioElementFields_Clean_DEFAULT
	}
	return *p.Clean
}

var AudioElementFields_Explicit_DEFAULT bool

func (p *AudioElementFields) GetExplicit() bool {
	if !p.IsSetExplicit() {
		return AudioElementFields_Explicit_DEFAULT
	}
	return *p.Explicit
}
func (p *AudioElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *AudioElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *AudioElementFields) IsSetDescription() bool {
	return p.Description != nil
}

func (p *AudioElementFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *AudioElementFields) IsSetCredit() bool {
	return p.Credit != nil
}

func (p *AudioElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *AudioElementFields) IsSetDurationMinutes() bool {
	return p.DurationMinutes != nil
}

func (p *AudioElementFields) IsSetDurationSeconds() bool {
	return p.DurationSeconds != nil
}

func (p *AudioElementFields) IsSetClean() bool {
	return p.Clean != nil
}

func (p *AudioElementFields) IsSetExplicit() bool {
	return p.Explicit != nil
}

func (p *AudioElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AudioElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *AudioElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *AudioElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *AudioElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *AudioElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Credit = &v
	}
	return nil
}

func (p *AudioElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *AudioElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DurationMinutes = &v
	}
	return nil
}

func (p *AudioElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DurationSeconds = &v
	}
	return nil
}

func (p *AudioElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Clean = &v
	}
	return nil
}

func (p *AudioElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Explicit = &v
	}
	return nil
}

func (p *AudioElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AudioElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AudioElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:html: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredit() {
		if err := oprot.WriteFieldBegin("credit", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credit: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Credit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credit (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credit: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:caption: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationMinutes() {
		if err := oprot.WriteFieldBegin("durationMinutes", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:durationMinutes: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DurationMinutes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durationMinutes (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:durationMinutes: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationSeconds() {
		if err := oprot.WriteFieldBegin("durationSeconds", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:durationSeconds: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DurationSeconds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durationSeconds (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:durationSeconds: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetClean() {
		if err := oprot.WriteFieldBegin("clean", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:clean: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Clean)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clean (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:clean: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplicit() {
		if err := oprot.WriteFieldBegin("explicit", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:explicit: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Explicit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.explicit (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:explicit: ", p), err)
		}
	}
	return err
}

func (p *AudioElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioElementFields(%+v)", *p)
}

// Attributes:
//  - URL
//  - Description
//  - Title
//  - HTML
//  - Source
//  - Credit
//  - Caption
//  - Height
//  - Width
//  - Duration
//  - ContentAuthSystem
//  - Embeddable
//  - IsInappropriateForAdverts
//  - MediaId
//  - StillImageUrl
//  - ThumbnailUrl
//  - ShortUrl
//  - Role
//  - OriginalUrl
type VideoElementFields struct {
	URL                       *string `thrift:"url,1" json:"url,omitempty"`
	Description               *string `thrift:"description,2" json:"description,omitempty"`
	Title                     *string `thrift:"title,3" json:"title,omitempty"`
	HTML                      *string `thrift:"html,4" json:"html,omitempty"`
	Source                    *string `thrift:"source,5" json:"source,omitempty"`
	Credit                    *string `thrift:"credit,6" json:"credit,omitempty"`
	Caption                   *string `thrift:"caption,7" json:"caption,omitempty"`
	Height                    *int32  `thrift:"height,8" json:"height,omitempty"`
	Width                     *int32  `thrift:"width,9" json:"width,omitempty"`
	Duration                  *int32  `thrift:"duration,10" json:"duration,omitempty"`
	ContentAuthSystem         *string `thrift:"contentAuthSystem,11" json:"contentAuthSystem,omitempty"`
	Embeddable                *string `thrift:"embeddable,12" json:"embeddable,omitempty"`
	IsInappropriateForAdverts *bool   `thrift:"isInappropriateForAdverts,13" json:"isInappropriateForAdverts,omitempty"`
	MediaId                   *string `thrift:"mediaId,14" json:"mediaId,omitempty"`
	StillImageUrl             *string `thrift:"stillImageUrl,15" json:"stillImageUrl,omitempty"`
	ThumbnailUrl              *string `thrift:"thumbnailUrl,16" json:"thumbnailUrl,omitempty"`
	ShortUrl                  *string `thrift:"shortUrl,17" json:"shortUrl,omitempty"`
	Role                      *string `thrift:"role,18" json:"role,omitempty"`
	OriginalUrl               *string `thrift:"originalUrl,19" json:"originalUrl,omitempty"`
}

func NewVideoElementFields() *VideoElementFields {
	return &VideoElementFields{}
}

var VideoElementFields_URL_DEFAULT string

func (p *VideoElementFields) GetURL() string {
	if !p.IsSetURL() {
		return VideoElementFields_URL_DEFAULT
	}
	return *p.URL
}

var VideoElementFields_Description_DEFAULT string

func (p *VideoElementFields) GetDescription() string {
	if !p.IsSetDescription() {
		return VideoElementFields_Description_DEFAULT
	}
	return *p.Description
}

var VideoElementFields_Title_DEFAULT string

func (p *VideoElementFields) GetTitle() string {
	if !p.IsSetTitle() {
		return VideoElementFields_Title_DEFAULT
	}
	return *p.Title
}

var VideoElementFields_HTML_DEFAULT string

func (p *VideoElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return VideoElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var VideoElementFields_Source_DEFAULT string

func (p *VideoElementFields) GetSource() string {
	if !p.IsSetSource() {
		return VideoElementFields_Source_DEFAULT
	}
	return *p.Source
}

var VideoElementFields_Credit_DEFAULT string

func (p *VideoElementFields) GetCredit() string {
	if !p.IsSetCredit() {
		return VideoElementFields_Credit_DEFAULT
	}
	return *p.Credit
}

var VideoElementFields_Caption_DEFAULT string

func (p *VideoElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return VideoElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var VideoElementFields_Height_DEFAULT int32

func (p *VideoElementFields) GetHeight() int32 {
	if !p.IsSetHeight() {
		return VideoElementFields_Height_DEFAULT
	}
	return *p.Height
}

var VideoElementFields_Width_DEFAULT int32

func (p *VideoElementFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return VideoElementFields_Width_DEFAULT
	}
	return *p.Width
}

var VideoElementFields_Duration_DEFAULT int32

func (p *VideoElementFields) GetDuration() int32 {
	if !p.IsSetDuration() {
		return VideoElementFields_Duration_DEFAULT
	}
	return *p.Duration
}

var VideoElementFields_ContentAuthSystem_DEFAULT string

func (p *VideoElementFields) GetContentAuthSystem() string {
	if !p.IsSetContentAuthSystem() {
		return VideoElementFields_ContentAuthSystem_DEFAULT
	}
	return *p.ContentAuthSystem
}

var VideoElementFields_Embeddable_DEFAULT string

func (p *VideoElementFields) GetEmbeddable() string {
	if !p.IsSetEmbeddable() {
		return VideoElementFields_Embeddable_DEFAULT
	}
	return *p.Embeddable
}

var VideoElementFields_IsInappropriateForAdverts_DEFAULT bool

func (p *VideoElementFields) GetIsInappropriateForAdverts() bool {
	if !p.IsSetIsInappropriateForAdverts() {
		return VideoElementFields_IsInappropriateForAdverts_DEFAULT
	}
	return *p.IsInappropriateForAdverts
}

var VideoElementFields_MediaId_DEFAULT string

func (p *VideoElementFields) GetMediaId() string {
	if !p.IsSetMediaId() {
		return VideoElementFields_MediaId_DEFAULT
	}
	return *p.MediaId
}

var VideoElementFields_StillImageUrl_DEFAULT string

func (p *VideoElementFields) GetStillImageUrl() string {
	if !p.IsSetStillImageUrl() {
		return VideoElementFields_StillImageUrl_DEFAULT
	}
	return *p.StillImageUrl
}

var VideoElementFields_ThumbnailUrl_DEFAULT string

func (p *VideoElementFields) GetThumbnailUrl() string {
	if !p.IsSetThumbnailUrl() {
		return VideoElementFields_ThumbnailUrl_DEFAULT
	}
	return *p.ThumbnailUrl
}

var VideoElementFields_ShortUrl_DEFAULT string

func (p *VideoElementFields) GetShortUrl() string {
	if !p.IsSetShortUrl() {
		return VideoElementFields_ShortUrl_DEFAULT
	}
	return *p.ShortUrl
}

var VideoElementFields_Role_DEFAULT string

func (p *VideoElementFields) GetRole() string {
	if !p.IsSetRole() {
		return VideoElementFields_Role_DEFAULT
	}
	return *p.Role
}

var VideoElementFields_OriginalUrl_DEFAULT string

func (p *VideoElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return VideoElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}
func (p *VideoElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *VideoElementFields) IsSetDescription() bool {
	return p.Description != nil
}

func (p *VideoElementFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *VideoElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *VideoElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *VideoElementFields) IsSetCredit() bool {
	return p.Credit != nil
}

func (p *VideoElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *VideoElementFields) IsSetHeight() bool {
	return p.Height != nil
}

func (p *VideoElementFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *VideoElementFields) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *VideoElementFields) IsSetContentAuthSystem() bool {
	return p.ContentAuthSystem != nil
}

func (p *VideoElementFields) IsSetEmbeddable() bool {
	return p.Embeddable != nil
}

func (p *VideoElementFields) IsSetIsInappropriateForAdverts() bool {
	return p.IsInappropriateForAdverts != nil
}

func (p *VideoElementFields) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *VideoElementFields) IsSetStillImageUrl() bool {
	return p.StillImageUrl != nil
}

func (p *VideoElementFields) IsSetThumbnailUrl() bool {
	return p.ThumbnailUrl != nil
}

func (p *VideoElementFields) IsSetShortUrl() bool {
	return p.ShortUrl != nil
}

func (p *VideoElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *VideoElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *VideoElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VideoElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *VideoElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *VideoElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *VideoElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *VideoElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *VideoElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Credit = &v
	}
	return nil
}

func (p *VideoElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *VideoElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *VideoElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *VideoElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *VideoElementFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ContentAuthSystem = &v
	}
	return nil
}

func (p *VideoElementFields) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Embeddable = &v
	}
	return nil
}

func (p *VideoElementFields) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.IsInappropriateForAdverts = &v
	}
	return nil
}

func (p *VideoElementFields) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *VideoElementFields) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.StillImageUrl = &v
	}
	return nil
}

func (p *VideoElementFields) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ThumbnailUrl = &v
	}
	return nil
}

func (p *VideoElementFields) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ShortUrl = &v
	}
	return nil
}

func (p *VideoElementFields) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *VideoElementFields) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *VideoElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VideoElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:html: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredit() {
		if err := oprot.WriteFieldBegin("credit", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:credit: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Credit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credit (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:credit: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:caption: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:height: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:height: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:width: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:duration: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentAuthSystem() {
		if err := oprot.WriteFieldBegin("contentAuthSystem", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contentAuthSystem: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContentAuthSystem)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentAuthSystem (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contentAuthSystem: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmbeddable() {
		if err := oprot.WriteFieldBegin("embeddable", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:embeddable: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Embeddable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.embeddable (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:embeddable: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInappropriateForAdverts() {
		if err := oprot.WriteFieldBegin("isInappropriateForAdverts", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isInappropriateForAdverts: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsInappropriateForAdverts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isInappropriateForAdverts (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isInappropriateForAdverts: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mediaId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mediaId: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetStillImageUrl() {
		if err := oprot.WriteFieldBegin("stillImageUrl", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:stillImageUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StillImageUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stillImageUrl (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:stillImageUrl: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbnailUrl() {
		if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:thumbnailUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThumbnailUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:thumbnailUrl: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrl() {
		if err := oprot.WriteFieldBegin("shortUrl", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:shortUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShortUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shortUrl (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:shortUrl: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:role: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *VideoElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoElementFields(%+v)", *p)
}

// Attributes:
//  - Caption
//  - Copyright
//  - DisplayCredit
//  - Credit
//  - Source
//  - Photographer
//  - Alt
//  - MediaId
//  - MediaApiUri
//  - PicdarUrn
//  - SuppliersReference
//  - ImageType
//  - Comment
//  - Role
type ImageElementFields struct {
	Caption            *string `thrift:"caption,1" json:"caption,omitempty"`
	Copyright          *string `thrift:"copyright,2" json:"copyright,omitempty"`
	DisplayCredit      *bool   `thrift:"displayCredit,3" json:"displayCredit,omitempty"`
	Credit             *string `thrift:"credit,4" json:"credit,omitempty"`
	Source             *string `thrift:"source,5" json:"source,omitempty"`
	Photographer       *string `thrift:"photographer,6" json:"photographer,omitempty"`
	Alt                *string `thrift:"alt,7" json:"alt,omitempty"`
	MediaId            *string `thrift:"mediaId,8" json:"mediaId,omitempty"`
	MediaApiUri        *string `thrift:"mediaApiUri,9" json:"mediaApiUri,omitempty"`
	PicdarUrn          *string `thrift:"picdarUrn,10" json:"picdarUrn,omitempty"`
	SuppliersReference *string `thrift:"suppliersReference,11" json:"suppliersReference,omitempty"`
	ImageType          *string `thrift:"imageType,12" json:"imageType,omitempty"`
	Comment            *string `thrift:"comment,13" json:"comment,omitempty"`
	Role               *string `thrift:"role,14" json:"role,omitempty"`
}

func NewImageElementFields() *ImageElementFields {
	return &ImageElementFields{}
}

var ImageElementFields_Caption_DEFAULT string

func (p *ImageElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return ImageElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var ImageElementFields_Copyright_DEFAULT string

func (p *ImageElementFields) GetCopyright() string {
	if !p.IsSetCopyright() {
		return ImageElementFields_Copyright_DEFAULT
	}
	return *p.Copyright
}

var ImageElementFields_DisplayCredit_DEFAULT bool

func (p *ImageElementFields) GetDisplayCredit() bool {
	if !p.IsSetDisplayCredit() {
		return ImageElementFields_DisplayCredit_DEFAULT
	}
	return *p.DisplayCredit
}

var ImageElementFields_Credit_DEFAULT string

func (p *ImageElementFields) GetCredit() string {
	if !p.IsSetCredit() {
		return ImageElementFields_Credit_DEFAULT
	}
	return *p.Credit
}

var ImageElementFields_Source_DEFAULT string

func (p *ImageElementFields) GetSource() string {
	if !p.IsSetSource() {
		return ImageElementFields_Source_DEFAULT
	}
	return *p.Source
}

var ImageElementFields_Photographer_DEFAULT string

func (p *ImageElementFields) GetPhotographer() string {
	if !p.IsSetPhotographer() {
		return ImageElementFields_Photographer_DEFAULT
	}
	return *p.Photographer
}

var ImageElementFields_Alt_DEFAULT string

func (p *ImageElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return ImageElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var ImageElementFields_MediaId_DEFAULT string

func (p *ImageElementFields) GetMediaId() string {
	if !p.IsSetMediaId() {
		return ImageElementFields_MediaId_DEFAULT
	}
	return *p.MediaId
}

var ImageElementFields_MediaApiUri_DEFAULT string

func (p *ImageElementFields) GetMediaApiUri() string {
	if !p.IsSetMediaApiUri() {
		return ImageElementFields_MediaApiUri_DEFAULT
	}
	return *p.MediaApiUri
}

var ImageElementFields_PicdarUrn_DEFAULT string

func (p *ImageElementFields) GetPicdarUrn() string {
	if !p.IsSetPicdarUrn() {
		return ImageElementFields_PicdarUrn_DEFAULT
	}
	return *p.PicdarUrn
}

var ImageElementFields_SuppliersReference_DEFAULT string

func (p *ImageElementFields) GetSuppliersReference() string {
	if !p.IsSetSuppliersReference() {
		return ImageElementFields_SuppliersReference_DEFAULT
	}
	return *p.SuppliersReference
}

var ImageElementFields_ImageType_DEFAULT string

func (p *ImageElementFields) GetImageType() string {
	if !p.IsSetImageType() {
		return ImageElementFields_ImageType_DEFAULT
	}
	return *p.ImageType
}

var ImageElementFields_Comment_DEFAULT string

func (p *ImageElementFields) GetComment() string {
	if !p.IsSetComment() {
		return ImageElementFields_Comment_DEFAULT
	}
	return *p.Comment
}

var ImageElementFields_Role_DEFAULT string

func (p *ImageElementFields) GetRole() string {
	if !p.IsSetRole() {
		return ImageElementFields_Role_DEFAULT
	}
	return *p.Role
}
func (p *ImageElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *ImageElementFields) IsSetCopyright() bool {
	return p.Copyright != nil
}

func (p *ImageElementFields) IsSetDisplayCredit() bool {
	return p.DisplayCredit != nil
}

func (p *ImageElementFields) IsSetCredit() bool {
	return p.Credit != nil
}

func (p *ImageElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *ImageElementFields) IsSetPhotographer() bool {
	return p.Photographer != nil
}

func (p *ImageElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *ImageElementFields) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *ImageElementFields) IsSetMediaApiUri() bool {
	return p.MediaApiUri != nil
}

func (p *ImageElementFields) IsSetPicdarUrn() bool {
	return p.PicdarUrn != nil
}

func (p *ImageElementFields) IsSetSuppliersReference() bool {
	return p.SuppliersReference != nil
}

func (p *ImageElementFields) IsSetImageType() bool {
	return p.ImageType != nil
}

func (p *ImageElementFields) IsSetComment() bool {
	return p.Comment != nil
}

func (p *ImageElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *ImageElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ImageElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *ImageElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Copyright = &v
	}
	return nil
}

func (p *ImageElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DisplayCredit = &v
	}
	return nil
}

func (p *ImageElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Credit = &v
	}
	return nil
}

func (p *ImageElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *ImageElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Photographer = &v
	}
	return nil
}

func (p *ImageElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *ImageElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *ImageElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MediaApiUri = &v
	}
	return nil
}

func (p *ImageElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PicdarUrn = &v
	}
	return nil
}

func (p *ImageElementFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SuppliersReference = &v
	}
	return nil
}

func (p *ImageElementFields) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ImageType = &v
	}
	return nil
}

func (p *ImageElementFields) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Comment = &v
	}
	return nil
}

func (p *ImageElementFields) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *ImageElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ImageElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ImageElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:caption: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCopyright() {
		if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:copyright: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Copyright)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.copyright (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:copyright: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayCredit() {
		if err := oprot.WriteFieldBegin("displayCredit", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:displayCredit: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.DisplayCredit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayCredit (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:displayCredit: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredit() {
		if err := oprot.WriteFieldBegin("credit", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:credit: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Credit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credit (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:credit: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotographer() {
		if err := oprot.WriteFieldBegin("photographer", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:photographer: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Photographer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.photographer (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:photographer: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:alt: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mediaId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mediaId: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaApiUri() {
		if err := oprot.WriteFieldBegin("mediaApiUri", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:mediaApiUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaApiUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaApiUri (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:mediaApiUri: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPicdarUrn() {
		if err := oprot.WriteFieldBegin("picdarUrn", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:picdarUrn: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PicdarUrn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.picdarUrn (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:picdarUrn: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuppliersReference() {
		if err := oprot.WriteFieldBegin("suppliersReference", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:suppliersReference: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SuppliersReference)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.suppliersReference (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:suppliersReference: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageType() {
		if err := oprot.WriteFieldBegin("imageType", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:imageType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ImageType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageType (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:imageType: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetComment() {
		if err := oprot.WriteFieldBegin("comment", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:comment: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Comment)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comment (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:comment: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:role: ", p), err)
		}
	}
	return err
}

func (p *ImageElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageElementFields(%+v)", *p)
}

// Attributes:
//  - URL
//  - OriginalUrl
//  - Source
//  - Caption
//  - Alt
//  - ScriptUrl
//  - HTML
//  - ScriptName
//  - IframeUrl
//  - Role
//  - IsMandatory
type InteractiveElementFields struct {
	URL         *string `thrift:"url,1" json:"url,omitempty"`
	OriginalUrl *string `thrift:"originalUrl,2" json:"originalUrl,omitempty"`
	Source      *string `thrift:"source,3" json:"source,omitempty"`
	Caption     *string `thrift:"caption,4" json:"caption,omitempty"`
	Alt         *string `thrift:"alt,5" json:"alt,omitempty"`
	ScriptUrl   *string `thrift:"scriptUrl,6" json:"scriptUrl,omitempty"`
	HTML        *string `thrift:"html,7" json:"html,omitempty"`
	ScriptName  *string `thrift:"scriptName,8" json:"scriptName,omitempty"`
	IframeUrl   *string `thrift:"iframeUrl,9" json:"iframeUrl,omitempty"`
	Role        *string `thrift:"role,10" json:"role,omitempty"`
	IsMandatory *bool   `thrift:"isMandatory,11" json:"isMandatory,omitempty"`
}

func NewInteractiveElementFields() *InteractiveElementFields {
	return &InteractiveElementFields{}
}

var InteractiveElementFields_URL_DEFAULT string

func (p *InteractiveElementFields) GetURL() string {
	if !p.IsSetURL() {
		return InteractiveElementFields_URL_DEFAULT
	}
	return *p.URL
}

var InteractiveElementFields_OriginalUrl_DEFAULT string

func (p *InteractiveElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return InteractiveElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var InteractiveElementFields_Source_DEFAULT string

func (p *InteractiveElementFields) GetSource() string {
	if !p.IsSetSource() {
		return InteractiveElementFields_Source_DEFAULT
	}
	return *p.Source
}

var InteractiveElementFields_Caption_DEFAULT string

func (p *InteractiveElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return InteractiveElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var InteractiveElementFields_Alt_DEFAULT string

func (p *InteractiveElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return InteractiveElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var InteractiveElementFields_ScriptUrl_DEFAULT string

func (p *InteractiveElementFields) GetScriptUrl() string {
	if !p.IsSetScriptUrl() {
		return InteractiveElementFields_ScriptUrl_DEFAULT
	}
	return *p.ScriptUrl
}

var InteractiveElementFields_HTML_DEFAULT string

func (p *InteractiveElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return InteractiveElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var InteractiveElementFields_ScriptName_DEFAULT string

func (p *InteractiveElementFields) GetScriptName() string {
	if !p.IsSetScriptName() {
		return InteractiveElementFields_ScriptName_DEFAULT
	}
	return *p.ScriptName
}

var InteractiveElementFields_IframeUrl_DEFAULT string

func (p *InteractiveElementFields) GetIframeUrl() string {
	if !p.IsSetIframeUrl() {
		return InteractiveElementFields_IframeUrl_DEFAULT
	}
	return *p.IframeUrl
}

var InteractiveElementFields_Role_DEFAULT string

func (p *InteractiveElementFields) GetRole() string {
	if !p.IsSetRole() {
		return InteractiveElementFields_Role_DEFAULT
	}
	return *p.Role
}

var InteractiveElementFields_IsMandatory_DEFAULT bool

func (p *InteractiveElementFields) GetIsMandatory() bool {
	if !p.IsSetIsMandatory() {
		return InteractiveElementFields_IsMandatory_DEFAULT
	}
	return *p.IsMandatory
}
func (p *InteractiveElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *InteractiveElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *InteractiveElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *InteractiveElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *InteractiveElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *InteractiveElementFields) IsSetScriptUrl() bool {
	return p.ScriptUrl != nil
}

func (p *InteractiveElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *InteractiveElementFields) IsSetScriptName() bool {
	return p.ScriptName != nil
}

func (p *InteractiveElementFields) IsSetIframeUrl() bool {
	return p.IframeUrl != nil
}

func (p *InteractiveElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *InteractiveElementFields) IsSetIsMandatory() bool {
	return p.IsMandatory != nil
}

func (p *InteractiveElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InteractiveElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ScriptUrl = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ScriptName = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.IframeUrl = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *InteractiveElementFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IsMandatory = &v
	}
	return nil
}

func (p *InteractiveElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InteractiveElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InteractiveElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caption: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:alt: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScriptUrl() {
		if err := oprot.WriteFieldBegin("scriptUrl", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:scriptUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScriptUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scriptUrl (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:scriptUrl: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:html: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetScriptName() {
		if err := oprot.WriteFieldBegin("scriptName", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:scriptName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScriptName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scriptName (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:scriptName: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIframeUrl() {
		if err := oprot.WriteFieldBegin("iframeUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:iframeUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.IframeUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.iframeUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:iframeUrl: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:role: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMandatory() {
		if err := oprot.WriteFieldBegin("isMandatory", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isMandatory: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMandatory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMandatory (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isMandatory: ", p), err)
		}
	}
	return err
}

func (p *InteractiveElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveElementFields(%+v)", *p)
}

// Attributes:
//  - URL
//  - OriginalUrl
//  - Source
//  - Title
//  - Description
//  - Credit
//  - Caption
//  - Width
//  - Height
//  - HTML
//  - Role
//  - IsMandatory
type StandardElementFields struct {
	URL         *string `thrift:"url,1" json:"url,omitempty"`
	OriginalUrl *string `thrift:"originalUrl,2" json:"originalUrl,omitempty"`
	Source      *string `thrift:"source,3" json:"source,omitempty"`
	Title       *string `thrift:"title,4" json:"title,omitempty"`
	Description *string `thrift:"description,5" json:"description,omitempty"`
	Credit      *string `thrift:"credit,6" json:"credit,omitempty"`
	Caption     *string `thrift:"caption,7" json:"caption,omitempty"`
	Width       *int32  `thrift:"width,8" json:"width,omitempty"`
	Height      *int32  `thrift:"height,9" json:"height,omitempty"`
	HTML        *string `thrift:"html,10" json:"html,omitempty"`
	Role        *string `thrift:"role,11" json:"role,omitempty"`
	IsMandatory *bool   `thrift:"isMandatory,12" json:"isMandatory,omitempty"`
}

func NewStandardElementFields() *StandardElementFields {
	return &StandardElementFields{}
}

var StandardElementFields_URL_DEFAULT string

func (p *StandardElementFields) GetURL() string {
	if !p.IsSetURL() {
		return StandardElementFields_URL_DEFAULT
	}
	return *p.URL
}

var StandardElementFields_OriginalUrl_DEFAULT string

func (p *StandardElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return StandardElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var StandardElementFields_Source_DEFAULT string

func (p *StandardElementFields) GetSource() string {
	if !p.IsSetSource() {
		return StandardElementFields_Source_DEFAULT
	}
	return *p.Source
}

var StandardElementFields_Title_DEFAULT string

func (p *StandardElementFields) GetTitle() string {
	if !p.IsSetTitle() {
		return StandardElementFields_Title_DEFAULT
	}
	return *p.Title
}

var StandardElementFields_Description_DEFAULT string

func (p *StandardElementFields) GetDescription() string {
	if !p.IsSetDescription() {
		return StandardElementFields_Description_DEFAULT
	}
	return *p.Description
}

var StandardElementFields_Credit_DEFAULT string

func (p *StandardElementFields) GetCredit() string {
	if !p.IsSetCredit() {
		return StandardElementFields_Credit_DEFAULT
	}
	return *p.Credit
}

var StandardElementFields_Caption_DEFAULT string

func (p *StandardElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return StandardElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var StandardElementFields_Width_DEFAULT int32

func (p *StandardElementFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return StandardElementFields_Width_DEFAULT
	}
	return *p.Width
}

var StandardElementFields_Height_DEFAULT int32

func (p *StandardElementFields) GetHeight() int32 {
	if !p.IsSetHeight() {
		return StandardElementFields_Height_DEFAULT
	}
	return *p.Height
}

var StandardElementFields_HTML_DEFAULT string

func (p *StandardElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return StandardElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var StandardElementFields_Role_DEFAULT string

func (p *StandardElementFields) GetRole() string {
	if !p.IsSetRole() {
		return StandardElementFields_Role_DEFAULT
	}
	return *p.Role
}

var StandardElementFields_IsMandatory_DEFAULT bool

func (p *StandardElementFields) GetIsMandatory() bool {
	if !p.IsSetIsMandatory() {
		return StandardElementFields_IsMandatory_DEFAULT
	}
	return *p.IsMandatory
}
func (p *StandardElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *StandardElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *StandardElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *StandardElementFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *StandardElementFields) IsSetDescription() bool {
	return p.Description != nil
}

func (p *StandardElementFields) IsSetCredit() bool {
	return p.Credit != nil
}

func (p *StandardElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *StandardElementFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *StandardElementFields) IsSetHeight() bool {
	return p.Height != nil
}

func (p *StandardElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *StandardElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *StandardElementFields) IsSetIsMandatory() bool {
	return p.IsMandatory != nil
}

func (p *StandardElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StandardElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *StandardElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *StandardElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *StandardElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *StandardElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *StandardElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Credit = &v
	}
	return nil
}

func (p *StandardElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *StandardElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *StandardElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *StandardElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *StandardElementFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *StandardElementFields) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.IsMandatory = &v
	}
	return nil
}

func (p *StandardElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StandardElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StandardElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:description: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCredit() {
		if err := oprot.WriteFieldBegin("credit", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:credit: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Credit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.credit (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:credit: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:caption: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:width: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:height: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:height: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:html: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:role: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMandatory() {
		if err := oprot.WriteFieldBegin("isMandatory", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isMandatory: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMandatory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMandatory (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isMandatory: ", p), err)
		}
	}
	return err
}

func (p *StandardElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StandardElementFields(%+v)", *p)
}

// Attributes:
//  - URL
//  - OriginalUrl
//  - WitnessEmbedType
//  - MediaId
//  - Source
//  - Title
//  - Description
//  - AuthorName
//  - AuthorUsername
//  - AuthorWitnessProfileUrl
//  - AuthorGuardianProfileUrl
//  - Caption
//  - Alt
//  - Width
//  - Height
//  - HTML
//  - ApiUrl
//  - Photographer
//  - DateCreated
//  - YoutubeUrl
//  - YoutubeSource
//  - YoutubeTitle
//  - YoutubeDescription
//  - YoutubeAuthorName
//  - YoutubeHtml
//  - Role
type WitnessElementFields struct {
	URL                      *string       `thrift:"url,1" json:"url,omitempty"`
	OriginalUrl              *string       `thrift:"originalUrl,2" json:"originalUrl,omitempty"`
	WitnessEmbedType         *string       `thrift:"witnessEmbedType,3" json:"witnessEmbedType,omitempty"`
	MediaId                  *string       `thrift:"mediaId,4" json:"mediaId,omitempty"`
	Source                   *string       `thrift:"source,5" json:"source,omitempty"`
	Title                    *string       `thrift:"title,6" json:"title,omitempty"`
	Description              *string       `thrift:"description,7" json:"description,omitempty"`
	AuthorName               *string       `thrift:"authorName,8" json:"authorName,omitempty"`
	AuthorUsername           *string       `thrift:"authorUsername,9" json:"authorUsername,omitempty"`
	AuthorWitnessProfileUrl  *string       `thrift:"authorWitnessProfileUrl,10" json:"authorWitnessProfileUrl,omitempty"`
	AuthorGuardianProfileUrl *string       `thrift:"authorGuardianProfileUrl,11" json:"authorGuardianProfileUrl,omitempty"`
	Caption                  *string       `thrift:"caption,12" json:"caption,omitempty"`
	Alt                      *string       `thrift:"alt,13" json:"alt,omitempty"`
	Width                    *int32        `thrift:"width,14" json:"width,omitempty"`
	Height                   *int32        `thrift:"height,15" json:"height,omitempty"`
	HTML                     *string       `thrift:"html,16" json:"html,omitempty"`
	ApiUrl                   *string       `thrift:"apiUrl,17" json:"apiUrl,omitempty"`
	Photographer             *string       `thrift:"photographer,18" json:"photographer,omitempty"`
	DateCreated              *CapiDateTime `thrift:"dateCreated,19" json:"dateCreated,omitempty"`
	YoutubeUrl               *string       `thrift:"youtubeUrl,20" json:"youtubeUrl,omitempty"`
	YoutubeSource            *string       `thrift:"youtubeSource,21" json:"youtubeSource,omitempty"`
	YoutubeTitle             *string       `thrift:"youtubeTitle,22" json:"youtubeTitle,omitempty"`
	YoutubeDescription       *string       `thrift:"youtubeDescription,23" json:"youtubeDescription,omitempty"`
	YoutubeAuthorName        *string       `thrift:"youtubeAuthorName,24" json:"youtubeAuthorName,omitempty"`
	YoutubeHtml              *string       `thrift:"youtubeHtml,25" json:"youtubeHtml,omitempty"`
	Role                     *string       `thrift:"role,26" json:"role,omitempty"`
}

func NewWitnessElementFields() *WitnessElementFields {
	return &WitnessElementFields{}
}

var WitnessElementFields_URL_DEFAULT string

func (p *WitnessElementFields) GetURL() string {
	if !p.IsSetURL() {
		return WitnessElementFields_URL_DEFAULT
	}
	return *p.URL
}

var WitnessElementFields_OriginalUrl_DEFAULT string

func (p *WitnessElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return WitnessElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var WitnessElementFields_WitnessEmbedType_DEFAULT string

func (p *WitnessElementFields) GetWitnessEmbedType() string {
	if !p.IsSetWitnessEmbedType() {
		return WitnessElementFields_WitnessEmbedType_DEFAULT
	}
	return *p.WitnessEmbedType
}

var WitnessElementFields_MediaId_DEFAULT string

func (p *WitnessElementFields) GetMediaId() string {
	if !p.IsSetMediaId() {
		return WitnessElementFields_MediaId_DEFAULT
	}
	return *p.MediaId
}

var WitnessElementFields_Source_DEFAULT string

func (p *WitnessElementFields) GetSource() string {
	if !p.IsSetSource() {
		return WitnessElementFields_Source_DEFAULT
	}
	return *p.Source
}

var WitnessElementFields_Title_DEFAULT string

func (p *WitnessElementFields) GetTitle() string {
	if !p.IsSetTitle() {
		return WitnessElementFields_Title_DEFAULT
	}
	return *p.Title
}

var WitnessElementFields_Description_DEFAULT string

func (p *WitnessElementFields) GetDescription() string {
	if !p.IsSetDescription() {
		return WitnessElementFields_Description_DEFAULT
	}
	return *p.Description
}

var WitnessElementFields_AuthorName_DEFAULT string

func (p *WitnessElementFields) GetAuthorName() string {
	if !p.IsSetAuthorName() {
		return WitnessElementFields_AuthorName_DEFAULT
	}
	return *p.AuthorName
}

var WitnessElementFields_AuthorUsername_DEFAULT string

func (p *WitnessElementFields) GetAuthorUsername() string {
	if !p.IsSetAuthorUsername() {
		return WitnessElementFields_AuthorUsername_DEFAULT
	}
	return *p.AuthorUsername
}

var WitnessElementFields_AuthorWitnessProfileUrl_DEFAULT string

func (p *WitnessElementFields) GetAuthorWitnessProfileUrl() string {
	if !p.IsSetAuthorWitnessProfileUrl() {
		return WitnessElementFields_AuthorWitnessProfileUrl_DEFAULT
	}
	return *p.AuthorWitnessProfileUrl
}

var WitnessElementFields_AuthorGuardianProfileUrl_DEFAULT string

func (p *WitnessElementFields) GetAuthorGuardianProfileUrl() string {
	if !p.IsSetAuthorGuardianProfileUrl() {
		return WitnessElementFields_AuthorGuardianProfileUrl_DEFAULT
	}
	return *p.AuthorGuardianProfileUrl
}

var WitnessElementFields_Caption_DEFAULT string

func (p *WitnessElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return WitnessElementFields_Caption_DEFAULT
	}
	return *p.Caption
}

var WitnessElementFields_Alt_DEFAULT string

func (p *WitnessElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return WitnessElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var WitnessElementFields_Width_DEFAULT int32

func (p *WitnessElementFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return WitnessElementFields_Width_DEFAULT
	}
	return *p.Width
}

var WitnessElementFields_Height_DEFAULT int32

func (p *WitnessElementFields) GetHeight() int32 {
	if !p.IsSetHeight() {
		return WitnessElementFields_Height_DEFAULT
	}
	return *p.Height
}

var WitnessElementFields_HTML_DEFAULT string

func (p *WitnessElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return WitnessElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var WitnessElementFields_ApiUrl_DEFAULT string

func (p *WitnessElementFields) GetApiUrl() string {
	if !p.IsSetApiUrl() {
		return WitnessElementFields_ApiUrl_DEFAULT
	}
	return *p.ApiUrl
}

var WitnessElementFields_Photographer_DEFAULT string

func (p *WitnessElementFields) GetPhotographer() string {
	if !p.IsSetPhotographer() {
		return WitnessElementFields_Photographer_DEFAULT
	}
	return *p.Photographer
}

var WitnessElementFields_DateCreated_DEFAULT *CapiDateTime

func (p *WitnessElementFields) GetDateCreated() *CapiDateTime {
	if !p.IsSetDateCreated() {
		return WitnessElementFields_DateCreated_DEFAULT
	}
	return p.DateCreated
}

var WitnessElementFields_YoutubeUrl_DEFAULT string

func (p *WitnessElementFields) GetYoutubeUrl() string {
	if !p.IsSetYoutubeUrl() {
		return WitnessElementFields_YoutubeUrl_DEFAULT
	}
	return *p.YoutubeUrl
}

var WitnessElementFields_YoutubeSource_DEFAULT string

func (p *WitnessElementFields) GetYoutubeSource() string {
	if !p.IsSetYoutubeSource() {
		return WitnessElementFields_YoutubeSource_DEFAULT
	}
	return *p.YoutubeSource
}

var WitnessElementFields_YoutubeTitle_DEFAULT string

func (p *WitnessElementFields) GetYoutubeTitle() string {
	if !p.IsSetYoutubeTitle() {
		return WitnessElementFields_YoutubeTitle_DEFAULT
	}
	return *p.YoutubeTitle
}

var WitnessElementFields_YoutubeDescription_DEFAULT string

func (p *WitnessElementFields) GetYoutubeDescription() string {
	if !p.IsSetYoutubeDescription() {
		return WitnessElementFields_YoutubeDescription_DEFAULT
	}
	return *p.YoutubeDescription
}

var WitnessElementFields_YoutubeAuthorName_DEFAULT string

func (p *WitnessElementFields) GetYoutubeAuthorName() string {
	if !p.IsSetYoutubeAuthorName() {
		return WitnessElementFields_YoutubeAuthorName_DEFAULT
	}
	return *p.YoutubeAuthorName
}

var WitnessElementFields_YoutubeHtml_DEFAULT string

func (p *WitnessElementFields) GetYoutubeHtml() string {
	if !p.IsSetYoutubeHtml() {
		return WitnessElementFields_YoutubeHtml_DEFAULT
	}
	return *p.YoutubeHtml
}

var WitnessElementFields_Role_DEFAULT string

func (p *WitnessElementFields) GetRole() string {
	if !p.IsSetRole() {
		return WitnessElementFields_Role_DEFAULT
	}
	return *p.Role
}
func (p *WitnessElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *WitnessElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *WitnessElementFields) IsSetWitnessEmbedType() bool {
	return p.WitnessEmbedType != nil
}

func (p *WitnessElementFields) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *WitnessElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *WitnessElementFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *WitnessElementFields) IsSetDescription() bool {
	return p.Description != nil
}

func (p *WitnessElementFields) IsSetAuthorName() bool {
	return p.AuthorName != nil
}

func (p *WitnessElementFields) IsSetAuthorUsername() bool {
	return p.AuthorUsername != nil
}

func (p *WitnessElementFields) IsSetAuthorWitnessProfileUrl() bool {
	return p.AuthorWitnessProfileUrl != nil
}

func (p *WitnessElementFields) IsSetAuthorGuardianProfileUrl() bool {
	return p.AuthorGuardianProfileUrl != nil
}

func (p *WitnessElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *WitnessElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *WitnessElementFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *WitnessElementFields) IsSetHeight() bool {
	return p.Height != nil
}

func (p *WitnessElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *WitnessElementFields) IsSetApiUrl() bool {
	return p.ApiUrl != nil
}

func (p *WitnessElementFields) IsSetPhotographer() bool {
	return p.Photographer != nil
}

func (p *WitnessElementFields) IsSetDateCreated() bool {
	return p.DateCreated != nil
}

func (p *WitnessElementFields) IsSetYoutubeUrl() bool {
	return p.YoutubeUrl != nil
}

func (p *WitnessElementFields) IsSetYoutubeSource() bool {
	return p.YoutubeSource != nil
}

func (p *WitnessElementFields) IsSetYoutubeTitle() bool {
	return p.YoutubeTitle != nil
}

func (p *WitnessElementFields) IsSetYoutubeDescription() bool {
	return p.YoutubeDescription != nil
}

func (p *WitnessElementFields) IsSetYoutubeAuthorName() bool {
	return p.YoutubeAuthorName != nil
}

func (p *WitnessElementFields) IsSetYoutubeHtml() bool {
	return p.YoutubeHtml != nil
}

func (p *WitnessElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *WitnessElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WitnessElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *WitnessElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *WitnessElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WitnessEmbedType = &v
	}
	return nil
}

func (p *WitnessElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *WitnessElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *WitnessElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *WitnessElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *WitnessElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AuthorName = &v
	}
	return nil
}

func (p *WitnessElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AuthorUsername = &v
	}
	return nil
}

func (p *WitnessElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.AuthorWitnessProfileUrl = &v
	}
	return nil
}

func (p *WitnessElementFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.AuthorGuardianProfileUrl = &v
	}
	return nil
}

func (p *WitnessElementFields) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *WitnessElementFields) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *WitnessElementFields) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *WitnessElementFields) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *WitnessElementFields) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *WitnessElementFields) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ApiUrl = &v
	}
	return nil
}

func (p *WitnessElementFields) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Photographer = &v
	}
	return nil
}

func (p *WitnessElementFields) readField19(iprot thrift.TProtocol) error {
	p.DateCreated = &CapiDateTime{}
	if err := p.DateCreated.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateCreated), err)
	}
	return nil
}

func (p *WitnessElementFields) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.YoutubeUrl = &v
	}
	return nil
}

func (p *WitnessElementFields) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.YoutubeSource = &v
	}
	return nil
}

func (p *WitnessElementFields) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.YoutubeTitle = &v
	}
	return nil
}

func (p *WitnessElementFields) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.YoutubeDescription = &v
	}
	return nil
}

func (p *WitnessElementFields) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.YoutubeAuthorName = &v
	}
	return nil
}

func (p *WitnessElementFields) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.YoutubeHtml = &v
	}
	return nil
}

func (p *WitnessElementFields) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *WitnessElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WitnessElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WitnessElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWitnessEmbedType() {
		if err := oprot.WriteFieldBegin("witnessEmbedType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:witnessEmbedType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WitnessEmbedType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.witnessEmbedType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:witnessEmbedType: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mediaId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mediaId: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:title: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:description: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorName() {
		if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:authorName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorName (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:authorName: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorUsername() {
		if err := oprot.WriteFieldBegin("authorUsername", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:authorUsername: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorUsername)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorUsername (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:authorUsername: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorWitnessProfileUrl() {
		if err := oprot.WriteFieldBegin("authorWitnessProfileUrl", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:authorWitnessProfileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorWitnessProfileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorWitnessProfileUrl (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:authorWitnessProfileUrl: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorGuardianProfileUrl() {
		if err := oprot.WriteFieldBegin("authorGuardianProfileUrl", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:authorGuardianProfileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorGuardianProfileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorGuardianProfileUrl (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:authorGuardianProfileUrl: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:caption: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:alt: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:width: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:height: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:height: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:html: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiUrl() {
		if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:apiUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ApiUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.apiUrl (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:apiUrl: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotographer() {
		if err := oprot.WriteFieldBegin("photographer", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:photographer: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Photographer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.photographer (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:photographer: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateCreated() {
		if err := oprot.WriteFieldBegin("dateCreated", thrift.STRUCT, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:dateCreated: ", p), err)
		}
		if err := p.DateCreated.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateCreated), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:dateCreated: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeUrl() {
		if err := oprot.WriteFieldBegin("youtubeUrl", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:youtubeUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeUrl (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:youtubeUrl: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeSource() {
		if err := oprot.WriteFieldBegin("youtubeSource", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:youtubeSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeSource (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:youtubeSource: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeTitle() {
		if err := oprot.WriteFieldBegin("youtubeTitle", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:youtubeTitle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeTitle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeTitle (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:youtubeTitle: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeDescription() {
		if err := oprot.WriteFieldBegin("youtubeDescription", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:youtubeDescription: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeDescription)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeDescription (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:youtubeDescription: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeAuthorName() {
		if err := oprot.WriteFieldBegin("youtubeAuthorName", thrift.STRING, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:youtubeAuthorName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeAuthorName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeAuthorName (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:youtubeAuthorName: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetYoutubeHtml() {
		if err := oprot.WriteFieldBegin("youtubeHtml", thrift.STRING, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:youtubeHtml: ", p), err)
		}
		if err := oprot.WriteString(string(*p.YoutubeHtml)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.youtubeHtml (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:youtubeHtml: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:role: ", p), err)
		}
	}
	return err
}

func (p *WitnessElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WitnessElementFields(%+v)", *p)
}

// Attributes:
//  - URL
//  - OriginalUrl
//  - LinkText
//  - LinkPrefix
//  - Role
type RichLinkElementFields struct {
	URL         *string `thrift:"url,1" json:"url,omitempty"`
	OriginalUrl *string `thrift:"originalUrl,2" json:"originalUrl,omitempty"`
	LinkText    *string `thrift:"linkText,3" json:"linkText,omitempty"`
	LinkPrefix  *string `thrift:"linkPrefix,4" json:"linkPrefix,omitempty"`
	Role        *string `thrift:"role,5" json:"role,omitempty"`
}

func NewRichLinkElementFields() *RichLinkElementFields {
	return &RichLinkElementFields{}
}

var RichLinkElementFields_URL_DEFAULT string

func (p *RichLinkElementFields) GetURL() string {
	if !p.IsSetURL() {
		return RichLinkElementFields_URL_DEFAULT
	}
	return *p.URL
}

var RichLinkElementFields_OriginalUrl_DEFAULT string

func (p *RichLinkElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return RichLinkElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var RichLinkElementFields_LinkText_DEFAULT string

func (p *RichLinkElementFields) GetLinkText() string {
	if !p.IsSetLinkText() {
		return RichLinkElementFields_LinkText_DEFAULT
	}
	return *p.LinkText
}

var RichLinkElementFields_LinkPrefix_DEFAULT string

func (p *RichLinkElementFields) GetLinkPrefix() string {
	if !p.IsSetLinkPrefix() {
		return RichLinkElementFields_LinkPrefix_DEFAULT
	}
	return *p.LinkPrefix
}

var RichLinkElementFields_Role_DEFAULT string

func (p *RichLinkElementFields) GetRole() string {
	if !p.IsSetRole() {
		return RichLinkElementFields_Role_DEFAULT
	}
	return *p.Role
}
func (p *RichLinkElementFields) IsSetURL() bool {
	return p.URL != nil
}

func (p *RichLinkElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *RichLinkElementFields) IsSetLinkText() bool {
	return p.LinkText != nil
}

func (p *RichLinkElementFields) IsSetLinkPrefix() bool {
	return p.LinkPrefix != nil
}

func (p *RichLinkElementFields) IsSetRole() bool {
	return p.Role != nil
}

func (p *RichLinkElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RichLinkElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = &v
	}
	return nil
}

func (p *RichLinkElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *RichLinkElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LinkText = &v
	}
	return nil
}

func (p *RichLinkElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LinkPrefix = &v
	}
	return nil
}

func (p *RichLinkElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Role = &v
	}
	return nil
}

func (p *RichLinkElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RichLinkElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RichLinkElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
		}
	}
	return err
}

func (p *RichLinkElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *RichLinkElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkText() {
		if err := oprot.WriteFieldBegin("linkText", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:linkText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkText (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:linkText: ", p), err)
		}
	}
	return err
}

func (p *RichLinkElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkPrefix() {
		if err := oprot.WriteFieldBegin("linkPrefix", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:linkPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkPrefix (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:linkPrefix: ", p), err)
		}
	}
	return err
}

func (p *RichLinkElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:role: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:role: ", p), err)
		}
	}
	return err
}

func (p *RichLinkElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RichLinkElementFields(%+v)", *p)
}

// Attributes:
//  - OriginalUrl
//  - LinkText
//  - LinkPrefix
//  - Title
//  - Venue
//  - Location
//  - Identifier
//  - Image
//  - Price
//  - Start
type MembershipElementFields struct {
	OriginalUrl *string       `thrift:"originalUrl,1" json:"originalUrl,omitempty"`
	LinkText    *string       `thrift:"linkText,2" json:"linkText,omitempty"`
	LinkPrefix  *string       `thrift:"linkPrefix,3" json:"linkPrefix,omitempty"`
	Title       *string       `thrift:"title,4" json:"title,omitempty"`
	Venue       *string       `thrift:"venue,5" json:"venue,omitempty"`
	Location    *string       `thrift:"location,6" json:"location,omitempty"`
	Identifier  *string       `thrift:"identifier,7" json:"identifier,omitempty"`
	Image       *string       `thrift:"image,8" json:"image,omitempty"`
	Price       *string       `thrift:"price,9" json:"price,omitempty"`
	Start       *CapiDateTime `thrift:"start,10" json:"start,omitempty"`
}

func NewMembershipElementFields() *MembershipElementFields {
	return &MembershipElementFields{}
}

var MembershipElementFields_OriginalUrl_DEFAULT string

func (p *MembershipElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return MembershipElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var MembershipElementFields_LinkText_DEFAULT string

func (p *MembershipElementFields) GetLinkText() string {
	if !p.IsSetLinkText() {
		return MembershipElementFields_LinkText_DEFAULT
	}
	return *p.LinkText
}

var MembershipElementFields_LinkPrefix_DEFAULT string

func (p *MembershipElementFields) GetLinkPrefix() string {
	if !p.IsSetLinkPrefix() {
		return MembershipElementFields_LinkPrefix_DEFAULT
	}
	return *p.LinkPrefix
}

var MembershipElementFields_Title_DEFAULT string

func (p *MembershipElementFields) GetTitle() string {
	if !p.IsSetTitle() {
		return MembershipElementFields_Title_DEFAULT
	}
	return *p.Title
}

var MembershipElementFields_Venue_DEFAULT string

func (p *MembershipElementFields) GetVenue() string {
	if !p.IsSetVenue() {
		return MembershipElementFields_Venue_DEFAULT
	}
	return *p.Venue
}

var MembershipElementFields_Location_DEFAULT string

func (p *MembershipElementFields) GetLocation() string {
	if !p.IsSetLocation() {
		return MembershipElementFields_Location_DEFAULT
	}
	return *p.Location
}

var MembershipElementFields_Identifier_DEFAULT string

func (p *MembershipElementFields) GetIdentifier() string {
	if !p.IsSetIdentifier() {
		return MembershipElementFields_Identifier_DEFAULT
	}
	return *p.Identifier
}

var MembershipElementFields_Image_DEFAULT string

func (p *MembershipElementFields) GetImage() string {
	if !p.IsSetImage() {
		return MembershipElementFields_Image_DEFAULT
	}
	return *p.Image
}

var MembershipElementFields_Price_DEFAULT string

func (p *MembershipElementFields) GetPrice() string {
	if !p.IsSetPrice() {
		return MembershipElementFields_Price_DEFAULT
	}
	return *p.Price
}

var MembershipElementFields_Start_DEFAULT *CapiDateTime

func (p *MembershipElementFields) GetStart() *CapiDateTime {
	if !p.IsSetStart() {
		return MembershipElementFields_Start_DEFAULT
	}
	return p.Start
}
func (p *MembershipElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *MembershipElementFields) IsSetLinkText() bool {
	return p.LinkText != nil
}

func (p *MembershipElementFields) IsSetLinkPrefix() bool {
	return p.LinkPrefix != nil
}

func (p *MembershipElementFields) IsSetTitle() bool {
	return p.Title != nil
}

func (p *MembershipElementFields) IsSetVenue() bool {
	return p.Venue != nil
}

func (p *MembershipElementFields) IsSetLocation() bool {
	return p.Location != nil
}

func (p *MembershipElementFields) IsSetIdentifier() bool {
	return p.Identifier != nil
}

func (p *MembershipElementFields) IsSetImage() bool {
	return p.Image != nil
}

func (p *MembershipElementFields) IsSetPrice() bool {
	return p.Price != nil
}

func (p *MembershipElementFields) IsSetStart() bool {
	return p.Start != nil
}

func (p *MembershipElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MembershipElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *MembershipElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LinkText = &v
	}
	return nil
}

func (p *MembershipElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LinkPrefix = &v
	}
	return nil
}

func (p *MembershipElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *MembershipElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Venue = &v
	}
	return nil
}

func (p *MembershipElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Location = &v
	}
	return nil
}

func (p *MembershipElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Identifier = &v
	}
	return nil
}

func (p *MembershipElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Image = &v
	}
	return nil
}

func (p *MembershipElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Price = &v
	}
	return nil
}

func (p *MembershipElementFields) readField10(iprot thrift.TProtocol) error {
	p.Start = &CapiDateTime{}
	if err := p.Start.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Start), err)
	}
	return nil
}

func (p *MembershipElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MembershipElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MembershipElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkText() {
		if err := oprot.WriteFieldBegin("linkText", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkText (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkText: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkPrefix() {
		if err := oprot.WriteFieldBegin("linkPrefix", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:linkPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkPrefix (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:linkPrefix: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVenue() {
		if err := oprot.WriteFieldBegin("venue", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:venue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Venue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.venue (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:venue: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:location: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Location)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.location (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:location: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentifier() {
		if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:identifier: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Identifier)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.identifier (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:identifier: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetImage() {
		if err := oprot.WriteFieldBegin("image", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:image: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Image)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.image (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:image: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrice() {
		if err := oprot.WriteFieldBegin("price", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:price: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Price)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.price (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:price: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err := oprot.WriteFieldBegin("start", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:start: ", p), err)
		}
		if err := p.Start.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Start), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:start: ", p), err)
		}
	}
	return err
}

func (p *MembershipElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MembershipElementFields(%+v)", *p)
}

// Attributes:
//  - HTML
//  - SafeEmbedCode
//  - Alt
//  - IsMandatory
type EmbedElementFields struct {
	HTML          *string `thrift:"html,1" json:"html,omitempty"`
	SafeEmbedCode *bool   `thrift:"safeEmbedCode,2" json:"safeEmbedCode,omitempty"`
	Alt           *string `thrift:"alt,3" json:"alt,omitempty"`
	IsMandatory   *bool   `thrift:"isMandatory,4" json:"isMandatory,omitempty"`
}

func NewEmbedElementFields() *EmbedElementFields {
	return &EmbedElementFields{}
}

var EmbedElementFields_HTML_DEFAULT string

func (p *EmbedElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return EmbedElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var EmbedElementFields_SafeEmbedCode_DEFAULT bool

func (p *EmbedElementFields) GetSafeEmbedCode() bool {
	if !p.IsSetSafeEmbedCode() {
		return EmbedElementFields_SafeEmbedCode_DEFAULT
	}
	return *p.SafeEmbedCode
}

var EmbedElementFields_Alt_DEFAULT string

func (p *EmbedElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return EmbedElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var EmbedElementFields_IsMandatory_DEFAULT bool

func (p *EmbedElementFields) GetIsMandatory() bool {
	if !p.IsSetIsMandatory() {
		return EmbedElementFields_IsMandatory_DEFAULT
	}
	return *p.IsMandatory
}
func (p *EmbedElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *EmbedElementFields) IsSetSafeEmbedCode() bool {
	return p.SafeEmbedCode != nil
}

func (p *EmbedElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *EmbedElementFields) IsSetIsMandatory() bool {
	return p.IsMandatory != nil
}

func (p *EmbedElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmbedElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *EmbedElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SafeEmbedCode = &v
	}
	return nil
}

func (p *EmbedElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *EmbedElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsMandatory = &v
	}
	return nil
}

func (p *EmbedElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmbedElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmbedElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:html: ", p), err)
		}
	}
	return err
}

func (p *EmbedElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSafeEmbedCode() {
		if err := oprot.WriteFieldBegin("safeEmbedCode", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:safeEmbedCode: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SafeEmbedCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.safeEmbedCode (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:safeEmbedCode: ", p), err)
		}
	}
	return err
}

func (p *EmbedElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:alt: ", p), err)
		}
	}
	return err
}

func (p *EmbedElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsMandatory() {
		if err := oprot.WriteFieldBegin("isMandatory", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isMandatory: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsMandatory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isMandatory (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isMandatory: ", p), err)
		}
	}
	return err
}

func (p *EmbedElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmbedElementFields(%+v)", *p)
}

// Attributes:
//  - OriginalUrl
//  - Title
//  - Source
//  - AuthorUrl
//  - AuthorUsername
//  - HTML
//  - Width
//  - Alt
//  - Caption
type InstagramElementFields struct {
	OriginalUrl    string  `thrift:"originalUrl,1,required" json:"originalUrl"`
	Title          string  `thrift:"title,2,required" json:"title"`
	Source         string  `thrift:"source,3,required" json:"source"`
	AuthorUrl      string  `thrift:"authorUrl,4,required" json:"authorUrl"`
	AuthorUsername string  `thrift:"authorUsername,5,required" json:"authorUsername"`
	HTML           *string `thrift:"html,6" json:"html,omitempty"`
	Width          *int32  `thrift:"width,7" json:"width,omitempty"`
	Alt            *string `thrift:"alt,8" json:"alt,omitempty"`
	Caption        *string `thrift:"caption,9" json:"caption,omitempty"`
}

func NewInstagramElementFields() *InstagramElementFields {
	return &InstagramElementFields{}
}

func (p *InstagramElementFields) GetOriginalUrl() string {
	return p.OriginalUrl
}

func (p *InstagramElementFields) GetTitle() string {
	return p.Title
}

func (p *InstagramElementFields) GetSource() string {
	return p.Source
}

func (p *InstagramElementFields) GetAuthorUrl() string {
	return p.AuthorUrl
}

func (p *InstagramElementFields) GetAuthorUsername() string {
	return p.AuthorUsername
}

var InstagramElementFields_HTML_DEFAULT string

func (p *InstagramElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return InstagramElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var InstagramElementFields_Width_DEFAULT int32

func (p *InstagramElementFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return InstagramElementFields_Width_DEFAULT
	}
	return *p.Width
}

var InstagramElementFields_Alt_DEFAULT string

func (p *InstagramElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return InstagramElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var InstagramElementFields_Caption_DEFAULT string

func (p *InstagramElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return InstagramElementFields_Caption_DEFAULT
	}
	return *p.Caption
}
func (p *InstagramElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *InstagramElementFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *InstagramElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *InstagramElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *InstagramElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOriginalUrl bool = false
	var issetTitle bool = false
	var issetSource bool = false
	var issetAuthorUrl bool = false
	var issetAuthorUsername bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetOriginalUrl = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSource = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetAuthorUrl = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAuthorUsername = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOriginalUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OriginalUrl is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetSource {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"))
	}
	if !issetAuthorUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorUrl is not set"))
	}
	if !issetAuthorUsername {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorUsername is not set"))
	}
	return nil
}

func (p *InstagramElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OriginalUrl = v
	}
	return nil
}

func (p *InstagramElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *InstagramElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *InstagramElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AuthorUrl = v
	}
	return nil
}

func (p *InstagramElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AuthorUsername = v
	}
	return nil
}

func (p *InstagramElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *InstagramElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *InstagramElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *InstagramElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *InstagramElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InstagramElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstagramElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:originalUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.OriginalUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.originalUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:originalUrl: ", p), err)
	}
	return err
}

func (p *InstagramElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *InstagramElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err)
	}
	if err := oprot.WriteString(string(p.Source)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err)
	}
	return err
}

func (p *InstagramElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthorUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorUrl: ", p), err)
	}
	return err
}

func (p *InstagramElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorUsername", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorUsername: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthorUsername)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorUsername (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorUsername: ", p), err)
	}
	return err
}

func (p *InstagramElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:html: ", p), err)
		}
	}
	return err
}

func (p *InstagramElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:width: ", p), err)
		}
	}
	return err
}

func (p *InstagramElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:alt: ", p), err)
		}
	}
	return err
}

func (p *InstagramElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:caption: ", p), err)
		}
	}
	return err
}

func (p *InstagramElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstagramElementFields(%+v)", *p)
}

// Attributes:
//  - Source
//  - DiscussionKey
//  - CommentUrl
//  - OriginalUrl
//  - SourceUrl
//  - DiscussionUrl
//  - AuthorUrl
//  - HTML
//  - AuthorName
//  - CommentId
type CommentElementFields struct {
	Source        *string `thrift:"source,1" json:"source,omitempty"`
	DiscussionKey *string `thrift:"discussionKey,2" json:"discussionKey,omitempty"`
	CommentUrl    *string `thrift:"commentUrl,3" json:"commentUrl,omitempty"`
	OriginalUrl   *string `thrift:"originalUrl,4" json:"originalUrl,omitempty"`
	SourceUrl     *string `thrift:"sourceUrl,5" json:"sourceUrl,omitempty"`
	DiscussionUrl *string `thrift:"discussionUrl,6" json:"discussionUrl,omitempty"`
	AuthorUrl     *string `thrift:"authorUrl,7" json:"authorUrl,omitempty"`
	HTML          *string `thrift:"html,8" json:"html,omitempty"`
	AuthorName    *string `thrift:"authorName,9" json:"authorName,omitempty"`
	CommentId     *int32  `thrift:"commentId,10" json:"commentId,omitempty"`
}

func NewCommentElementFields() *CommentElementFields {
	return &CommentElementFields{}
}

var CommentElementFields_Source_DEFAULT string

func (p *CommentElementFields) GetSource() string {
	if !p.IsSetSource() {
		return CommentElementFields_Source_DEFAULT
	}
	return *p.Source
}

var CommentElementFields_DiscussionKey_DEFAULT string

func (p *CommentElementFields) GetDiscussionKey() string {
	if !p.IsSetDiscussionKey() {
		return CommentElementFields_DiscussionKey_DEFAULT
	}
	return *p.DiscussionKey
}

var CommentElementFields_CommentUrl_DEFAULT string

func (p *CommentElementFields) GetCommentUrl() string {
	if !p.IsSetCommentUrl() {
		return CommentElementFields_CommentUrl_DEFAULT
	}
	return *p.CommentUrl
}

var CommentElementFields_OriginalUrl_DEFAULT string

func (p *CommentElementFields) GetOriginalUrl() string {
	if !p.IsSetOriginalUrl() {
		return CommentElementFields_OriginalUrl_DEFAULT
	}
	return *p.OriginalUrl
}

var CommentElementFields_SourceUrl_DEFAULT string

func (p *CommentElementFields) GetSourceUrl() string {
	if !p.IsSetSourceUrl() {
		return CommentElementFields_SourceUrl_DEFAULT
	}
	return *p.SourceUrl
}

var CommentElementFields_DiscussionUrl_DEFAULT string

func (p *CommentElementFields) GetDiscussionUrl() string {
	if !p.IsSetDiscussionUrl() {
		return CommentElementFields_DiscussionUrl_DEFAULT
	}
	return *p.DiscussionUrl
}

var CommentElementFields_AuthorUrl_DEFAULT string

func (p *CommentElementFields) GetAuthorUrl() string {
	if !p.IsSetAuthorUrl() {
		return CommentElementFields_AuthorUrl_DEFAULT
	}
	return *p.AuthorUrl
}

var CommentElementFields_HTML_DEFAULT string

func (p *CommentElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return CommentElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var CommentElementFields_AuthorName_DEFAULT string

func (p *CommentElementFields) GetAuthorName() string {
	if !p.IsSetAuthorName() {
		return CommentElementFields_AuthorName_DEFAULT
	}
	return *p.AuthorName
}

var CommentElementFields_CommentId_DEFAULT int32

func (p *CommentElementFields) GetCommentId() int32 {
	if !p.IsSetCommentId() {
		return CommentElementFields_CommentId_DEFAULT
	}
	return *p.CommentId
}
func (p *CommentElementFields) IsSetSource() bool {
	return p.Source != nil
}

func (p *CommentElementFields) IsSetDiscussionKey() bool {
	return p.DiscussionKey != nil
}

func (p *CommentElementFields) IsSetCommentUrl() bool {
	return p.CommentUrl != nil
}

func (p *CommentElementFields) IsSetOriginalUrl() bool {
	return p.OriginalUrl != nil
}

func (p *CommentElementFields) IsSetSourceUrl() bool {
	return p.SourceUrl != nil
}

func (p *CommentElementFields) IsSetDiscussionUrl() bool {
	return p.DiscussionUrl != nil
}

func (p *CommentElementFields) IsSetAuthorUrl() bool {
	return p.AuthorUrl != nil
}

func (p *CommentElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *CommentElementFields) IsSetAuthorName() bool {
	return p.AuthorName != nil
}

func (p *CommentElementFields) IsSetCommentId() bool {
	return p.CommentId != nil
}

func (p *CommentElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CommentElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *CommentElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DiscussionKey = &v
	}
	return nil
}

func (p *CommentElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CommentUrl = &v
	}
	return nil
}

func (p *CommentElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OriginalUrl = &v
	}
	return nil
}

func (p *CommentElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SourceUrl = &v
	}
	return nil
}

func (p *CommentElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DiscussionUrl = &v
	}
	return nil
}

func (p *CommentElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AuthorUrl = &v
	}
	return nil
}

func (p *CommentElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *CommentElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AuthorName = &v
	}
	return nil
}

func (p *CommentElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CommentId = &v
	}
	return nil
}

func (p *CommentElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommentElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CommentElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:source: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDiscussionKey() {
		if err := oprot.WriteFieldBegin("discussionKey", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:discussionKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DiscussionKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.discussionKey (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:discussionKey: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentUrl() {
		if err := oprot.WriteFieldBegin("commentUrl", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:commentUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CommentUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.commentUrl (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:commentUrl: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalUrl() {
		if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:originalUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriginalUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalUrl (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:originalUrl: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceUrl() {
		if err := oprot.WriteFieldBegin("sourceUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sourceUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sourceUrl: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDiscussionUrl() {
		if err := oprot.WriteFieldBegin("discussionUrl", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:discussionUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DiscussionUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.discussionUrl (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:discussionUrl: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorUrl() {
		if err := oprot.WriteFieldBegin("authorUrl", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:authorUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorUrl (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:authorUrl: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:html: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorName() {
		if err := oprot.WriteFieldBegin("authorName", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:authorName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AuthorName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.authorName (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:authorName: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentId() {
		if err := oprot.WriteFieldBegin("commentId", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:commentId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.CommentId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.commentId (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:commentId: ", p), err)
		}
	}
	return err
}

func (p *CommentElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentElementFields(%+v)", *p)
}

// Attributes:
//  - OriginalUrl
//  - Title
//  - Source
//  - AuthorUrl
//  - AuthorUsername
//  - HTML
//  - Width
//  - Height
//  - Alt
//  - Caption
type VineElementFields struct {
	OriginalUrl    string  `thrift:"originalUrl,1,required" json:"originalUrl"`
	Title          string  `thrift:"title,2,required" json:"title"`
	Source         string  `thrift:"source,3,required" json:"source"`
	AuthorUrl      string  `thrift:"authorUrl,4,required" json:"authorUrl"`
	AuthorUsername string  `thrift:"authorUsername,5,required" json:"authorUsername"`
	HTML           *string `thrift:"html,6" json:"html,omitempty"`
	Width          *int32  `thrift:"width,7" json:"width,omitempty"`
	Height         *int32  `thrift:"height,8" json:"height,omitempty"`
	Alt            *string `thrift:"alt,9" json:"alt,omitempty"`
	Caption        *string `thrift:"caption,10" json:"caption,omitempty"`
}

func NewVineElementFields() *VineElementFields {
	return &VineElementFields{}
}

func (p *VineElementFields) GetOriginalUrl() string {
	return p.OriginalUrl
}

func (p *VineElementFields) GetTitle() string {
	return p.Title
}

func (p *VineElementFields) GetSource() string {
	return p.Source
}

func (p *VineElementFields) GetAuthorUrl() string {
	return p.AuthorUrl
}

func (p *VineElementFields) GetAuthorUsername() string {
	return p.AuthorUsername
}

var VineElementFields_HTML_DEFAULT string

func (p *VineElementFields) GetHTML() string {
	if !p.IsSetHTML() {
		return VineElementFields_HTML_DEFAULT
	}
	return *p.HTML
}

var VineElementFields_Width_DEFAULT int32

func (p *VineElementFields) GetWidth() int32 {
	if !p.IsSetWidth() {
		return VineElementFields_Width_DEFAULT
	}
	return *p.Width
}

var VineElementFields_Height_DEFAULT int32

func (p *VineElementFields) GetHeight() int32 {
	if !p.IsSetHeight() {
		return VineElementFields_Height_DEFAULT
	}
	return *p.Height
}

var VineElementFields_Alt_DEFAULT string

func (p *VineElementFields) GetAlt() string {
	if !p.IsSetAlt() {
		return VineElementFields_Alt_DEFAULT
	}
	return *p.Alt
}

var VineElementFields_Caption_DEFAULT string

func (p *VineElementFields) GetCaption() string {
	if !p.IsSetCaption() {
		return VineElementFields_Caption_DEFAULT
	}
	return *p.Caption
}
func (p *VineElementFields) IsSetHTML() bool {
	return p.HTML != nil
}

func (p *VineElementFields) IsSetWidth() bool {
	return p.Width != nil
}

func (p *VineElementFields) IsSetHeight() bool {
	return p.Height != nil
}

func (p *VineElementFields) IsSetAlt() bool {
	return p.Alt != nil
}

func (p *VineElementFields) IsSetCaption() bool {
	return p.Caption != nil
}

func (p *VineElementFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOriginalUrl bool = false
	var issetTitle bool = false
	var issetSource bool = false
	var issetAuthorUrl bool = false
	var issetAuthorUsername bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetOriginalUrl = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSource = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetAuthorUrl = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAuthorUsername = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOriginalUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OriginalUrl is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetSource {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"))
	}
	if !issetAuthorUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorUrl is not set"))
	}
	if !issetAuthorUsername {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthorUsername is not set"))
	}
	return nil
}

func (p *VineElementFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OriginalUrl = v
	}
	return nil
}

func (p *VineElementFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *VineElementFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *VineElementFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AuthorUrl = v
	}
	return nil
}

func (p *VineElementFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AuthorUsername = v
	}
	return nil
}

func (p *VineElementFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.HTML = &v
	}
	return nil
}

func (p *VineElementFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *VineElementFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *VineElementFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Alt = &v
	}
	return nil
}

func (p *VineElementFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Caption = &v
	}
	return nil
}

func (p *VineElementFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VineElementFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VineElementFields) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("originalUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:originalUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.OriginalUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.originalUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:originalUrl: ", p), err)
	}
	return err
}

func (p *VineElementFields) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *VineElementFields) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err)
	}
	if err := oprot.WriteString(string(p.Source)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err)
	}
	return err
}

func (p *VineElementFields) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthorUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorUrl: ", p), err)
	}
	return err
}

func (p *VineElementFields) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorUsername", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:authorUsername: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthorUsername)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authorUsername (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:authorUsername: ", p), err)
	}
	return err
}

func (p *VineElementFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHTML() {
		if err := oprot.WriteFieldBegin("html", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:html: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HTML)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.html (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:html: ", p), err)
		}
	}
	return err
}

func (p *VineElementFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:width: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:width: ", p), err)
		}
	}
	return err
}

func (p *VineElementFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:height: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:height: ", p), err)
		}
	}
	return err
}

func (p *VineElementFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlt() {
		if err := oprot.WriteFieldBegin("alt", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:alt: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Alt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.alt (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:alt: ", p), err)
		}
	}
	return err
}

func (p *VineElementFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaption() {
		if err := oprot.WriteFieldBegin("caption", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:caption: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Caption)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caption (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:caption: ", p), err)
		}
	}
	return err
}

func (p *VineElementFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VineElementFields(%+v)", *p)
}

// Attributes:
//  - Type
//  - Assets
//  - TextTypeData
//  - VideoTypeData
//  - TweetTypeData
//  - ImageTypeData
//  - AudioTypeData
//  - PullquoteTypeData
//  - InteractiveTypeData
//  - MapTypeData
//  - DocumentTypeData
//  - TableTypeData
//  - WitnessTypeData
//  - RichLinkTypeData
//  - MembershipTypeData
//  - EmbedTypeData
//  - InstagramTypeData
//  - CommentTypeData
//  - VineTypeData
type BlockElement struct {
	Type                ElementType               `thrift:"type,1,required" json:"type"`
	Assets              []*Asset                  `thrift:"assets,2,required" json:"assets"`
	TextTypeData        *TextElementFields        `thrift:"textTypeData,3" json:"textTypeData,omitempty"`
	VideoTypeData       *VideoElementFields       `thrift:"videoTypeData,4" json:"videoTypeData,omitempty"`
	TweetTypeData       *TweetElementFields       `thrift:"tweetTypeData,5" json:"tweetTypeData,omitempty"`
	ImageTypeData       *ImageElementFields       `thrift:"imageTypeData,6" json:"imageTypeData,omitempty"`
	AudioTypeData       *AudioElementFields       `thrift:"audioTypeData,7" json:"audioTypeData,omitempty"`
	PullquoteTypeData   *PullquoteElementFields   `thrift:"pullquoteTypeData,8" json:"pullquoteTypeData,omitempty"`
	InteractiveTypeData *InteractiveElementFields `thrift:"interactiveTypeData,9" json:"interactiveTypeData,omitempty"`
	MapTypeData         *StandardElementFields    `thrift:"mapTypeData,10" json:"mapTypeData,omitempty"`
	DocumentTypeData    *StandardElementFields    `thrift:"documentTypeData,11" json:"documentTypeData,omitempty"`
	TableTypeData       *StandardElementFields    `thrift:"tableTypeData,12" json:"tableTypeData,omitempty"`
	WitnessTypeData     *WitnessElementFields     `thrift:"witnessTypeData,13" json:"witnessTypeData,omitempty"`
	RichLinkTypeData    *RichLinkElementFields    `thrift:"richLinkTypeData,14" json:"richLinkTypeData,omitempty"`
	MembershipTypeData  *MembershipElementFields  `thrift:"membershipTypeData,15" json:"membershipTypeData,omitempty"`
	EmbedTypeData       *EmbedElementFields       `thrift:"embedTypeData,16" json:"embedTypeData,omitempty"`
	InstagramTypeData   *InstagramElementFields   `thrift:"instagramTypeData,17" json:"instagramTypeData,omitempty"`
	CommentTypeData     *CommentElementFields     `thrift:"commentTypeData,18" json:"commentTypeData,omitempty"`
	VineTypeData        *VineElementFields        `thrift:"vineTypeData,19" json:"vineTypeData,omitempty"`
}

func NewBlockElement() *BlockElement {
	return &BlockElement{}
}

func (p *BlockElement) GetType() ElementType {
	return p.Type
}

func (p *BlockElement) GetAssets() []*Asset {
	return p.Assets
}

var BlockElement_TextTypeData_DEFAULT *TextElementFields

func (p *BlockElement) GetTextTypeData() *TextElementFields {
	if !p.IsSetTextTypeData() {
		return BlockElement_TextTypeData_DEFAULT
	}
	return p.TextTypeData
}

var BlockElement_VideoTypeData_DEFAULT *VideoElementFields

func (p *BlockElement) GetVideoTypeData() *VideoElementFields {
	if !p.IsSetVideoTypeData() {
		return BlockElement_VideoTypeData_DEFAULT
	}
	return p.VideoTypeData
}

var BlockElement_TweetTypeData_DEFAULT *TweetElementFields

func (p *BlockElement) GetTweetTypeData() *TweetElementFields {
	if !p.IsSetTweetTypeData() {
		return BlockElement_TweetTypeData_DEFAULT
	}
	return p.TweetTypeData
}

var BlockElement_ImageTypeData_DEFAULT *ImageElementFields

func (p *BlockElement) GetImageTypeData() *ImageElementFields {
	if !p.IsSetImageTypeData() {
		return BlockElement_ImageTypeData_DEFAULT
	}
	return p.ImageTypeData
}

var BlockElement_AudioTypeData_DEFAULT *AudioElementFields

func (p *BlockElement) GetAudioTypeData() *AudioElementFields {
	if !p.IsSetAudioTypeData() {
		return BlockElement_AudioTypeData_DEFAULT
	}
	return p.AudioTypeData
}

var BlockElement_PullquoteTypeData_DEFAULT *PullquoteElementFields

func (p *BlockElement) GetPullquoteTypeData() *PullquoteElementFields {
	if !p.IsSetPullquoteTypeData() {
		return BlockElement_PullquoteTypeData_DEFAULT
	}
	return p.PullquoteTypeData
}

var BlockElement_InteractiveTypeData_DEFAULT *InteractiveElementFields

func (p *BlockElement) GetInteractiveTypeData() *InteractiveElementFields {
	if !p.IsSetInteractiveTypeData() {
		return BlockElement_InteractiveTypeData_DEFAULT
	}
	return p.InteractiveTypeData
}

var BlockElement_MapTypeData_DEFAULT *StandardElementFields

func (p *BlockElement) GetMapTypeData() *StandardElementFields {
	if !p.IsSetMapTypeData() {
		return BlockElement_MapTypeData_DEFAULT
	}
	return p.MapTypeData
}

var BlockElement_DocumentTypeData_DEFAULT *StandardElementFields

func (p *BlockElement) GetDocumentTypeData() *StandardElementFields {
	if !p.IsSetDocumentTypeData() {
		return BlockElement_DocumentTypeData_DEFAULT
	}
	return p.DocumentTypeData
}

var BlockElement_TableTypeData_DEFAULT *StandardElementFields

func (p *BlockElement) GetTableTypeData() *StandardElementFields {
	if !p.IsSetTableTypeData() {
		return BlockElement_TableTypeData_DEFAULT
	}
	return p.TableTypeData
}

var BlockElement_WitnessTypeData_DEFAULT *WitnessElementFields

func (p *BlockElement) GetWitnessTypeData() *WitnessElementFields {
	if !p.IsSetWitnessTypeData() {
		return BlockElement_WitnessTypeData_DEFAULT
	}
	return p.WitnessTypeData
}

var BlockElement_RichLinkTypeData_DEFAULT *RichLinkElementFields

func (p *BlockElement) GetRichLinkTypeData() *RichLinkElementFields {
	if !p.IsSetRichLinkTypeData() {
		return BlockElement_RichLinkTypeData_DEFAULT
	}
	return p.RichLinkTypeData
}

var BlockElement_MembershipTypeData_DEFAULT *MembershipElementFields

func (p *BlockElement) GetMembershipTypeData() *MembershipElementFields {
	if !p.IsSetMembershipTypeData() {
		return BlockElement_MembershipTypeData_DEFAULT
	}
	return p.MembershipTypeData
}

var BlockElement_EmbedTypeData_DEFAULT *EmbedElementFields

func (p *BlockElement) GetEmbedTypeData() *EmbedElementFields {
	if !p.IsSetEmbedTypeData() {
		return BlockElement_EmbedTypeData_DEFAULT
	}
	return p.EmbedTypeData
}

var BlockElement_InstagramTypeData_DEFAULT *InstagramElementFields

func (p *BlockElement) GetInstagramTypeData() *InstagramElementFields {
	if !p.IsSetInstagramTypeData() {
		return BlockElement_InstagramTypeData_DEFAULT
	}
	return p.InstagramTypeData
}

var BlockElement_CommentTypeData_DEFAULT *CommentElementFields

func (p *BlockElement) GetCommentTypeData() *CommentElementFields {
	if !p.IsSetCommentTypeData() {
		return BlockElement_CommentTypeData_DEFAULT
	}
	return p.CommentTypeData
}

var BlockElement_VineTypeData_DEFAULT *VineElementFields

func (p *BlockElement) GetVineTypeData() *VineElementFields {
	if !p.IsSetVineTypeData() {
		return BlockElement_VineTypeData_DEFAULT
	}
	return p.VineTypeData
}
func (p *BlockElement) IsSetTextTypeData() bool {
	return p.TextTypeData != nil
}

func (p *BlockElement) IsSetVideoTypeData() bool {
	return p.VideoTypeData != nil
}

func (p *BlockElement) IsSetTweetTypeData() bool {
	return p.TweetTypeData != nil
}

func (p *BlockElement) IsSetImageTypeData() bool {
	return p.ImageTypeData != nil
}

func (p *BlockElement) IsSetAudioTypeData() bool {
	return p.AudioTypeData != nil
}

func (p *BlockElement) IsSetPullquoteTypeData() bool {
	return p.PullquoteTypeData != nil
}

func (p *BlockElement) IsSetInteractiveTypeData() bool {
	return p.InteractiveTypeData != nil
}

func (p *BlockElement) IsSetMapTypeData() bool {
	return p.MapTypeData != nil
}

func (p *BlockElement) IsSetDocumentTypeData() bool {
	return p.DocumentTypeData != nil
}

func (p *BlockElement) IsSetTableTypeData() bool {
	return p.TableTypeData != nil
}

func (p *BlockElement) IsSetWitnessTypeData() bool {
	return p.WitnessTypeData != nil
}

func (p *BlockElement) IsSetRichLinkTypeData() bool {
	return p.RichLinkTypeData != nil
}

func (p *BlockElement) IsSetMembershipTypeData() bool {
	return p.MembershipTypeData != nil
}

func (p *BlockElement) IsSetEmbedTypeData() bool {
	return p.EmbedTypeData != nil
}

func (p *BlockElement) IsSetInstagramTypeData() bool {
	return p.InstagramTypeData != nil
}

func (p *BlockElement) IsSetCommentTypeData() bool {
	return p.CommentTypeData != nil
}

func (p *BlockElement) IsSetVineTypeData() bool {
	return p.VineTypeData != nil
}

func (p *BlockElement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetAssets bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAssets = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetAssets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assets is not set"))
	}
	return nil
}

func (p *BlockElement) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ElementType(v)
		p.Type = temp
	}
	return nil
}

func (p *BlockElement) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Asset{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Assets = append(p.Assets, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockElement) readField3(iprot thrift.TProtocol) error {
	p.TextTypeData = &TextElementFields{}
	if err := p.TextTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TextTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField4(iprot thrift.TProtocol) error {
	p.VideoTypeData = &VideoElementFields{}
	if err := p.VideoTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VideoTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField5(iprot thrift.TProtocol) error {
	p.TweetTypeData = &TweetElementFields{}
	if err := p.TweetTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TweetTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField6(iprot thrift.TProtocol) error {
	p.ImageTypeData = &ImageElementFields{}
	if err := p.ImageTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField7(iprot thrift.TProtocol) error {
	p.AudioTypeData = &AudioElementFields{}
	if err := p.AudioTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AudioTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField8(iprot thrift.TProtocol) error {
	p.PullquoteTypeData = &PullquoteElementFields{}
	if err := p.PullquoteTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PullquoteTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField9(iprot thrift.TProtocol) error {
	p.InteractiveTypeData = &InteractiveElementFields{}
	if err := p.InteractiveTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InteractiveTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField10(iprot thrift.TProtocol) error {
	p.MapTypeData = &StandardElementFields{}
	if err := p.MapTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MapTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField11(iprot thrift.TProtocol) error {
	p.DocumentTypeData = &StandardElementFields{}
	if err := p.DocumentTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DocumentTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField12(iprot thrift.TProtocol) error {
	p.TableTypeData = &StandardElementFields{}
	if err := p.TableTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TableTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField13(iprot thrift.TProtocol) error {
	p.WitnessTypeData = &WitnessElementFields{}
	if err := p.WitnessTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WitnessTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField14(iprot thrift.TProtocol) error {
	p.RichLinkTypeData = &RichLinkElementFields{}
	if err := p.RichLinkTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RichLinkTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField15(iprot thrift.TProtocol) error {
	p.MembershipTypeData = &MembershipElementFields{}
	if err := p.MembershipTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MembershipTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField16(iprot thrift.TProtocol) error {
	p.EmbedTypeData = &EmbedElementFields{}
	if err := p.EmbedTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EmbedTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField17(iprot thrift.TProtocol) error {
	p.InstagramTypeData = &InstagramElementFields{}
	if err := p.InstagramTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InstagramTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField18(iprot thrift.TProtocol) error {
	p.CommentTypeData = &CommentElementFields{}
	if err := p.CommentTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommentTypeData), err)
	}
	return nil
}

func (p *BlockElement) readField19(iprot thrift.TProtocol) error {
	p.VineTypeData = &VineElementFields{}
	if err := p.VineTypeData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VineTypeData), err)
	}
	return nil
}

func (p *BlockElement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BlockElement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockElement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *BlockElement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:assets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Assets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:assets: ", p), err)
	}
	return err
}

func (p *BlockElement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextTypeData() {
		if err := oprot.WriteFieldBegin("textTypeData", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:textTypeData: ", p), err)
		}
		if err := p.TextTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TextTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:textTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoTypeData() {
		if err := oprot.WriteFieldBegin("videoTypeData", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:videoTypeData: ", p), err)
		}
		if err := p.VideoTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VideoTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:videoTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTweetTypeData() {
		if err := oprot.WriteFieldBegin("tweetTypeData", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tweetTypeData: ", p), err)
		}
		if err := p.TweetTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TweetTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tweetTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageTypeData() {
		if err := oprot.WriteFieldBegin("imageTypeData", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:imageTypeData: ", p), err)
		}
		if err := p.ImageTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:imageTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioTypeData() {
		if err := oprot.WriteFieldBegin("audioTypeData", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:audioTypeData: ", p), err)
		}
		if err := p.AudioTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AudioTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:audioTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPullquoteTypeData() {
		if err := oprot.WriteFieldBegin("pullquoteTypeData", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:pullquoteTypeData: ", p), err)
		}
		if err := p.PullquoteTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PullquoteTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:pullquoteTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInteractiveTypeData() {
		if err := oprot.WriteFieldBegin("interactiveTypeData", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:interactiveTypeData: ", p), err)
		}
		if err := p.InteractiveTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InteractiveTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:interactiveTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapTypeData() {
		if err := oprot.WriteFieldBegin("mapTypeData", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:mapTypeData: ", p), err)
		}
		if err := p.MapTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MapTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:mapTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDocumentTypeData() {
		if err := oprot.WriteFieldBegin("documentTypeData", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:documentTypeData: ", p), err)
		}
		if err := p.DocumentTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DocumentTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:documentTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableTypeData() {
		if err := oprot.WriteFieldBegin("tableTypeData", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tableTypeData: ", p), err)
		}
		if err := p.TableTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TableTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tableTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWitnessTypeData() {
		if err := oprot.WriteFieldBegin("witnessTypeData", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:witnessTypeData: ", p), err)
		}
		if err := p.WitnessTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WitnessTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:witnessTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRichLinkTypeData() {
		if err := oprot.WriteFieldBegin("richLinkTypeData", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:richLinkTypeData: ", p), err)
		}
		if err := p.RichLinkTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RichLinkTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:richLinkTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembershipTypeData() {
		if err := oprot.WriteFieldBegin("membershipTypeData", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:membershipTypeData: ", p), err)
		}
		if err := p.MembershipTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MembershipTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:membershipTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmbedTypeData() {
		if err := oprot.WriteFieldBegin("embedTypeData", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:embedTypeData: ", p), err)
		}
		if err := p.EmbedTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EmbedTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:embedTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstagramTypeData() {
		if err := oprot.WriteFieldBegin("instagramTypeData", thrift.STRUCT, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:instagramTypeData: ", p), err)
		}
		if err := p.InstagramTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InstagramTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:instagramTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentTypeData() {
		if err := oprot.WriteFieldBegin("commentTypeData", thrift.STRUCT, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:commentTypeData: ", p), err)
		}
		if err := p.CommentTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommentTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:commentTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetVineTypeData() {
		if err := oprot.WriteFieldBegin("vineTypeData", thrift.STRUCT, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:vineTypeData: ", p), err)
		}
		if err := p.VineTypeData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VineTypeData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:vineTypeData: ", p), err)
		}
	}
	return err
}

func (p *BlockElement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockElement(%+v)", *p)
}

// Attributes:
//  - KeyEvent
//  - Summary
//  - Title
//  - Pinned
type BlockAttributes struct {
	KeyEvent *bool   `thrift:"keyEvent,1" json:"keyEvent,omitempty"`
	Summary  *bool   `thrift:"summary,2" json:"summary,omitempty"`
	Title    *string `thrift:"title,3" json:"title,omitempty"`
	Pinned   *bool   `thrift:"pinned,4" json:"pinned,omitempty"`
}

func NewBlockAttributes() *BlockAttributes {
	return &BlockAttributes{}
}

var BlockAttributes_KeyEvent_DEFAULT bool

func (p *BlockAttributes) GetKeyEvent() bool {
	if !p.IsSetKeyEvent() {
		return BlockAttributes_KeyEvent_DEFAULT
	}
	return *p.KeyEvent
}

var BlockAttributes_Summary_DEFAULT bool

func (p *BlockAttributes) GetSummary() bool {
	if !p.IsSetSummary() {
		return BlockAttributes_Summary_DEFAULT
	}
	return *p.Summary
}

var BlockAttributes_Title_DEFAULT string

func (p *BlockAttributes) GetTitle() string {
	if !p.IsSetTitle() {
		return BlockAttributes_Title_DEFAULT
	}
	return *p.Title
}

var BlockAttributes_Pinned_DEFAULT bool

func (p *BlockAttributes) GetPinned() bool {
	if !p.IsSetPinned() {
		return BlockAttributes_Pinned_DEFAULT
	}
	return *p.Pinned
}
func (p *BlockAttributes) IsSetKeyEvent() bool {
	return p.KeyEvent != nil
}

func (p *BlockAttributes) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *BlockAttributes) IsSetTitle() bool {
	return p.Title != nil
}

func (p *BlockAttributes) IsSetPinned() bool {
	return p.Pinned != nil
}

func (p *BlockAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.KeyEvent = &v
	}
	return nil
}

func (p *BlockAttributes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Summary = &v
	}
	return nil
}

func (p *BlockAttributes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *BlockAttributes) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Pinned = &v
	}
	return nil
}

func (p *BlockAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BlockAttributes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyEvent() {
		if err := oprot.WriteFieldBegin("keyEvent", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyEvent: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.KeyEvent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.keyEvent (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyEvent: ", p), err)
		}
	}
	return err
}

func (p *BlockAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummary() {
		if err := oprot.WriteFieldBegin("summary", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:summary: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Summary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.summary (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:summary: ", p), err)
		}
	}
	return err
}

func (p *BlockAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
		}
	}
	return err
}

func (p *BlockAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPinned() {
		if err := oprot.WriteFieldBegin("pinned", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinned: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Pinned)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pinned (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinned: ", p), err)
		}
	}
	return err
}

func (p *BlockAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockAttributes(%+v)", *p)
}

// Attributes:
//  - Email
//  - FirstName
//  - LastName
type User struct {
	Email     string  `thrift:"email,1,required" json:"email"`
	FirstName *string `thrift:"firstName,2" json:"firstName,omitempty"`
	LastName  *string `thrift:"lastName,3" json:"lastName,omitempty"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) GetEmail() string {
	return p.Email
}

var User_FirstName_DEFAULT string

func (p *User) GetFirstName() string {
	if !p.IsSetFirstName() {
		return User_FirstName_DEFAULT
	}
	return *p.FirstName
}

var User_LastName_DEFAULT string

func (p *User) GetLastName() string {
	if !p.IsSetLastName() {
		return User_LastName_DEFAULT
	}
	return *p.LastName
}
func (p *User) IsSetFirstName() bool {
	return p.FirstName != nil
}

func (p *User) IsSetLastName() bool {
	return p.LastName != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetEmail bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetEmail = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEmail {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Email is not set"))
	}
	return nil
}

func (p *User) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *User) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FirstName = &v
	}
	return nil
}

func (p *User) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastName = &v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstName() {
		if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FirstName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.firstName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstName: ", p), err)
		}
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastName() {
		if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LastName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastName: ", p), err)
		}
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - ID
//  - BodyHtml
//  - BodyTextSummary
//  - Title
//  - Attributes
//  - Published
//  - CreatedDate
//  - FirstPublishedDate
//  - PublishedDate
//  - LastModifiedDate
//  - Contributors
//  - CreatedBy
//  - LastModifiedBy
//  - Elements
type Block struct {
	ID                 string           `thrift:"id,1,required" json:"id"`
	BodyHtml           string           `thrift:"bodyHtml,2,required" json:"bodyHtml"`
	BodyTextSummary    string           `thrift:"bodyTextSummary,3,required" json:"bodyTextSummary"`
	Title              *string          `thrift:"title,4" json:"title,omitempty"`
	Attributes         *BlockAttributes `thrift:"attributes,5,required" json:"attributes"`
	Published          bool             `thrift:"published,6,required" json:"published"`
	CreatedDate        *CapiDateTime    `thrift:"createdDate,7" json:"createdDate,omitempty"`
	FirstPublishedDate *CapiDateTime    `thrift:"firstPublishedDate,8" json:"firstPublishedDate,omitempty"`
	PublishedDate      *CapiDateTime    `thrift:"publishedDate,9" json:"publishedDate,omitempty"`
	LastModifiedDate   *CapiDateTime    `thrift:"lastModifiedDate,10" json:"lastModifiedDate,omitempty"`
	Contributors       []string         `thrift:"contributors,11,required" json:"contributors"`
	CreatedBy          *User            `thrift:"createdBy,12" json:"createdBy,omitempty"`
	LastModifiedBy     *User            `thrift:"lastModifiedBy,13" json:"lastModifiedBy,omitempty"`
	Elements           []*BlockElement  `thrift:"elements,14,required" json:"elements"`
}

func NewBlock() *Block {
	return &Block{
		Elements: []*BlockElement{},
	}
}

func (p *Block) GetID() string {
	return p.ID
}

func (p *Block) GetBodyHtml() string {
	return p.BodyHtml
}

func (p *Block) GetBodyTextSummary() string {
	return p.BodyTextSummary
}

var Block_Title_DEFAULT string

func (p *Block) GetTitle() string {
	if !p.IsSetTitle() {
		return Block_Title_DEFAULT
	}
	return *p.Title
}

var Block_Attributes_DEFAULT *BlockAttributes

func (p *Block) GetAttributes() *BlockAttributes {
	if !p.IsSetAttributes() {
		return Block_Attributes_DEFAULT
	}
	return p.Attributes
}

func (p *Block) GetPublished() bool {
	return p.Published
}

var Block_CreatedDate_DEFAULT *CapiDateTime

func (p *Block) GetCreatedDate() *CapiDateTime {
	if !p.IsSetCreatedDate() {
		return Block_CreatedDate_DEFAULT
	}
	return p.CreatedDate
}

var Block_FirstPublishedDate_DEFAULT *CapiDateTime

func (p *Block) GetFirstPublishedDate() *CapiDateTime {
	if !p.IsSetFirstPublishedDate() {
		return Block_FirstPublishedDate_DEFAULT
	}
	return p.FirstPublishedDate
}

var Block_PublishedDate_DEFAULT *CapiDateTime

func (p *Block) GetPublishedDate() *CapiDateTime {
	if !p.IsSetPublishedDate() {
		return Block_PublishedDate_DEFAULT
	}
	return p.PublishedDate
}

var Block_LastModifiedDate_DEFAULT *CapiDateTime

func (p *Block) GetLastModifiedDate() *CapiDateTime {
	if !p.IsSetLastModifiedDate() {
		return Block_LastModifiedDate_DEFAULT
	}
	return p.LastModifiedDate
}

func (p *Block) GetContributors() []string {
	return p.Contributors
}

var Block_CreatedBy_DEFAULT *User

func (p *Block) GetCreatedBy() *User {
	if !p.IsSetCreatedBy() {
		return Block_CreatedBy_DEFAULT
	}
	return p.CreatedBy
}

var Block_LastModifiedBy_DEFAULT *User

func (p *Block) GetLastModifiedBy() *User {
	if !p.IsSetLastModifiedBy() {
		return Block_LastModifiedBy_DEFAULT
	}
	return p.LastModifiedBy
}

func (p *Block) GetElements() []*BlockElement {
	return p.Elements
}
func (p *Block) IsSetTitle() bool {
	return p.Title != nil
}

func (p *Block) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *Block) IsSetCreatedDate() bool {
	return p.CreatedDate != nil
}

func (p *Block) IsSetFirstPublishedDate() bool {
	return p.FirstPublishedDate != nil
}

func (p *Block) IsSetPublishedDate() bool {
	return p.PublishedDate != nil
}

func (p *Block) IsSetLastModifiedDate() bool {
	return p.LastModifiedDate != nil
}

func (p *Block) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *Block) IsSetLastModifiedBy() bool {
	return p.LastModifiedBy != nil
}

func (p *Block) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetBodyHtml bool = false
	var issetBodyTextSummary bool = false
	var issetAttributes bool = false
	var issetPublished bool = false
	var issetContributors bool = false
	var issetElements bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetBodyHtml = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetBodyTextSummary = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAttributes = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetPublished = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
			issetContributors = true
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
			issetElements = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetBodyHtml {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BodyHtml is not set"))
	}
	if !issetBodyTextSummary {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BodyTextSummary is not set"))
	}
	if !issetAttributes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Attributes is not set"))
	}
	if !issetPublished {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Published is not set"))
	}
	if !issetContributors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Contributors is not set"))
	}
	if !issetElements {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Elements is not set"))
	}
	return nil
}

func (p *Block) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Block) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BodyHtml = v
	}
	return nil
}

func (p *Block) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BodyTextSummary = v
	}
	return nil
}

func (p *Block) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *Block) readField5(iprot thrift.TProtocol) error {
	p.Attributes = &BlockAttributes{}
	if err := p.Attributes.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
	}
	return nil
}

func (p *Block) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Published = v
	}
	return nil
}

func (p *Block) readField7(iprot thrift.TProtocol) error {
	p.CreatedDate = &CapiDateTime{}
	if err := p.CreatedDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreatedDate), err)
	}
	return nil
}

func (p *Block) readField8(iprot thrift.TProtocol) error {
	p.FirstPublishedDate = &CapiDateTime{}
	if err := p.FirstPublishedDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FirstPublishedDate), err)
	}
	return nil
}

func (p *Block) readField9(iprot thrift.TProtocol) error {
	p.PublishedDate = &CapiDateTime{}
	if err := p.PublishedDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublishedDate), err)
	}
	return nil
}

func (p *Block) readField10(iprot thrift.TProtocol) error {
	p.LastModifiedDate = &CapiDateTime{}
	if err := p.LastModifiedDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastModifiedDate), err)
	}
	return nil
}

func (p *Block) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Contributors = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Contributors = append(p.Contributors, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Block) readField12(iprot thrift.TProtocol) error {
	p.CreatedBy = &User{}
	if err := p.CreatedBy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreatedBy), err)
	}
	return nil
}

func (p *Block) readField13(iprot thrift.TProtocol) error {
	p.LastModifiedBy = &User{}
	if err := p.LastModifiedBy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastModifiedBy), err)
	}
	return nil
}

func (p *Block) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BlockElement, 0, size)
	p.Elements = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &BlockElement{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Elements = append(p.Elements, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Block) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Block"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Block) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Block) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bodyHtml", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bodyHtml: ", p), err)
	}
	if err := oprot.WriteString(string(p.BodyHtml)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bodyHtml (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bodyHtml: ", p), err)
	}
	return err
}

func (p *Block) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bodyTextSummary", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bodyTextSummary: ", p), err)
	}
	if err := oprot.WriteString(string(p.BodyTextSummary)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bodyTextSummary (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bodyTextSummary: ", p), err)
	}
	return err
}

func (p *Block) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := p.Attributes.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *Block) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("published", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:published: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Published)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.published (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:published: ", p), err)
	}
	return err
}

func (p *Block) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedDate() {
		if err := oprot.WriteFieldBegin("createdDate", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createdDate: ", p), err)
		}
		if err := p.CreatedDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreatedDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createdDate: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstPublishedDate() {
		if err := oprot.WriteFieldBegin("firstPublishedDate", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:firstPublishedDate: ", p), err)
		}
		if err := p.FirstPublishedDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FirstPublishedDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:firstPublishedDate: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishedDate() {
		if err := oprot.WriteFieldBegin("publishedDate", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:publishedDate: ", p), err)
		}
		if err := p.PublishedDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublishedDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:publishedDate: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastModifiedDate() {
		if err := oprot.WriteFieldBegin("lastModifiedDate", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lastModifiedDate: ", p), err)
		}
		if err := p.LastModifiedDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastModifiedDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lastModifiedDate: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contributors", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contributors: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Contributors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Contributors {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contributors: ", p), err)
	}
	return err
}

func (p *Block) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err := oprot.WriteFieldBegin("createdBy", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:createdBy: ", p), err)
		}
		if err := p.CreatedBy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreatedBy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:createdBy: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastModifiedBy() {
		if err := oprot.WriteFieldBegin("lastModifiedBy", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:lastModifiedBy: ", p), err)
		}
		if err := p.LastModifiedBy.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastModifiedBy), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:lastModifiedBy: ", p), err)
		}
	}
	return err
}

func (p *Block) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("elements", thrift.LIST, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:elements: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Elements)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Elements {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:elements: ", p), err)
	}
	return err
}

func (p *Block) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Block(%+v)", *p)
}

// Attributes:
//  - Main
//  - Body
//  - TotalBodyBlocks
//  - RequestedBodyBlocks
type Blocks struct {
	Main                *Block              `thrift:"main,1" json:"main,omitempty"`
	Body                []*Block            `thrift:"body,2" json:"body,omitempty"`
	TotalBodyBlocks     *int32              `thrift:"totalBodyBlocks,3" json:"totalBodyBlocks,omitempty"`
	RequestedBodyBlocks map[string][]*Block `thrift:"requestedBodyBlocks,4" json:"requestedBodyBlocks,omitempty"`
}

func NewBlocks() *Blocks {
	return &Blocks{}
}

var Blocks_Main_DEFAULT *Block

func (p *Blocks) GetMain() *Block {
	if !p.IsSetMain() {
		return Blocks_Main_DEFAULT
	}
	return p.Main
}

var Blocks_Body_DEFAULT []*Block

func (p *Blocks) GetBody() []*Block {
	return p.Body
}

var Blocks_TotalBodyBlocks_DEFAULT int32

func (p *Blocks) GetTotalBodyBlocks() int32 {
	if !p.IsSetTotalBodyBlocks() {
		return Blocks_TotalBodyBlocks_DEFAULT
	}
	return *p.TotalBodyBlocks
}

var Blocks_RequestedBodyBlocks_DEFAULT map[string][]*Block

func (p *Blocks) GetRequestedBodyBlocks() map[string][]*Block {
	return p.RequestedBodyBlocks
}
func (p *Blocks) IsSetMain() bool {
	return p.Main != nil
}

func (p *Blocks) IsSetBody() bool {
	return p.Body != nil
}

func (p *Blocks) IsSetTotalBodyBlocks() bool {
	return p.TotalBodyBlocks != nil
}

func (p *Blocks) IsSetRequestedBodyBlocks() bool {
	return p.RequestedBodyBlocks != nil
}

func (p *Blocks) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Blocks) readField1(iprot thrift.TProtocol) error {
	p.Main = &Block{
		Elements: []*BlockElement{},
	}
	if err := p.Main.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Main), err)
	}
	return nil
}

func (p *Blocks) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Block, 0, size)
	p.Body = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &Block{
			Elements: []*BlockElement{},
		}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Body = append(p.Body, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Blocks) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalBodyBlocks = &v
	}
	return nil
}

func (p *Blocks) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*Block, size)
	p.RequestedBodyBlocks = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*Block, 0, size)
		_val5 := tSlice
		for i := 0; i < size; i++ {
			_elem6 := &Block{
				Elements: []*BlockElement{},
			}
			if err := _elem6.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
			}
			_val5 = append(_val5, _elem6)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.RequestedBodyBlocks[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Blocks) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Blocks"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Blocks) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMain() {
		if err := oprot.WriteFieldBegin("main", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:main: ", p), err)
		}
		if err := p.Main.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Main), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:main: ", p), err)
		}
	}
	return err
}

func (p *Blocks) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("body", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:body: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Body)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Body {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:body: ", p), err)
		}
	}
	return err
}

func (p *Blocks) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalBodyBlocks() {
		if err := oprot.WriteFieldBegin("totalBodyBlocks", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalBodyBlocks: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalBodyBlocks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalBodyBlocks (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalBodyBlocks: ", p), err)
		}
	}
	return err
}

func (p *Blocks) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedBodyBlocks() {
		if err := oprot.WriteFieldBegin("requestedBodyBlocks", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestedBodyBlocks: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.RequestedBodyBlocks)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.RequestedBodyBlocks {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestedBodyBlocks: ", p), err)
		}
	}
	return err
}

func (p *Blocks) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Blocks(%+v)", *p)
}

// Attributes:
//  - Cols
//  - Rows
type CrosswordDimensions struct {
	Cols int32 `thrift:"cols,1,required" json:"cols"`
	Rows int32 `thrift:"rows,2,required" json:"rows"`
}

func NewCrosswordDimensions() *CrosswordDimensions {
	return &CrosswordDimensions{}
}

func (p *CrosswordDimensions) GetCols() int32 {
	return p.Cols
}

func (p *CrosswordDimensions) GetRows() int32 {
	return p.Rows
}
func (p *CrosswordDimensions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCols bool = false
	var issetRows bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCols = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRows = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCols {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cols is not set"))
	}
	if !issetRows {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rows is not set"))
	}
	return nil
}

func (p *CrosswordDimensions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Cols = v
	}
	return nil
}

func (p *CrosswordDimensions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Rows = v
	}
	return nil
}

func (p *CrosswordDimensions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrosswordDimensions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrosswordDimensions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cols)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cols (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err)
	}
	return err
}

func (p *CrosswordDimensions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Rows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rows (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *CrosswordDimensions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrosswordDimensions(%+v)", *p)
}

// Attributes:
//  - X
//  - Y
type CrosswordPosition struct {
	X int32 `thrift:"x,1,required" json:"x"`
	Y int32 `thrift:"y,2,required" json:"y"`
}

func NewCrosswordPosition() *CrosswordPosition {
	return &CrosswordPosition{}
}

func (p *CrosswordPosition) GetX() int32 {
	return p.X
}

func (p *CrosswordPosition) GetY() int32 {
	return p.Y
}
func (p *CrosswordPosition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetX bool = false
	var issetY bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetX = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetY = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetX {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X is not set"))
	}
	if !issetY {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Y is not set"))
	}
	return nil
}

func (p *CrosswordPosition) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.X = v
	}
	return nil
}

func (p *CrosswordPosition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Y = v
	}
	return nil
}

func (p *CrosswordPosition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrosswordPosition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrosswordPosition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("x", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.X)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err)
	}
	return err
}

func (p *CrosswordPosition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("y", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Y)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err)
	}
	return err
}

func (p *CrosswordPosition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrosswordPosition(%+v)", *p)
}

// Attributes:
//  - Name
//  - WebUrl
type CrosswordCreator struct {
	Name   string `thrift:"name,1,required" json:"name"`
	WebUrl string `thrift:"webUrl,2,required" json:"webUrl"`
}

func NewCrosswordCreator() *CrosswordCreator {
	return &CrosswordCreator{}
}

func (p *CrosswordCreator) GetName() string {
	return p.Name
}

func (p *CrosswordCreator) GetWebUrl() string {
	return p.WebUrl
}
func (p *CrosswordCreator) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetWebUrl bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	return nil
}

func (p *CrosswordCreator) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CrosswordCreator) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *CrosswordCreator) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrosswordCreator"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrosswordCreator) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *CrosswordCreator) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:webUrl: ", p), err)
	}
	return err
}

func (p *CrosswordCreator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrosswordCreator(%+v)", *p)
}

// Attributes:
//  - ID
//  - Number
//  - HumanNumber
//  - Direction
//  - Position
//  - SeparatorLocations
//  - Length
//  - Clue
//  - Group
//  - Solution
//  - Format
type CrosswordEntry struct {
	ID                 string             `thrift:"id,1,required" json:"id"`
	Number             *int32             `thrift:"number,2" json:"number,omitempty"`
	HumanNumber        *string            `thrift:"humanNumber,3" json:"humanNumber,omitempty"`
	Direction          *string            `thrift:"direction,4" json:"direction,omitempty"`
	Position           *CrosswordPosition `thrift:"position,5" json:"position,omitempty"`
	SeparatorLocations map[string][]int32 `thrift:"separatorLocations,6" json:"separatorLocations,omitempty"`
	Length             *int32             `thrift:"length,7" json:"length,omitempty"`
	Clue               *string            `thrift:"clue,8" json:"clue,omitempty"`
	Group              []string           `thrift:"group,9" json:"group,omitempty"`
	Solution           *string            `thrift:"solution,10" json:"solution,omitempty"`
	Format             *string            `thrift:"format,11" json:"format,omitempty"`
}

func NewCrosswordEntry() *CrosswordEntry {
	return &CrosswordEntry{}
}

func (p *CrosswordEntry) GetID() string {
	return p.ID
}

var CrosswordEntry_Number_DEFAULT int32

func (p *CrosswordEntry) GetNumber() int32 {
	if !p.IsSetNumber() {
		return CrosswordEntry_Number_DEFAULT
	}
	return *p.Number
}

var CrosswordEntry_HumanNumber_DEFAULT string

func (p *CrosswordEntry) GetHumanNumber() string {
	if !p.IsSetHumanNumber() {
		return CrosswordEntry_HumanNumber_DEFAULT
	}
	return *p.HumanNumber
}

var CrosswordEntry_Direction_DEFAULT string

func (p *CrosswordEntry) GetDirection() string {
	if !p.IsSetDirection() {
		return CrosswordEntry_Direction_DEFAULT
	}
	return *p.Direction
}

var CrosswordEntry_Position_DEFAULT *CrosswordPosition

func (p *CrosswordEntry) GetPosition() *CrosswordPosition {
	if !p.IsSetPosition() {
		return CrosswordEntry_Position_DEFAULT
	}
	return p.Position
}

var CrosswordEntry_SeparatorLocations_DEFAULT map[string][]int32

func (p *CrosswordEntry) GetSeparatorLocations() map[string][]int32 {
	return p.SeparatorLocations
}

var CrosswordEntry_Length_DEFAULT int32

func (p *CrosswordEntry) GetLength() int32 {
	if !p.IsSetLength() {
		return CrosswordEntry_Length_DEFAULT
	}
	return *p.Length
}

var CrosswordEntry_Clue_DEFAULT string

func (p *CrosswordEntry) GetClue() string {
	if !p.IsSetClue() {
		return CrosswordEntry_Clue_DEFAULT
	}
	return *p.Clue
}

var CrosswordEntry_Group_DEFAULT []string

func (p *CrosswordEntry) GetGroup() []string {
	return p.Group
}

var CrosswordEntry_Solution_DEFAULT string

func (p *CrosswordEntry) GetSolution() string {
	if !p.IsSetSolution() {
		return CrosswordEntry_Solution_DEFAULT
	}
	return *p.Solution
}

var CrosswordEntry_Format_DEFAULT string

func (p *CrosswordEntry) GetFormat() string {
	if !p.IsSetFormat() {
		return CrosswordEntry_Format_DEFAULT
	}
	return *p.Format
}
func (p *CrosswordEntry) IsSetNumber() bool {
	return p.Number != nil
}

func (p *CrosswordEntry) IsSetHumanNumber() bool {
	return p.HumanNumber != nil
}

func (p *CrosswordEntry) IsSetDirection() bool {
	return p.Direction != nil
}

func (p *CrosswordEntry) IsSetPosition() bool {
	return p.Position != nil
}

func (p *CrosswordEntry) IsSetSeparatorLocations() bool {
	return p.SeparatorLocations != nil
}

func (p *CrosswordEntry) IsSetLength() bool {
	return p.Length != nil
}

func (p *CrosswordEntry) IsSetClue() bool {
	return p.Clue != nil
}

func (p *CrosswordEntry) IsSetGroup() bool {
	return p.Group != nil
}

func (p *CrosswordEntry) IsSetSolution() bool {
	return p.Solution != nil
}

func (p *CrosswordEntry) IsSetFormat() bool {
	return p.Format != nil
}

func (p *CrosswordEntry) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *CrosswordEntry) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *CrosswordEntry) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = &v
	}
	return nil
}

func (p *CrosswordEntry) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HumanNumber = &v
	}
	return nil
}

func (p *CrosswordEntry) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Direction = &v
	}
	return nil
}

func (p *CrosswordEntry) readField5(iprot thrift.TProtocol) error {
	p.Position = &CrosswordPosition{}
	if err := p.Position.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Position), err)
	}
	return nil
}

func (p *CrosswordEntry) readField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]int32, size)
	p.SeparatorLocations = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key7 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int32, 0, size)
		_val8 := tSlice
		for i := 0; i < size; i++ {
			var _elem9 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem9 = v
			}
			_val8 = append(_val8, _elem9)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.SeparatorLocations[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CrosswordEntry) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Length = &v
	}
	return nil
}

func (p *CrosswordEntry) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Clue = &v
	}
	return nil
}

func (p *CrosswordEntry) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Group = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.Group = append(p.Group, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CrosswordEntry) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Solution = &v
	}
	return nil
}

func (p *CrosswordEntry) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Format = &v
	}
	return nil
}

func (p *CrosswordEntry) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrosswordEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrosswordEntry) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *CrosswordEntry) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err := oprot.WriteFieldBegin("number", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Number)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHumanNumber() {
		if err := oprot.WriteFieldBegin("humanNumber", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:humanNumber: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HumanNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.humanNumber (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:humanNumber: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDirection() {
		if err := oprot.WriteFieldBegin("direction", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:direction: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Direction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.direction (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:direction: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosition() {
		if err := oprot.WriteFieldBegin("position", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:position: ", p), err)
		}
		if err := p.Position.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Position), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:position: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSeparatorLocations() {
		if err := oprot.WriteFieldBegin("separatorLocations", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:separatorLocations: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.SeparatorLocations)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.SeparatorLocations {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:separatorLocations: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLength() {
		if err := oprot.WriteFieldBegin("length", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:length: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Length)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.length (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:length: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetClue() {
		if err := oprot.WriteFieldBegin("clue", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:clue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Clue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clue (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:clue: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroup() {
		if err := oprot.WriteFieldBegin("group", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:group: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Group)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Group {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:group: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSolution() {
		if err := oprot.WriteFieldBegin("solution", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:solution: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Solution)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.solution (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:solution: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err := oprot.WriteFieldBegin("format", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:format: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Format)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.format (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:format: ", p), err)
		}
	}
	return err
}

func (p *CrosswordEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrosswordEntry(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Number
//  - Date
//  - Dimensions
//  - Entries
//  - SolutionAvailable
//  - HasNumbers
//  - RandomCluesOrdering
//  - Instructions
//  - Creator
//  - Pdf
//  - AnnotatedSolution
//  - DateSolutionAvailable
type Crossword struct {
	Name                  string               `thrift:"name,1,required" json:"name"`
	Type                  CrosswordType        `thrift:"type,2,required" json:"type"`
	Number                int32                `thrift:"number,3,required" json:"number"`
	Date                  *CapiDateTime        `thrift:"date,4,required" json:"date"`
	Dimensions            *CrosswordDimensions `thrift:"dimensions,5,required" json:"dimensions"`
	Entries               []*CrosswordEntry    `thrift:"entries,6,required" json:"entries"`
	SolutionAvailable     bool                 `thrift:"solutionAvailable,7,required" json:"solutionAvailable"`
	HasNumbers            bool                 `thrift:"hasNumbers,8,required" json:"hasNumbers"`
	RandomCluesOrdering   bool                 `thrift:"randomCluesOrdering,9,required" json:"randomCluesOrdering"`
	Instructions          *string              `thrift:"instructions,10" json:"instructions,omitempty"`
	Creator               *CrosswordCreator    `thrift:"creator,11" json:"creator,omitempty"`
	Pdf                   *string              `thrift:"pdf,12" json:"pdf,omitempty"`
	AnnotatedSolution     *string              `thrift:"annotatedSolution,13" json:"annotatedSolution,omitempty"`
	DateSolutionAvailable *CapiDateTime        `thrift:"dateSolutionAvailable,14" json:"dateSolutionAvailable,omitempty"`
}

func NewCrossword() *Crossword {
	return &Crossword{}
}

func (p *Crossword) GetName() string {
	return p.Name
}

func (p *Crossword) GetType() CrosswordType {
	return p.Type
}

func (p *Crossword) GetNumber() int32 {
	return p.Number
}

var Crossword_Date_DEFAULT *CapiDateTime

func (p *Crossword) GetDate() *CapiDateTime {
	if !p.IsSetDate() {
		return Crossword_Date_DEFAULT
	}
	return p.Date
}

var Crossword_Dimensions_DEFAULT *CrosswordDimensions

func (p *Crossword) GetDimensions() *CrosswordDimensions {
	if !p.IsSetDimensions() {
		return Crossword_Dimensions_DEFAULT
	}
	return p.Dimensions
}

func (p *Crossword) GetEntries() []*CrosswordEntry {
	return p.Entries
}

func (p *Crossword) GetSolutionAvailable() bool {
	return p.SolutionAvailable
}

func (p *Crossword) GetHasNumbers() bool {
	return p.HasNumbers
}

func (p *Crossword) GetRandomCluesOrdering() bool {
	return p.RandomCluesOrdering
}

var Crossword_Instructions_DEFAULT string

func (p *Crossword) GetInstructions() string {
	if !p.IsSetInstructions() {
		return Crossword_Instructions_DEFAULT
	}
	return *p.Instructions
}

var Crossword_Creator_DEFAULT *CrosswordCreator

func (p *Crossword) GetCreator() *CrosswordCreator {
	if !p.IsSetCreator() {
		return Crossword_Creator_DEFAULT
	}
	return p.Creator
}

var Crossword_Pdf_DEFAULT string

func (p *Crossword) GetPdf() string {
	if !p.IsSetPdf() {
		return Crossword_Pdf_DEFAULT
	}
	return *p.Pdf
}

var Crossword_AnnotatedSolution_DEFAULT string

func (p *Crossword) GetAnnotatedSolution() string {
	if !p.IsSetAnnotatedSolution() {
		return Crossword_AnnotatedSolution_DEFAULT
	}
	return *p.AnnotatedSolution
}

var Crossword_DateSolutionAvailable_DEFAULT *CapiDateTime

func (p *Crossword) GetDateSolutionAvailable() *CapiDateTime {
	if !p.IsSetDateSolutionAvailable() {
		return Crossword_DateSolutionAvailable_DEFAULT
	}
	return p.DateSolutionAvailable
}
func (p *Crossword) IsSetDate() bool {
	return p.Date != nil
}

func (p *Crossword) IsSetDimensions() bool {
	return p.Dimensions != nil
}

func (p *Crossword) IsSetInstructions() bool {
	return p.Instructions != nil
}

func (p *Crossword) IsSetCreator() bool {
	return p.Creator != nil
}

func (p *Crossword) IsSetPdf() bool {
	return p.Pdf != nil
}

func (p *Crossword) IsSetAnnotatedSolution() bool {
	return p.AnnotatedSolution != nil
}

func (p *Crossword) IsSetDateSolutionAvailable() bool {
	return p.DateSolutionAvailable != nil
}

func (p *Crossword) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetType bool = false
	var issetNumber bool = false
	var issetDate bool = false
	var issetDimensions bool = false
	var issetEntries bool = false
	var issetSolutionAvailable bool = false
	var issetHasNumbers bool = false
	var issetRandomCluesOrdering bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNumber = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetDate = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetDimensions = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetEntries = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetSolutionAvailable = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetHasNumbers = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetRandomCluesOrdering = true
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetNumber {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Number is not set"))
	}
	if !issetDate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Date is not set"))
	}
	if !issetDimensions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Dimensions is not set"))
	}
	if !issetEntries {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Entries is not set"))
	}
	if !issetSolutionAvailable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SolutionAvailable is not set"))
	}
	if !issetHasNumbers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasNumbers is not set"))
	}
	if !issetRandomCluesOrdering {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RandomCluesOrdering is not set"))
	}
	return nil
}

func (p *Crossword) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Crossword) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := CrosswordType(v)
		p.Type = temp
	}
	return nil
}

func (p *Crossword) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *Crossword) readField4(iprot thrift.TProtocol) error {
	p.Date = &CapiDateTime{}
	if err := p.Date.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Date), err)
	}
	return nil
}

func (p *Crossword) readField5(iprot thrift.TProtocol) error {
	p.Dimensions = &CrosswordDimensions{}
	if err := p.Dimensions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dimensions), err)
	}
	return nil
}

func (p *Crossword) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*CrosswordEntry, 0, size)
	p.Entries = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &CrosswordEntry{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Entries = append(p.Entries, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Crossword) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SolutionAvailable = v
	}
	return nil
}

func (p *Crossword) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.HasNumbers = v
	}
	return nil
}

func (p *Crossword) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RandomCluesOrdering = v
	}
	return nil
}

func (p *Crossword) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Instructions = &v
	}
	return nil
}

func (p *Crossword) readField11(iprot thrift.TProtocol) error {
	p.Creator = &CrosswordCreator{}
	if err := p.Creator.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
	}
	return nil
}

func (p *Crossword) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Pdf = &v
	}
	return nil
}

func (p *Crossword) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.AnnotatedSolution = &v
	}
	return nil
}

func (p *Crossword) readField14(iprot thrift.TProtocol) error {
	p.DateSolutionAvailable = &CapiDateTime{}
	if err := p.DateSolutionAvailable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateSolutionAvailable), err)
	}
	return nil
}

func (p *Crossword) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Crossword"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Crossword) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *Crossword) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Crossword) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:number: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:number: ", p), err)
	}
	return err
}

func (p *Crossword) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("date", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:date: ", p), err)
	}
	if err := p.Date.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Date), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:date: ", p), err)
	}
	return err
}

func (p *Crossword) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dimensions", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dimensions: ", p), err)
	}
	if err := p.Dimensions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dimensions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dimensions: ", p), err)
	}
	return err
}

func (p *Crossword) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entries", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entries: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Entries)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Entries {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entries: ", p), err)
	}
	return err
}

func (p *Crossword) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("solutionAvailable", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:solutionAvailable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SolutionAvailable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.solutionAvailable (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:solutionAvailable: ", p), err)
	}
	return err
}

func (p *Crossword) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNumbers", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:hasNumbers: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNumbers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasNumbers (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:hasNumbers: ", p), err)
	}
	return err
}

func (p *Crossword) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("randomCluesOrdering", thrift.BOOL, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:randomCluesOrdering: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RandomCluesOrdering)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.randomCluesOrdering (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:randomCluesOrdering: ", p), err)
	}
	return err
}

func (p *Crossword) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstructions() {
		if err := oprot.WriteFieldBegin("instructions", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:instructions: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Instructions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.instructions (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:instructions: ", p), err)
		}
	}
	return err
}

func (p *Crossword) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreator() {
		if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:creator: ", p), err)
		}
		if err := p.Creator.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:creator: ", p), err)
		}
	}
	return err
}

func (p *Crossword) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPdf() {
		if err := oprot.WriteFieldBegin("pdf", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pdf: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Pdf)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pdf (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pdf: ", p), err)
		}
	}
	return err
}

func (p *Crossword) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotatedSolution() {
		if err := oprot.WriteFieldBegin("annotatedSolution", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:annotatedSolution: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AnnotatedSolution)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.annotatedSolution (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:annotatedSolution: ", p), err)
		}
	}
	return err
}

func (p *Crossword) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateSolutionAvailable() {
		if err := oprot.WriteFieldBegin("dateSolutionAvailable", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:dateSolutionAvailable: ", p), err)
		}
		if err := p.DateSolutionAvailable.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateSolutionAvailable), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:dateSolutionAvailable: ", p), err)
		}
	}
	return err
}

func (p *Crossword) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Crossword(%+v)", *p)
}

// Attributes:
//  - ID
//  - Relation
//  - Type
//  - GalleryIndex
//  - Assets
type Element struct {
	ID           string      `thrift:"id,1,required" json:"id"`
	Relation     string      `thrift:"relation,2,required" json:"relation"`
	Type         ElementType `thrift:"type,3,required" json:"type"`
	GalleryIndex *int32      `thrift:"galleryIndex,4" json:"galleryIndex,omitempty"`
	Assets       []*Asset    `thrift:"assets,5,required" json:"assets"`
}

func NewElement() *Element {
	return &Element{}
}

func (p *Element) GetID() string {
	return p.ID
}

func (p *Element) GetRelation() string {
	return p.Relation
}

func (p *Element) GetType() ElementType {
	return p.Type
}

var Element_GalleryIndex_DEFAULT int32

func (p *Element) GetGalleryIndex() int32 {
	if !p.IsSetGalleryIndex() {
		return Element_GalleryIndex_DEFAULT
	}
	return *p.GalleryIndex
}

func (p *Element) GetAssets() []*Asset {
	return p.Assets
}
func (p *Element) IsSetGalleryIndex() bool {
	return p.GalleryIndex != nil
}

func (p *Element) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetRelation bool = false
	var issetType bool = false
	var issetAssets bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetRelation = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetType = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetAssets = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetRelation {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Relation is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetAssets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assets is not set"))
	}
	return nil
}

func (p *Element) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Element) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Relation = v
	}
	return nil
}

func (p *Element) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ElementType(v)
		p.Type = temp
	}
	return nil
}

func (p *Element) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GalleryIndex = &v
	}
	return nil
}

func (p *Element) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &Asset{}
		if err := _elem12.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
		}
		p.Assets = append(p.Assets, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Element) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Element"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Element) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Element) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:relation: ", p), err)
	}
	if err := oprot.WriteString(string(p.Relation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relation (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:relation: ", p), err)
	}
	return err
}

func (p *Element) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *Element) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGalleryIndex() {
		if err := oprot.WriteFieldBegin("galleryIndex", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:galleryIndex: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.GalleryIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.galleryIndex (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:galleryIndex: ", p), err)
		}
	}
	return err
}

func (p *Element) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assets", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:assets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Assets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:assets: ", p), err)
	}
	return err
}

func (p *Element) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Element(%+v)", *p)
}

// Attributes:
//  - Headline
//  - Standfirst
//  - TrailText
//  - Byline
//  - Main
//  - Body
//  - NewspaperPageNumber_
//  - StarRating
//  - ContributorBio
//  - MembershipAccess
//  - Wordcount
//  - CommentCloseDate
//  - Commentable
//  - CreationDate
//  - DisplayHint
//  - FirstPublicationDate
//  - HasStoryPackage
//  - InternalComposerCode
//  - InternalOctopusCode
//  - InternalPageCode
//  - InternalStoryPackageCode
//  - IsInappropriateForSponsorship
//  - IsPremoderated
//  - LastModified
//  - LiveBloggingNow
//  - NewspaperEditionDate_
//  - ProductionOffice
//  - Publication
//  - ScheduledPublicationDate
//  - SecureThumbnail
//  - ShortUrl
//  - ShouldHideAdverts
//  - ShowInRelatedContent
//  - Thumbnail
//  - LegallySensitive
//  - AllowUgc
//  - Sensitive
//  - Lang
//  - InternalRevision
//  - InternalContentCode
//  - IsLive
//  - InternalShortId
type ContentFields struct {
	Headline                      *string         `thrift:"headline,1" json:"headline,omitempty"`
	Standfirst                    *string         `thrift:"standfirst,2" json:"standfirst,omitempty"`
	TrailText                     *string         `thrift:"trailText,3" json:"trailText,omitempty"`
	Byline                        *string         `thrift:"byline,4" json:"byline,omitempty"`
	Main                          *string         `thrift:"main,5" json:"main,omitempty"`
	Body                          *string         `thrift:"body,6" json:"body,omitempty"`
	NewspaperPageNumber_          *int32          `thrift:"newspaperPageNumber,7" json:"newspaperPageNumber,omitempty"`
	StarRating                    *int32          `thrift:"starRating,8" json:"starRating,omitempty"`
	ContributorBio                *string         `thrift:"contributorBio,9" json:"contributorBio,omitempty"`
	MembershipAccess              *MembershipTier `thrift:"membershipAccess,10" json:"membershipAccess,omitempty"`
	Wordcount                     *int32          `thrift:"wordcount,11" json:"wordcount,omitempty"`
	CommentCloseDate              *CapiDateTime   `thrift:"commentCloseDate,12" json:"commentCloseDate,omitempty"`
	Commentable                   *bool           `thrift:"commentable,13" json:"commentable,omitempty"`
	CreationDate                  *CapiDateTime   `thrift:"creationDate,14" json:"creationDate,omitempty"`
	DisplayHint                   *string         `thrift:"displayHint,15" json:"displayHint,omitempty"`
	FirstPublicationDate          *CapiDateTime   `thrift:"firstPublicationDate,16" json:"firstPublicationDate,omitempty"`
	HasStoryPackage               *bool           `thrift:"hasStoryPackage,17" json:"hasStoryPackage,omitempty"`
	InternalComposerCode          *string         `thrift:"internalComposerCode,18" json:"internalComposerCode,omitempty"`
	InternalOctopusCode           *string         `thrift:"internalOctopusCode,19" json:"internalOctopusCode,omitempty"`
	InternalPageCode              *int32          `thrift:"internalPageCode,20" json:"internalPageCode,omitempty"`
	InternalStoryPackageCode      *int32          `thrift:"internalStoryPackageCode,21" json:"internalStoryPackageCode,omitempty"`
	IsInappropriateForSponsorship *bool           `thrift:"isInappropriateForSponsorship,22" json:"isInappropriateForSponsorship,omitempty"`
	IsPremoderated                *bool           `thrift:"isPremoderated,23" json:"isPremoderated,omitempty"`
	LastModified                  *CapiDateTime   `thrift:"lastModified,24" json:"lastModified,omitempty"`
	LiveBloggingNow               *bool           `thrift:"liveBloggingNow,25" json:"liveBloggingNow,omitempty"`
	NewspaperEditionDate_         *CapiDateTime   `thrift:"newspaperEditionDate,26" json:"newspaperEditionDate,omitempty"`
	ProductionOffice              *Office         `thrift:"productionOffice,27" json:"productionOffice,omitempty"`
	Publication                   *string         `thrift:"publication,28" json:"publication,omitempty"`
	ScheduledPublicationDate      *CapiDateTime   `thrift:"scheduledPublicationDate,29" json:"scheduledPublicationDate,omitempty"`
	SecureThumbnail               *string         `thrift:"secureThumbnail,30" json:"secureThumbnail,omitempty"`
	ShortUrl                      *string         `thrift:"shortUrl,31" json:"shortUrl,omitempty"`
	ShouldHideAdverts             *bool           `thrift:"shouldHideAdverts,32" json:"shouldHideAdverts,omitempty"`
	ShowInRelatedContent          *bool           `thrift:"showInRelatedContent,33" json:"showInRelatedContent,omitempty"`
	Thumbnail                     *string         `thrift:"thumbnail,34" json:"thumbnail,omitempty"`
	LegallySensitive              *bool           `thrift:"legallySensitive,35" json:"legallySensitive,omitempty"`
	AllowUgc                      *bool           `thrift:"allowUgc,36" json:"allowUgc,omitempty"`
	Sensitive                     *bool           `thrift:"sensitive,37" json:"sensitive,omitempty"`
	Lang                          *string         `thrift:"lang,38" json:"lang,omitempty"`
	InternalRevision              *int32          `thrift:"internalRevision,39" json:"internalRevision,omitempty"`
	InternalContentCode           *int32          `thrift:"internalContentCode,40" json:"internalContentCode,omitempty"`
	IsLive                        *bool           `thrift:"isLive,41" json:"isLive,omitempty"`
	InternalShortId               *string         `thrift:"internalShortId,42" json:"internalShortId,omitempty"`
}

func NewContentFields() *ContentFields {
	return &ContentFields{}
}

var ContentFields_Headline_DEFAULT string

func (p *ContentFields) GetHeadline() string {
	if !p.IsSetHeadline() {
		return ContentFields_Headline_DEFAULT
	}
	return *p.Headline
}

var ContentFields_Standfirst_DEFAULT string

func (p *ContentFields) GetStandfirst() string {
	if !p.IsSetStandfirst() {
		return ContentFields_Standfirst_DEFAULT
	}
	return *p.Standfirst
}

var ContentFields_TrailText_DEFAULT string

func (p *ContentFields) GetTrailText() string {
	if !p.IsSetTrailText() {
		return ContentFields_TrailText_DEFAULT
	}
	return *p.TrailText
}

var ContentFields_Byline_DEFAULT string

func (p *ContentFields) GetByline() string {
	if !p.IsSetByline() {
		return ContentFields_Byline_DEFAULT
	}
	return *p.Byline
}

var ContentFields_Main_DEFAULT string

func (p *ContentFields) GetMain() string {
	if !p.IsSetMain() {
		return ContentFields_Main_DEFAULT
	}
	return *p.Main
}

var ContentFields_Body_DEFAULT string

func (p *ContentFields) GetBody() string {
	if !p.IsSetBody() {
		return ContentFields_Body_DEFAULT
	}
	return *p.Body
}

var ContentFields_NewspaperPageNumber__DEFAULT int32

func (p *ContentFields) GetNewspaperPageNumber_() int32 {
	if !p.IsSetNewspaperPageNumber_() {
		return ContentFields_NewspaperPageNumber__DEFAULT
	}
	return *p.NewspaperPageNumber_
}

var ContentFields_StarRating_DEFAULT int32

func (p *ContentFields) GetStarRating() int32 {
	if !p.IsSetStarRating() {
		return ContentFields_StarRating_DEFAULT
	}
	return *p.StarRating
}

var ContentFields_ContributorBio_DEFAULT string

func (p *ContentFields) GetContributorBio() string {
	if !p.IsSetContributorBio() {
		return ContentFields_ContributorBio_DEFAULT
	}
	return *p.ContributorBio
}

var ContentFields_MembershipAccess_DEFAULT MembershipTier

func (p *ContentFields) GetMembershipAccess() MembershipTier {
	if !p.IsSetMembershipAccess() {
		return ContentFields_MembershipAccess_DEFAULT
	}
	return *p.MembershipAccess
}

var ContentFields_Wordcount_DEFAULT int32

func (p *ContentFields) GetWordcount() int32 {
	if !p.IsSetWordcount() {
		return ContentFields_Wordcount_DEFAULT
	}
	return *p.Wordcount
}

var ContentFields_CommentCloseDate_DEFAULT *CapiDateTime

func (p *ContentFields) GetCommentCloseDate() *CapiDateTime {
	if !p.IsSetCommentCloseDate() {
		return ContentFields_CommentCloseDate_DEFAULT
	}
	return p.CommentCloseDate
}

var ContentFields_Commentable_DEFAULT bool

func (p *ContentFields) GetCommentable() bool {
	if !p.IsSetCommentable() {
		return ContentFields_Commentable_DEFAULT
	}
	return *p.Commentable
}

var ContentFields_CreationDate_DEFAULT *CapiDateTime

func (p *ContentFields) GetCreationDate() *CapiDateTime {
	if !p.IsSetCreationDate() {
		return ContentFields_CreationDate_DEFAULT
	}
	return p.CreationDate
}

var ContentFields_DisplayHint_DEFAULT string

func (p *ContentFields) GetDisplayHint() string {
	if !p.IsSetDisplayHint() {
		return ContentFields_DisplayHint_DEFAULT
	}
	return *p.DisplayHint
}

var ContentFields_FirstPublicationDate_DEFAULT *CapiDateTime

func (p *ContentFields) GetFirstPublicationDate() *CapiDateTime {
	if !p.IsSetFirstPublicationDate() {
		return ContentFields_FirstPublicationDate_DEFAULT
	}
	return p.FirstPublicationDate
}

var ContentFields_HasStoryPackage_DEFAULT bool

func (p *ContentFields) GetHasStoryPackage() bool {
	if !p.IsSetHasStoryPackage() {
		return ContentFields_HasStoryPackage_DEFAULT
	}
	return *p.HasStoryPackage
}

var ContentFields_InternalComposerCode_DEFAULT string

func (p *ContentFields) GetInternalComposerCode() string {
	if !p.IsSetInternalComposerCode() {
		return ContentFields_InternalComposerCode_DEFAULT
	}
	return *p.InternalComposerCode
}

var ContentFields_InternalOctopusCode_DEFAULT string

func (p *ContentFields) GetInternalOctopusCode() string {
	if !p.IsSetInternalOctopusCode() {
		return ContentFields_InternalOctopusCode_DEFAULT
	}
	return *p.InternalOctopusCode
}

var ContentFields_InternalPageCode_DEFAULT int32

func (p *ContentFields) GetInternalPageCode() int32 {
	if !p.IsSetInternalPageCode() {
		return ContentFields_InternalPageCode_DEFAULT
	}
	return *p.InternalPageCode
}

var ContentFields_InternalStoryPackageCode_DEFAULT int32

func (p *ContentFields) GetInternalStoryPackageCode() int32 {
	if !p.IsSetInternalStoryPackageCode() {
		return ContentFields_InternalStoryPackageCode_DEFAULT
	}
	return *p.InternalStoryPackageCode
}

var ContentFields_IsInappropriateForSponsorship_DEFAULT bool

func (p *ContentFields) GetIsInappropriateForSponsorship() bool {
	if !p.IsSetIsInappropriateForSponsorship() {
		return ContentFields_IsInappropriateForSponsorship_DEFAULT
	}
	return *p.IsInappropriateForSponsorship
}

var ContentFields_IsPremoderated_DEFAULT bool

func (p *ContentFields) GetIsPremoderated() bool {
	if !p.IsSetIsPremoderated() {
		return ContentFields_IsPremoderated_DEFAULT
	}
	return *p.IsPremoderated
}

var ContentFields_LastModified_DEFAULT *CapiDateTime

func (p *ContentFields) GetLastModified() *CapiDateTime {
	if !p.IsSetLastModified() {
		return ContentFields_LastModified_DEFAULT
	}
	return p.LastModified
}

var ContentFields_LiveBloggingNow_DEFAULT bool

func (p *ContentFields) GetLiveBloggingNow() bool {
	if !p.IsSetLiveBloggingNow() {
		return ContentFields_LiveBloggingNow_DEFAULT
	}
	return *p.LiveBloggingNow
}

var ContentFields_NewspaperEditionDate__DEFAULT *CapiDateTime

func (p *ContentFields) GetNewspaperEditionDate_() *CapiDateTime {
	if !p.IsSetNewspaperEditionDate_() {
		return ContentFields_NewspaperEditionDate__DEFAULT
	}
	return p.NewspaperEditionDate_
}

var ContentFields_ProductionOffice_DEFAULT Office

func (p *ContentFields) GetProductionOffice() Office {
	if !p.IsSetProductionOffice() {
		return ContentFields_ProductionOffice_DEFAULT
	}
	return *p.ProductionOffice
}

var ContentFields_Publication_DEFAULT string

func (p *ContentFields) GetPublication() string {
	if !p.IsSetPublication() {
		return ContentFields_Publication_DEFAULT
	}
	return *p.Publication
}

var ContentFields_ScheduledPublicationDate_DEFAULT *CapiDateTime

func (p *ContentFields) GetScheduledPublicationDate() *CapiDateTime {
	if !p.IsSetScheduledPublicationDate() {
		return ContentFields_ScheduledPublicationDate_DEFAULT
	}
	return p.ScheduledPublicationDate
}

var ContentFields_SecureThumbnail_DEFAULT string

func (p *ContentFields) GetSecureThumbnail() string {
	if !p.IsSetSecureThumbnail() {
		return ContentFields_SecureThumbnail_DEFAULT
	}
	return *p.SecureThumbnail
}

var ContentFields_ShortUrl_DEFAULT string

func (p *ContentFields) GetShortUrl() string {
	if !p.IsSetShortUrl() {
		return ContentFields_ShortUrl_DEFAULT
	}
	return *p.ShortUrl
}

var ContentFields_ShouldHideAdverts_DEFAULT bool

func (p *ContentFields) GetShouldHideAdverts() bool {
	if !p.IsSetShouldHideAdverts() {
		return ContentFields_ShouldHideAdverts_DEFAULT
	}
	return *p.ShouldHideAdverts
}

var ContentFields_ShowInRelatedContent_DEFAULT bool

func (p *ContentFields) GetShowInRelatedContent() bool {
	if !p.IsSetShowInRelatedContent() {
		return ContentFields_ShowInRelatedContent_DEFAULT
	}
	return *p.ShowInRelatedContent
}

var ContentFields_Thumbnail_DEFAULT string

func (p *ContentFields) GetThumbnail() string {
	if !p.IsSetThumbnail() {
		return ContentFields_Thumbnail_DEFAULT
	}
	return *p.Thumbnail
}

var ContentFields_LegallySensitive_DEFAULT bool

func (p *ContentFields) GetLegallySensitive() bool {
	if !p.IsSetLegallySensitive() {
		return ContentFields_LegallySensitive_DEFAULT
	}
	return *p.LegallySensitive
}

var ContentFields_AllowUgc_DEFAULT bool

func (p *ContentFields) GetAllowUgc() bool {
	if !p.IsSetAllowUgc() {
		return ContentFields_AllowUgc_DEFAULT
	}
	return *p.AllowUgc
}

var ContentFields_Sensitive_DEFAULT bool

func (p *ContentFields) GetSensitive() bool {
	if !p.IsSetSensitive() {
		return ContentFields_Sensitive_DEFAULT
	}
	return *p.Sensitive
}

var ContentFields_Lang_DEFAULT string

func (p *ContentFields) GetLang() string {
	if !p.IsSetLang() {
		return ContentFields_Lang_DEFAULT
	}
	return *p.Lang
}

var ContentFields_InternalRevision_DEFAULT int32

func (p *ContentFields) GetInternalRevision() int32 {
	if !p.IsSetInternalRevision() {
		return ContentFields_InternalRevision_DEFAULT
	}
	return *p.InternalRevision
}

var ContentFields_InternalContentCode_DEFAULT int32

func (p *ContentFields) GetInternalContentCode() int32 {
	if !p.IsSetInternalContentCode() {
		return ContentFields_InternalContentCode_DEFAULT
	}
	return *p.InternalContentCode
}

var ContentFields_IsLive_DEFAULT bool

func (p *ContentFields) GetIsLive() bool {
	if !p.IsSetIsLive() {
		return ContentFields_IsLive_DEFAULT
	}
	return *p.IsLive
}

var ContentFields_InternalShortId_DEFAULT string

func (p *ContentFields) GetInternalShortId() string {
	if !p.IsSetInternalShortId() {
		return ContentFields_InternalShortId_DEFAULT
	}
	return *p.InternalShortId
}
func (p *ContentFields) IsSetHeadline() bool {
	return p.Headline != nil
}

func (p *ContentFields) IsSetStandfirst() bool {
	return p.Standfirst != nil
}

func (p *ContentFields) IsSetTrailText() bool {
	return p.TrailText != nil
}

func (p *ContentFields) IsSetByline() bool {
	return p.Byline != nil
}

func (p *ContentFields) IsSetMain() bool {
	return p.Main != nil
}

func (p *ContentFields) IsSetBody() bool {
	return p.Body != nil
}

func (p *ContentFields) IsSetNewspaperPageNumber_() bool {
	return p.NewspaperPageNumber_ != nil
}

func (p *ContentFields) IsSetStarRating() bool {
	return p.StarRating != nil
}

func (p *ContentFields) IsSetContributorBio() bool {
	return p.ContributorBio != nil
}

func (p *ContentFields) IsSetMembershipAccess() bool {
	return p.MembershipAccess != nil
}

func (p *ContentFields) IsSetWordcount() bool {
	return p.Wordcount != nil
}

func (p *ContentFields) IsSetCommentCloseDate() bool {
	return p.CommentCloseDate != nil
}

func (p *ContentFields) IsSetCommentable() bool {
	return p.Commentable != nil
}

func (p *ContentFields) IsSetCreationDate() bool {
	return p.CreationDate != nil
}

func (p *ContentFields) IsSetDisplayHint() bool {
	return p.DisplayHint != nil
}

func (p *ContentFields) IsSetFirstPublicationDate() bool {
	return p.FirstPublicationDate != nil
}

func (p *ContentFields) IsSetHasStoryPackage() bool {
	return p.HasStoryPackage != nil
}

func (p *ContentFields) IsSetInternalComposerCode() bool {
	return p.InternalComposerCode != nil
}

func (p *ContentFields) IsSetInternalOctopusCode() bool {
	return p.InternalOctopusCode != nil
}

func (p *ContentFields) IsSetInternalPageCode() bool {
	return p.InternalPageCode != nil
}

func (p *ContentFields) IsSetInternalStoryPackageCode() bool {
	return p.InternalStoryPackageCode != nil
}

func (p *ContentFields) IsSetIsInappropriateForSponsorship() bool {
	return p.IsInappropriateForSponsorship != nil
}

func (p *ContentFields) IsSetIsPremoderated() bool {
	return p.IsPremoderated != nil
}

func (p *ContentFields) IsSetLastModified() bool {
	return p.LastModified != nil
}

func (p *ContentFields) IsSetLiveBloggingNow() bool {
	return p.LiveBloggingNow != nil
}

func (p *ContentFields) IsSetNewspaperEditionDate_() bool {
	return p.NewspaperEditionDate_ != nil
}

func (p *ContentFields) IsSetProductionOffice() bool {
	return p.ProductionOffice != nil
}

func (p *ContentFields) IsSetPublication() bool {
	return p.Publication != nil
}

func (p *ContentFields) IsSetScheduledPublicationDate() bool {
	return p.ScheduledPublicationDate != nil
}

func (p *ContentFields) IsSetSecureThumbnail() bool {
	return p.SecureThumbnail != nil
}

func (p *ContentFields) IsSetShortUrl() bool {
	return p.ShortUrl != nil
}

func (p *ContentFields) IsSetShouldHideAdverts() bool {
	return p.ShouldHideAdverts != nil
}

func (p *ContentFields) IsSetShowInRelatedContent() bool {
	return p.ShowInRelatedContent != nil
}

func (p *ContentFields) IsSetThumbnail() bool {
	return p.Thumbnail != nil
}

func (p *ContentFields) IsSetLegallySensitive() bool {
	return p.LegallySensitive != nil
}

func (p *ContentFields) IsSetAllowUgc() bool {
	return p.AllowUgc != nil
}

func (p *ContentFields) IsSetSensitive() bool {
	return p.Sensitive != nil
}

func (p *ContentFields) IsSetLang() bool {
	return p.Lang != nil
}

func (p *ContentFields) IsSetInternalRevision() bool {
	return p.InternalRevision != nil
}

func (p *ContentFields) IsSetInternalContentCode() bool {
	return p.InternalContentCode != nil
}

func (p *ContentFields) IsSetIsLive() bool {
	return p.IsLive != nil
}

func (p *ContentFields) IsSetInternalShortId() bool {
	return p.InternalShortId != nil
}

func (p *ContentFields) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.readField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.readField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.readField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.readField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.readField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.readField41(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.readField42(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentFields) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Headline = &v
	}
	return nil
}

func (p *ContentFields) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Standfirst = &v
	}
	return nil
}

func (p *ContentFields) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TrailText = &v
	}
	return nil
}

func (p *ContentFields) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Byline = &v
	}
	return nil
}

func (p *ContentFields) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Main = &v
	}
	return nil
}

func (p *ContentFields) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Body = &v
	}
	return nil
}

func (p *ContentFields) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.NewspaperPageNumber_ = &v
	}
	return nil
}

func (p *ContentFields) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StarRating = &v
	}
	return nil
}

func (p *ContentFields) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ContributorBio = &v
	}
	return nil
}

func (p *ContentFields) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := MembershipTier(v)
		p.MembershipAccess = &temp
	}
	return nil
}

func (p *ContentFields) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Wordcount = &v
	}
	return nil
}

func (p *ContentFields) readField12(iprot thrift.TProtocol) error {
	p.CommentCloseDate = &CapiDateTime{}
	if err := p.CommentCloseDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommentCloseDate), err)
	}
	return nil
}

func (p *ContentFields) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Commentable = &v
	}
	return nil
}

func (p *ContentFields) readField14(iprot thrift.TProtocol) error {
	p.CreationDate = &CapiDateTime{}
	if err := p.CreationDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreationDate), err)
	}
	return nil
}

func (p *ContentFields) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.DisplayHint = &v
	}
	return nil
}

func (p *ContentFields) readField16(iprot thrift.TProtocol) error {
	p.FirstPublicationDate = &CapiDateTime{}
	if err := p.FirstPublicationDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FirstPublicationDate), err)
	}
	return nil
}

func (p *ContentFields) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.HasStoryPackage = &v
	}
	return nil
}

func (p *ContentFields) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.InternalComposerCode = &v
	}
	return nil
}

func (p *ContentFields) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.InternalOctopusCode = &v
	}
	return nil
}

func (p *ContentFields) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.InternalPageCode = &v
	}
	return nil
}

func (p *ContentFields) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.InternalStoryPackageCode = &v
	}
	return nil
}

func (p *ContentFields) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.IsInappropriateForSponsorship = &v
	}
	return nil
}

func (p *ContentFields) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.IsPremoderated = &v
	}
	return nil
}

func (p *ContentFields) readField24(iprot thrift.TProtocol) error {
	p.LastModified = &CapiDateTime{}
	if err := p.LastModified.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastModified), err)
	}
	return nil
}

func (p *ContentFields) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.LiveBloggingNow = &v
	}
	return nil
}

func (p *ContentFields) readField26(iprot thrift.TProtocol) error {
	p.NewspaperEditionDate_ = &CapiDateTime{}
	if err := p.NewspaperEditionDate_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewspaperEditionDate_), err)
	}
	return nil
}

func (p *ContentFields) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		temp := Office(v)
		p.ProductionOffice = &temp
	}
	return nil
}

func (p *ContentFields) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.Publication = &v
	}
	return nil
}

func (p *ContentFields) readField29(iprot thrift.TProtocol) error {
	p.ScheduledPublicationDate = &CapiDateTime{}
	if err := p.ScheduledPublicationDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScheduledPublicationDate), err)
	}
	return nil
}

func (p *ContentFields) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.SecureThumbnail = &v
	}
	return nil
}

func (p *ContentFields) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.ShortUrl = &v
	}
	return nil
}

func (p *ContentFields) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.ShouldHideAdverts = &v
	}
	return nil
}

func (p *ContentFields) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.ShowInRelatedContent = &v
	}
	return nil
}

func (p *ContentFields) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.Thumbnail = &v
	}
	return nil
}

func (p *ContentFields) readField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.LegallySensitive = &v
	}
	return nil
}

func (p *ContentFields) readField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.AllowUgc = &v
	}
	return nil
}

func (p *ContentFields) readField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.Sensitive = &v
	}
	return nil
}

func (p *ContentFields) readField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.Lang = &v
	}
	return nil
}

func (p *ContentFields) readField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.InternalRevision = &v
	}
	return nil
}

func (p *ContentFields) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.InternalContentCode = &v
	}
	return nil
}

func (p *ContentFields) readField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.IsLive = &v
	}
	return nil
}

func (p *ContentFields) readField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.InternalShortId = &v
	}
	return nil
}

func (p *ContentFields) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentFields"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := p.writeField38(oprot); err != nil {
		return err
	}
	if err := p.writeField39(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := p.writeField41(oprot); err != nil {
		return err
	}
	if err := p.writeField42(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentFields) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeadline() {
		if err := oprot.WriteFieldBegin("headline", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:headline: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Headline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headline (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:headline: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStandfirst() {
		if err := oprot.WriteFieldBegin("standfirst", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:standfirst: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Standfirst)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.standfirst (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:standfirst: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrailText() {
		if err := oprot.WriteFieldBegin("trailText", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trailText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TrailText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.trailText (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trailText: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetByline() {
		if err := oprot.WriteFieldBegin("byline", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:byline: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Byline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byline (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:byline: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMain() {
		if err := oprot.WriteFieldBegin("main", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:main: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Main)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.main (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:main: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("body", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:body: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Body)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.body (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:body: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewspaperPageNumber_() {
		if err := oprot.WriteFieldBegin("newspaperPageNumber", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:newspaperPageNumber: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NewspaperPageNumber_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.newspaperPageNumber (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:newspaperPageNumber: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStarRating() {
		if err := oprot.WriteFieldBegin("starRating", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:starRating: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StarRating)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.starRating (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:starRating: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetContributorBio() {
		if err := oprot.WriteFieldBegin("contributorBio", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:contributorBio: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContributorBio)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contributorBio (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:contributorBio: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMembershipAccess() {
		if err := oprot.WriteFieldBegin("membershipAccess", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:membershipAccess: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MembershipAccess)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.membershipAccess (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:membershipAccess: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWordcount() {
		if err := oprot.WriteFieldBegin("wordcount", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:wordcount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Wordcount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.wordcount (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:wordcount: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentCloseDate() {
		if err := oprot.WriteFieldBegin("commentCloseDate", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:commentCloseDate: ", p), err)
		}
		if err := p.CommentCloseDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommentCloseDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:commentCloseDate: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommentable() {
		if err := oprot.WriteFieldBegin("commentable", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:commentable: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Commentable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.commentable (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:commentable: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationDate() {
		if err := oprot.WriteFieldBegin("creationDate", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:creationDate: ", p), err)
		}
		if err := p.CreationDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreationDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:creationDate: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayHint() {
		if err := oprot.WriteFieldBegin("displayHint", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:displayHint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DisplayHint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.displayHint (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:displayHint: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstPublicationDate() {
		if err := oprot.WriteFieldBegin("firstPublicationDate", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:firstPublicationDate: ", p), err)
		}
		if err := p.FirstPublicationDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FirstPublicationDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:firstPublicationDate: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasStoryPackage() {
		if err := oprot.WriteFieldBegin("hasStoryPackage", thrift.BOOL, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:hasStoryPackage: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.HasStoryPackage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hasStoryPackage (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:hasStoryPackage: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalComposerCode() {
		if err := oprot.WriteFieldBegin("internalComposerCode", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:internalComposerCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InternalComposerCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalComposerCode (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:internalComposerCode: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalOctopusCode() {
		if err := oprot.WriteFieldBegin("internalOctopusCode", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:internalOctopusCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InternalOctopusCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalOctopusCode (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:internalOctopusCode: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalPageCode() {
		if err := oprot.WriteFieldBegin("internalPageCode", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:internalPageCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.InternalPageCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalPageCode (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:internalPageCode: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalStoryPackageCode() {
		if err := oprot.WriteFieldBegin("internalStoryPackageCode", thrift.I32, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:internalStoryPackageCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.InternalStoryPackageCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalStoryPackageCode (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:internalStoryPackageCode: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInappropriateForSponsorship() {
		if err := oprot.WriteFieldBegin("isInappropriateForSponsorship", thrift.BOOL, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:isInappropriateForSponsorship: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsInappropriateForSponsorship)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isInappropriateForSponsorship (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:isInappropriateForSponsorship: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsPremoderated() {
		if err := oprot.WriteFieldBegin("isPremoderated", thrift.BOOL, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:isPremoderated: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsPremoderated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isPremoderated (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:isPremoderated: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastModified() {
		if err := oprot.WriteFieldBegin("lastModified", thrift.STRUCT, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:lastModified: ", p), err)
		}
		if err := p.LastModified.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastModified), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:lastModified: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetLiveBloggingNow() {
		if err := oprot.WriteFieldBegin("liveBloggingNow", thrift.BOOL, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:liveBloggingNow: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.LiveBloggingNow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.liveBloggingNow (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:liveBloggingNow: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewspaperEditionDate_() {
		if err := oprot.WriteFieldBegin("newspaperEditionDate", thrift.STRUCT, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:newspaperEditionDate: ", p), err)
		}
		if err := p.NewspaperEditionDate_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewspaperEditionDate_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:newspaperEditionDate: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetProductionOffice() {
		if err := oprot.WriteFieldBegin("productionOffice", thrift.I32, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:productionOffice: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ProductionOffice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.productionOffice (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:productionOffice: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublication() {
		if err := oprot.WriteFieldBegin("publication", thrift.STRING, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:publication: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Publication)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.publication (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:publication: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduledPublicationDate() {
		if err := oprot.WriteFieldBegin("scheduledPublicationDate", thrift.STRUCT, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:scheduledPublicationDate: ", p), err)
		}
		if err := p.ScheduledPublicationDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScheduledPublicationDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:scheduledPublicationDate: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecureThumbnail() {
		if err := oprot.WriteFieldBegin("secureThumbnail", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:secureThumbnail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SecureThumbnail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secureThumbnail (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:secureThumbnail: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortUrl() {
		if err := oprot.WriteFieldBegin("shortUrl", thrift.STRING, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:shortUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShortUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shortUrl (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:shortUrl: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetShouldHideAdverts() {
		if err := oprot.WriteFieldBegin("shouldHideAdverts", thrift.BOOL, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:shouldHideAdverts: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShouldHideAdverts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shouldHideAdverts (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:shouldHideAdverts: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowInRelatedContent() {
		if err := oprot.WriteFieldBegin("showInRelatedContent", thrift.BOOL, 33); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:showInRelatedContent: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowInRelatedContent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showInRelatedContent (33) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 33:showInRelatedContent: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbnail() {
		if err := oprot.WriteFieldBegin("thumbnail", thrift.STRING, 34); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:thumbnail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Thumbnail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.thumbnail (34) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 34:thumbnail: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetLegallySensitive() {
		if err := oprot.WriteFieldBegin("legallySensitive", thrift.BOOL, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:legallySensitive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.LegallySensitive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.legallySensitive (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:legallySensitive: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowUgc() {
		if err := oprot.WriteFieldBegin("allowUgc", thrift.BOOL, 36); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:allowUgc: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AllowUgc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.allowUgc (36) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 36:allowUgc: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetSensitive() {
		if err := oprot.WriteFieldBegin("sensitive", thrift.BOOL, 37); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:sensitive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Sensitive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sensitive (37) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 37:sensitive: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField38(oprot thrift.TProtocol) (err error) {
	if p.IsSetLang() {
		if err := oprot.WriteFieldBegin("lang", thrift.STRING, 38); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:lang: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Lang)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lang (38) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 38:lang: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField39(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalRevision() {
		if err := oprot.WriteFieldBegin("internalRevision", thrift.I32, 39); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:internalRevision: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.InternalRevision)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalRevision (39) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 39:internalRevision: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalContentCode() {
		if err := oprot.WriteFieldBegin("internalContentCode", thrift.I32, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:internalContentCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.InternalContentCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalContentCode (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:internalContentCode: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsLive() {
		if err := oprot.WriteFieldBegin("isLive", thrift.BOOL, 41); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:isLive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsLive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isLive (41) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 41:isLive: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalShortId() {
		if err := oprot.WriteFieldBegin("internalShortId", thrift.STRING, 42); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:internalShortId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InternalShortId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.internalShortId (42) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 42:internalShortId: ", p), err)
		}
	}
	return err
}

func (p *ContentFields) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentFields(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type Reference struct {
	ID   string `thrift:"id,1,required" json:"id"`
	Type string `thrift:"type,2,required" json:"type"`
}

func NewReference() *Reference {
	return &Reference{}
}

func (p *Reference) GetID() string {
	return p.ID
}

func (p *Reference) GetType() string {
	return p.Type
}
func (p *Reference) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetType = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *Reference) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Reference) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Reference) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Reference"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Reference) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Reference) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Reference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reference(%+v)", *p)
}

// Attributes:
//  - Main
//  - Sub
type PodcastCategory struct {
	Main string  `thrift:"main,1,required" json:"main"`
	Sub  *string `thrift:"sub,2" json:"sub,omitempty"`
}

func NewPodcastCategory() *PodcastCategory {
	return &PodcastCategory{}
}

func (p *PodcastCategory) GetMain() string {
	return p.Main
}

var PodcastCategory_Sub_DEFAULT string

func (p *PodcastCategory) GetSub() string {
	if !p.IsSetSub() {
		return PodcastCategory_Sub_DEFAULT
	}
	return *p.Sub
}
func (p *PodcastCategory) IsSetSub() bool {
	return p.Sub != nil
}

func (p *PodcastCategory) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMain bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMain = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMain {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Main is not set"))
	}
	return nil
}

func (p *PodcastCategory) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Main = v
	}
	return nil
}

func (p *PodcastCategory) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sub = &v
	}
	return nil
}

func (p *PodcastCategory) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PodcastCategory"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PodcastCategory) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("main", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:main: ", p), err)
	}
	if err := oprot.WriteString(string(p.Main)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.main (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:main: ", p), err)
	}
	return err
}

func (p *PodcastCategory) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSub() {
		if err := oprot.WriteFieldBegin("sub", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sub)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sub (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub: ", p), err)
		}
	}
	return err
}

func (p *PodcastCategory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodcastCategory(%+v)", *p)
}

// Attributes:
//  - LinkUrl
//  - Copyright
//  - Author
//  - SubscriptionUrl
//  - Explicit
//  - Image
//  - Categories
type Podcast struct {
	LinkUrl         string             `thrift:"linkUrl,1,required" json:"linkUrl"`
	Copyright       string             `thrift:"copyright,2,required" json:"copyright"`
	Author          string             `thrift:"author,3,required" json:"author"`
	SubscriptionUrl *string            `thrift:"subscriptionUrl,4" json:"subscriptionUrl,omitempty"`
	Explicit        bool               `thrift:"explicit,5,required" json:"explicit"`
	Image           *string            `thrift:"image,6" json:"image,omitempty"`
	Categories      []*PodcastCategory `thrift:"categories,7" json:"categories,omitempty"`
}

func NewPodcast() *Podcast {
	return &Podcast{}
}

func (p *Podcast) GetLinkUrl() string {
	return p.LinkUrl
}

func (p *Podcast) GetCopyright() string {
	return p.Copyright
}

func (p *Podcast) GetAuthor() string {
	return p.Author
}

var Podcast_SubscriptionUrl_DEFAULT string

func (p *Podcast) GetSubscriptionUrl() string {
	if !p.IsSetSubscriptionUrl() {
		return Podcast_SubscriptionUrl_DEFAULT
	}
	return *p.SubscriptionUrl
}

func (p *Podcast) GetExplicit() bool {
	return p.Explicit
}

var Podcast_Image_DEFAULT string

func (p *Podcast) GetImage() string {
	if !p.IsSetImage() {
		return Podcast_Image_DEFAULT
	}
	return *p.Image
}

var Podcast_Categories_DEFAULT []*PodcastCategory

func (p *Podcast) GetCategories() []*PodcastCategory {
	return p.Categories
}
func (p *Podcast) IsSetSubscriptionUrl() bool {
	return p.SubscriptionUrl != nil
}

func (p *Podcast) IsSetImage() bool {
	return p.Image != nil
}

func (p *Podcast) IsSetCategories() bool {
	return p.Categories != nil
}

func (p *Podcast) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetLinkUrl bool = false
	var issetCopyright bool = false
	var issetAuthor bool = false
	var issetExplicit bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetLinkUrl = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetCopyright = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAuthor = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetExplicit = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetLinkUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LinkUrl is not set"))
	}
	if !issetCopyright {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Copyright is not set"))
	}
	if !issetAuthor {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Author is not set"))
	}
	if !issetExplicit {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Explicit is not set"))
	}
	return nil
}

func (p *Podcast) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LinkUrl = v
	}
	return nil
}

func (p *Podcast) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Copyright = v
	}
	return nil
}

func (p *Podcast) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Author = v
	}
	return nil
}

func (p *Podcast) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SubscriptionUrl = &v
	}
	return nil
}

func (p *Podcast) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Explicit = v
	}
	return nil
}

func (p *Podcast) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Image = &v
	}
	return nil
}

func (p *Podcast) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PodcastCategory, 0, size)
	p.Categories = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &PodcastCategory{}
		if err := _elem13.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
		}
		p.Categories = append(p.Categories, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Podcast) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Podcast"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Podcast) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:linkUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkUrl (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:linkUrl: ", p), err)
	}
	return err
}

func (p *Podcast) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:copyright: ", p), err)
	}
	if err := oprot.WriteString(string(p.Copyright)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.copyright (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:copyright: ", p), err)
	}
	return err
}

func (p *Podcast) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("author", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:author: ", p), err)
	}
	if err := oprot.WriteString(string(p.Author)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.author (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:author: ", p), err)
	}
	return err
}

func (p *Podcast) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubscriptionUrl() {
		if err := oprot.WriteFieldBegin("subscriptionUrl", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subscriptionUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SubscriptionUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subscriptionUrl (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subscriptionUrl: ", p), err)
		}
	}
	return err
}

func (p *Podcast) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("explicit", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:explicit: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Explicit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.explicit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:explicit: ", p), err)
	}
	return err
}

func (p *Podcast) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetImage() {
		if err := oprot.WriteFieldBegin("image", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:image: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Image)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.image (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:image: ", p), err)
		}
	}
	return err
}

func (p *Podcast) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategories() {
		if err := oprot.WriteFieldBegin("categories", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:categories: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Categories)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Categories {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:categories: ", p), err)
		}
	}
	return err
}

func (p *Podcast) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Podcast(%+v)", *p)
}

// Attributes:
//  - PublishedSince
//  - ValidEditions
type SponsorshipTargeting struct {
	PublishedSince *CapiDateTime `thrift:"publishedSince,1" json:"publishedSince,omitempty"`
	ValidEditions  []string      `thrift:"validEditions,2" json:"validEditions,omitempty"`
}

func NewSponsorshipTargeting() *SponsorshipTargeting {
	return &SponsorshipTargeting{}
}

var SponsorshipTargeting_PublishedSince_DEFAULT *CapiDateTime

func (p *SponsorshipTargeting) GetPublishedSince() *CapiDateTime {
	if !p.IsSetPublishedSince() {
		return SponsorshipTargeting_PublishedSince_DEFAULT
	}
	return p.PublishedSince
}

var SponsorshipTargeting_ValidEditions_DEFAULT []string

func (p *SponsorshipTargeting) GetValidEditions() []string {
	return p.ValidEditions
}
func (p *SponsorshipTargeting) IsSetPublishedSince() bool {
	return p.PublishedSince != nil
}

func (p *SponsorshipTargeting) IsSetValidEditions() bool {
	return p.ValidEditions != nil
}

func (p *SponsorshipTargeting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SponsorshipTargeting) readField1(iprot thrift.TProtocol) error {
	p.PublishedSince = &CapiDateTime{}
	if err := p.PublishedSince.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublishedSince), err)
	}
	return nil
}

func (p *SponsorshipTargeting) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ValidEditions = tSlice
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.ValidEditions = append(p.ValidEditions, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SponsorshipTargeting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SponsorshipTargeting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SponsorshipTargeting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishedSince() {
		if err := oprot.WriteFieldBegin("publishedSince", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:publishedSince: ", p), err)
		}
		if err := p.PublishedSince.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublishedSince), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:publishedSince: ", p), err)
		}
	}
	return err
}

func (p *SponsorshipTargeting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValidEditions() {
		if err := oprot.WriteFieldBegin("validEditions", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validEditions: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ValidEditions)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ValidEditions {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validEditions: ", p), err)
		}
	}
	return err
}

func (p *SponsorshipTargeting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SponsorshipTargeting(%+v)", *p)
}

// Attributes:
//  - SponsorshipType
//  - SponsorName
//  - SponsorLogo
//  - SponsorLink
//  - Targeting
//  - AboutLink
type Sponsorship struct {
	SponsorshipType SponsorshipType       `thrift:"sponsorshipType,1,required" json:"sponsorshipType"`
	SponsorName     string                `thrift:"sponsorName,2,required" json:"sponsorName"`
	SponsorLogo     string                `thrift:"sponsorLogo,3,required" json:"sponsorLogo"`
	SponsorLink     string                `thrift:"sponsorLink,4,required" json:"sponsorLink"`
	Targeting       *SponsorshipTargeting `thrift:"targeting,5" json:"targeting,omitempty"`
	AboutLink       *string               `thrift:"aboutLink,6" json:"aboutLink,omitempty"`
}

func NewSponsorship() *Sponsorship {
	return &Sponsorship{}
}

func (p *Sponsorship) GetSponsorshipType() SponsorshipType {
	return p.SponsorshipType
}

func (p *Sponsorship) GetSponsorName() string {
	return p.SponsorName
}

func (p *Sponsorship) GetSponsorLogo() string {
	return p.SponsorLogo
}

func (p *Sponsorship) GetSponsorLink() string {
	return p.SponsorLink
}

var Sponsorship_Targeting_DEFAULT *SponsorshipTargeting

func (p *Sponsorship) GetTargeting() *SponsorshipTargeting {
	if !p.IsSetTargeting() {
		return Sponsorship_Targeting_DEFAULT
	}
	return p.Targeting
}

var Sponsorship_AboutLink_DEFAULT string

func (p *Sponsorship) GetAboutLink() string {
	if !p.IsSetAboutLink() {
		return Sponsorship_AboutLink_DEFAULT
	}
	return *p.AboutLink
}
func (p *Sponsorship) IsSetTargeting() bool {
	return p.Targeting != nil
}

func (p *Sponsorship) IsSetAboutLink() bool {
	return p.AboutLink != nil
}

func (p *Sponsorship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSponsorshipType bool = false
	var issetSponsorName bool = false
	var issetSponsorLogo bool = false
	var issetSponsorLink bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetSponsorshipType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetSponsorName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSponsorLogo = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetSponsorLink = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSponsorshipType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SponsorshipType is not set"))
	}
	if !issetSponsorName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SponsorName is not set"))
	}
	if !issetSponsorLogo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SponsorLogo is not set"))
	}
	if !issetSponsorLink {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SponsorLink is not set"))
	}
	return nil
}

func (p *Sponsorship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := SponsorshipType(v)
		p.SponsorshipType = temp
	}
	return nil
}

func (p *Sponsorship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SponsorName = v
	}
	return nil
}

func (p *Sponsorship) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SponsorLogo = v
	}
	return nil
}

func (p *Sponsorship) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SponsorLink = v
	}
	return nil
}

func (p *Sponsorship) readField5(iprot thrift.TProtocol) error {
	p.Targeting = &SponsorshipTargeting{}
	if err := p.Targeting.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Targeting), err)
	}
	return nil
}

func (p *Sponsorship) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AboutLink = &v
	}
	return nil
}

func (p *Sponsorship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Sponsorship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Sponsorship) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sponsorshipType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sponsorshipType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SponsorshipType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sponsorshipType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sponsorshipType: ", p), err)
	}
	return err
}

func (p *Sponsorship) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sponsorName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sponsorName: ", p), err)
	}
	if err := oprot.WriteString(string(p.SponsorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sponsorName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sponsorName: ", p), err)
	}
	return err
}

func (p *Sponsorship) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sponsorLogo", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sponsorLogo: ", p), err)
	}
	if err := oprot.WriteString(string(p.SponsorLogo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sponsorLogo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sponsorLogo: ", p), err)
	}
	return err
}

func (p *Sponsorship) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sponsorLink", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sponsorLink: ", p), err)
	}
	if err := oprot.WriteString(string(p.SponsorLink)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sponsorLink (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sponsorLink: ", p), err)
	}
	return err
}

func (p *Sponsorship) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargeting() {
		if err := oprot.WriteFieldBegin("targeting", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:targeting: ", p), err)
		}
		if err := p.Targeting.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Targeting), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:targeting: ", p), err)
		}
	}
	return err
}

func (p *Sponsorship) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAboutLink() {
		if err := oprot.WriteFieldBegin("aboutLink", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:aboutLink: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AboutLink)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.aboutLink (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:aboutLink: ", p), err)
		}
	}
	return err
}

func (p *Sponsorship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sponsorship(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - SectionId
//  - SectionName
//  - WebTitle
//  - WebUrl
//  - ApiUrl
//  - References
//  - Description: A tag *may* have a description field.
//
// Contributor tags never have a description field. They may
// instead have a 'bio' field.
//  - Bio: If this tag is a contributor then we *may* have a small bio
// for the contributor.
//
// This field is optional in all cases, even contributors are not
// guaranteed to have one.
//  - BylineImageUrl
//  - BylineLargeImageUrl: If this tag is a contributor then we *may* have a large byline
// picture for the contributor.
//  - Podcast
//  - FirstName
//  - LastName
//  - EmailAddress
//  - TwitterHandle
//  - ActiveSponsorships: A list of all the active sponsorships running against this tag
//  - PaidContentType
//  - PaidContentCampaignColour
type Tag struct {
	ID                        string         `thrift:"id,1,required" json:"id"`
	Type                      TagType        `thrift:"type,2,required" json:"type"`
	SectionId                 *string        `thrift:"sectionId,3" json:"sectionId,omitempty"`
	SectionName               *string        `thrift:"sectionName,4" json:"sectionName,omitempty"`
	WebTitle                  string         `thrift:"webTitle,5,required" json:"webTitle"`
	WebUrl                    string         `thrift:"webUrl,6,required" json:"webUrl"`
	ApiUrl                    string         `thrift:"apiUrl,7,required" json:"apiUrl"`
	References                []*Reference   `thrift:"references,8,required" json:"references"`
	Description               *string        `thrift:"description,9" json:"description,omitempty"`
	Bio                       *string        `thrift:"bio,10" json:"bio,omitempty"`
	BylineImageUrl            *string        `thrift:"bylineImageUrl,11" json:"bylineImageUrl,omitempty"`
	BylineLargeImageUrl       *string        `thrift:"bylineLargeImageUrl,12" json:"bylineLargeImageUrl,omitempty"`
	Podcast                   *Podcast       `thrift:"podcast,13" json:"podcast,omitempty"`
	FirstName                 *string        `thrift:"firstName,14" json:"firstName,omitempty"`
	LastName                  *string        `thrift:"lastName,15" json:"lastName,omitempty"`
	EmailAddress              *string        `thrift:"emailAddress,16" json:"emailAddress,omitempty"`
	TwitterHandle             *string        `thrift:"twitterHandle,17" json:"twitterHandle,omitempty"`
	ActiveSponsorships        []*Sponsorship `thrift:"activeSponsorships,18" json:"activeSponsorships,omitempty"`
	PaidContentType           *string        `thrift:"paidContentType,19" json:"paidContentType,omitempty"`
	PaidContentCampaignColour *string        `thrift:"paidContentCampaignColour,20" json:"paidContentCampaignColour,omitempty"`
}

func NewTag() *Tag {
	return &Tag{}
}

func (p *Tag) GetID() string {
	return p.ID
}

func (p *Tag) GetType() TagType {
	return p.Type
}

var Tag_SectionId_DEFAULT string

func (p *Tag) GetSectionId() string {
	if !p.IsSetSectionId() {
		return Tag_SectionId_DEFAULT
	}
	return *p.SectionId
}

var Tag_SectionName_DEFAULT string

func (p *Tag) GetSectionName() string {
	if !p.IsSetSectionName() {
		return Tag_SectionName_DEFAULT
	}
	return *p.SectionName
}

func (p *Tag) GetWebTitle() string {
	return p.WebTitle
}

func (p *Tag) GetWebUrl() string {
	return p.WebUrl
}

func (p *Tag) GetApiUrl() string {
	return p.ApiUrl
}

func (p *Tag) GetReferences() []*Reference {
	return p.References
}

var Tag_Description_DEFAULT string

func (p *Tag) GetDescription() string {
	if !p.IsSetDescription() {
		return Tag_Description_DEFAULT
	}
	return *p.Description
}

var Tag_Bio_DEFAULT string

func (p *Tag) GetBio() string {
	if !p.IsSetBio() {
		return Tag_Bio_DEFAULT
	}
	return *p.Bio
}

var Tag_BylineImageUrl_DEFAULT string

func (p *Tag) GetBylineImageUrl() string {
	if !p.IsSetBylineImageUrl() {
		return Tag_BylineImageUrl_DEFAULT
	}
	return *p.BylineImageUrl
}

var Tag_BylineLargeImageUrl_DEFAULT string

func (p *Tag) GetBylineLargeImageUrl() string {
	if !p.IsSetBylineLargeImageUrl() {
		return Tag_BylineLargeImageUrl_DEFAULT
	}
	return *p.BylineLargeImageUrl
}

var Tag_Podcast_DEFAULT *Podcast

func (p *Tag) GetPodcast() *Podcast {
	if !p.IsSetPodcast() {
		return Tag_Podcast_DEFAULT
	}
	return p.Podcast
}

var Tag_FirstName_DEFAULT string

func (p *Tag) GetFirstName() string {
	if !p.IsSetFirstName() {
		return Tag_FirstName_DEFAULT
	}
	return *p.FirstName
}

var Tag_LastName_DEFAULT string

func (p *Tag) GetLastName() string {
	if !p.IsSetLastName() {
		return Tag_LastName_DEFAULT
	}
	return *p.LastName
}

var Tag_EmailAddress_DEFAULT string

func (p *Tag) GetEmailAddress() string {
	if !p.IsSetEmailAddress() {
		return Tag_EmailAddress_DEFAULT
	}
	return *p.EmailAddress
}

var Tag_TwitterHandle_DEFAULT string

func (p *Tag) GetTwitterHandle() string {
	if !p.IsSetTwitterHandle() {
		return Tag_TwitterHandle_DEFAULT
	}
	return *p.TwitterHandle
}

var Tag_ActiveSponsorships_DEFAULT []*Sponsorship

func (p *Tag) GetActiveSponsorships() []*Sponsorship {
	return p.ActiveSponsorships
}

var Tag_PaidContentType_DEFAULT string

func (p *Tag) GetPaidContentType() string {
	if !p.IsSetPaidContentType() {
		return Tag_PaidContentType_DEFAULT
	}
	return *p.PaidContentType
}

var Tag_PaidContentCampaignColour_DEFAULT string

func (p *Tag) GetPaidContentCampaignColour() string {
	if !p.IsSetPaidContentCampaignColour() {
		return Tag_PaidContentCampaignColour_DEFAULT
	}
	return *p.PaidContentCampaignColour
}
func (p *Tag) IsSetSectionId() bool {
	return p.SectionId != nil
}

func (p *Tag) IsSetSectionName() bool {
	return p.SectionName != nil
}

func (p *Tag) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Tag) IsSetBio() bool {
	return p.Bio != nil
}

func (p *Tag) IsSetBylineImageUrl() bool {
	return p.BylineImageUrl != nil
}

func (p *Tag) IsSetBylineLargeImageUrl() bool {
	return p.BylineLargeImageUrl != nil
}

func (p *Tag) IsSetPodcast() bool {
	return p.Podcast != nil
}

func (p *Tag) IsSetFirstName() bool {
	return p.FirstName != nil
}

func (p *Tag) IsSetLastName() bool {
	return p.LastName != nil
}

func (p *Tag) IsSetEmailAddress() bool {
	return p.EmailAddress != nil
}

func (p *Tag) IsSetTwitterHandle() bool {
	return p.TwitterHandle != nil
}

func (p *Tag) IsSetActiveSponsorships() bool {
	return p.ActiveSponsorships != nil
}

func (p *Tag) IsSetPaidContentType() bool {
	return p.PaidContentType != nil
}

func (p *Tag) IsSetPaidContentCampaignColour() bool {
	return p.PaidContentCampaignColour != nil
}

func (p *Tag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetType bool = false
	var issetWebTitle bool = false
	var issetWebUrl bool = false
	var issetApiUrl bool = false
	var issetReferences bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetWebTitle = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetApiUrl = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetReferences = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetWebTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebTitle is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	if !issetApiUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApiUrl is not set"))
	}
	if !issetReferences {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field References is not set"))
	}
	return nil
}

func (p *Tag) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Tag) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TagType(v)
		p.Type = temp
	}
	return nil
}

func (p *Tag) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SectionId = &v
	}
	return nil
}

func (p *Tag) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SectionName = &v
	}
	return nil
}

func (p *Tag) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WebTitle = v
	}
	return nil
}

func (p *Tag) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *Tag) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *Tag) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Reference, 0, size)
	p.References = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &Reference{}
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.References = append(p.References, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Tag) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *Tag) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Bio = &v
	}
	return nil
}

func (p *Tag) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.BylineImageUrl = &v
	}
	return nil
}

func (p *Tag) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.BylineLargeImageUrl = &v
	}
	return nil
}

func (p *Tag) readField13(iprot thrift.TProtocol) error {
	p.Podcast = &Podcast{}
	if err := p.Podcast.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Podcast), err)
	}
	return nil
}

func (p *Tag) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.FirstName = &v
	}
	return nil
}

func (p *Tag) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.LastName = &v
	}
	return nil
}

func (p *Tag) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.EmailAddress = &v
	}
	return nil
}

func (p *Tag) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TwitterHandle = &v
	}
	return nil
}

func (p *Tag) readField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Sponsorship, 0, size)
	p.ActiveSponsorships = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &Sponsorship{}
		if err := _elem16.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.ActiveSponsorships = append(p.ActiveSponsorships, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Tag) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.PaidContentType = &v
	}
	return nil
}

func (p *Tag) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PaidContentCampaignColour = &v
	}
	return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tag"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Tag) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSectionId() {
		if err := oprot.WriteFieldBegin("sectionId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sectionId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SectionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sectionId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sectionId: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSectionName() {
		if err := oprot.WriteFieldBegin("sectionName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sectionName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SectionName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sectionName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sectionName: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webTitle", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webTitle (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webTitle: ", p), err)
	}
	return err
}

func (p *Tag) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:webUrl: ", p), err)
	}
	return err
}

func (p *Tag) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:apiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:apiUrl: ", p), err)
	}
	return err
}

func (p *Tag) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("references", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:references: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.References {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:references: ", p), err)
	}
	return err
}

func (p *Tag) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:description: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBio() {
		if err := oprot.WriteFieldBegin("bio", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:bio: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Bio)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bio (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:bio: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBylineImageUrl() {
		if err := oprot.WriteFieldBegin("bylineImageUrl", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:bylineImageUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BylineImageUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bylineImageUrl (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:bylineImageUrl: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBylineLargeImageUrl() {
		if err := oprot.WriteFieldBegin("bylineLargeImageUrl", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:bylineLargeImageUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BylineLargeImageUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bylineLargeImageUrl (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:bylineLargeImageUrl: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodcast() {
		if err := oprot.WriteFieldBegin("podcast", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:podcast: ", p), err)
		}
		if err := p.Podcast.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Podcast), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:podcast: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFirstName() {
		if err := oprot.WriteFieldBegin("firstName", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:firstName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FirstName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.firstName (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:firstName: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastName() {
		if err := oprot.WriteFieldBegin("lastName", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:lastName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LastName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastName (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:lastName: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmailAddress() {
		if err := oprot.WriteFieldBegin("emailAddress", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:emailAddress: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EmailAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emailAddress (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:emailAddress: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwitterHandle() {
		if err := oprot.WriteFieldBegin("twitterHandle", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:twitterHandle: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TwitterHandle)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.twitterHandle (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:twitterHandle: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveSponsorships() {
		if err := oprot.WriteFieldBegin("activeSponsorships", thrift.LIST, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:activeSponsorships: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActiveSponsorships)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ActiveSponsorships {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:activeSponsorships: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaidContentType() {
		if err := oprot.WriteFieldBegin("paidContentType", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:paidContentType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PaidContentType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.paidContentType (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:paidContentType: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaidContentCampaignColour() {
		if err := oprot.WriteFieldBegin("paidContentCampaignColour", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:paidContentCampaignColour: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PaidContentCampaignColour)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.paidContentCampaignColour (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:paidContentCampaignColour: ", p), err)
		}
	}
	return err
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

// Attributes:
//  - ID
//  - WebTitle
//  - WebUrl
//  - ApiUrl
//  - Code
type Edition struct {
	ID       string `thrift:"id,1,required" json:"id"`
	WebTitle string `thrift:"webTitle,2,required" json:"webTitle"`
	WebUrl   string `thrift:"webUrl,3,required" json:"webUrl"`
	ApiUrl   string `thrift:"apiUrl,4,required" json:"apiUrl"`
	Code     string `thrift:"code,5,required" json:"code"`
}

func NewEdition() *Edition {
	return &Edition{}
}

func (p *Edition) GetID() string {
	return p.ID
}

func (p *Edition) GetWebTitle() string {
	return p.WebTitle
}

func (p *Edition) GetWebUrl() string {
	return p.WebUrl
}

func (p *Edition) GetApiUrl() string {
	return p.ApiUrl
}

func (p *Edition) GetCode() string {
	return p.Code
}
func (p *Edition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetWebTitle bool = false
	var issetWebUrl bool = false
	var issetApiUrl bool = false
	var issetCode bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetWebTitle = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetApiUrl = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetCode = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetWebTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebTitle is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	if !issetApiUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApiUrl is not set"))
	}
	if !issetCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"))
	}
	return nil
}

func (p *Edition) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Edition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WebTitle = v
	}
	return nil
}

func (p *Edition) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *Edition) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *Edition) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Edition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Edition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Edition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Edition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webTitle", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:webTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webTitle (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:webTitle: ", p), err)
	}
	return err
}

func (p *Edition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:webUrl: ", p), err)
	}
	return err
}

func (p *Edition) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:apiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:apiUrl: ", p), err)
	}
	return err
}

func (p *Edition) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:code: ", p), err)
	}
	return err
}

func (p *Edition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Edition(%+v)", *p)
}

// Attributes:
//  - ID
//  - WebTitle
//  - WebUrl
//  - ApiUrl
//  - Editions
//  - ActiveSponsorships: A list of all the active sponsorships running against this section
type Section struct {
	ID                 string         `thrift:"id,1,required" json:"id"`
	WebTitle           string         `thrift:"webTitle,2,required" json:"webTitle"`
	WebUrl             string         `thrift:"webUrl,3,required" json:"webUrl"`
	ApiUrl             string         `thrift:"apiUrl,4,required" json:"apiUrl"`
	Editions           []*Edition     `thrift:"editions,5,required" json:"editions"`
	ActiveSponsorships []*Sponsorship `thrift:"activeSponsorships,6" json:"activeSponsorships,omitempty"`
}

func NewSection() *Section {
	return &Section{}
}

func (p *Section) GetID() string {
	return p.ID
}

func (p *Section) GetWebTitle() string {
	return p.WebTitle
}

func (p *Section) GetWebUrl() string {
	return p.WebUrl
}

func (p *Section) GetApiUrl() string {
	return p.ApiUrl
}

func (p *Section) GetEditions() []*Edition {
	return p.Editions
}

var Section_ActiveSponsorships_DEFAULT []*Sponsorship

func (p *Section) GetActiveSponsorships() []*Sponsorship {
	return p.ActiveSponsorships
}
func (p *Section) IsSetActiveSponsorships() bool {
	return p.ActiveSponsorships != nil
}

func (p *Section) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetWebTitle bool = false
	var issetWebUrl bool = false
	var issetApiUrl bool = false
	var issetEditions bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetWebTitle = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetApiUrl = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetEditions = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetWebTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebTitle is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	if !issetApiUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApiUrl is not set"))
	}
	if !issetEditions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Editions is not set"))
	}
	return nil
}

func (p *Section) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Section) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WebTitle = v
	}
	return nil
}

func (p *Section) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *Section) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *Section) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Edition, 0, size)
	p.Editions = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &Edition{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Editions = append(p.Editions, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Section) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Sponsorship, 0, size)
	p.ActiveSponsorships = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &Sponsorship{}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.ActiveSponsorships = append(p.ActiveSponsorships, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Section) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Section"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Section) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Section) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webTitle", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:webTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webTitle (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:webTitle: ", p), err)
	}
	return err
}

func (p *Section) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:webUrl: ", p), err)
	}
	return err
}

func (p *Section) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:apiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiUrl (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:apiUrl: ", p), err)
	}
	return err
}

func (p *Section) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("editions", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:editions: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Editions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Editions {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:editions: ", p), err)
	}
	return err
}

func (p *Section) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveSponsorships() {
		if err := oprot.WriteFieldBegin("activeSponsorships", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:activeSponsorships: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActiveSponsorships)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ActiveSponsorships {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:activeSponsorships: ", p), err)
		}
	}
	return err
}

func (p *Section) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Section(%+v)", *p)
}

// Attributes:
//  - Quizzes
//  - Viewpoints: Viewpoints are deprecated
//  - Media
//  - Explainers
type Atoms struct {
	Quizzes    []*contentatom.Atom `thrift:"quizzes,1" json:"quizzes,omitempty"`
	Viewpoints []*contentatom.Atom `thrift:"viewpoints,2" json:"viewpoints,omitempty"`
	Media      []*contentatom.Atom `thrift:"media,3" json:"media,omitempty"`
	Explainers []*contentatom.Atom `thrift:"explainers,4" json:"explainers,omitempty"`
}

func NewAtoms() *Atoms {
	return &Atoms{}
}

var Atoms_Quizzes_DEFAULT []*contentatom.Atom

func (p *Atoms) GetQuizzes() []*contentatom.Atom {
	return p.Quizzes
}

var Atoms_Viewpoints_DEFAULT []*contentatom.Atom

func (p *Atoms) GetViewpoints() []*contentatom.Atom {
	return p.Viewpoints
}

var Atoms_Media_DEFAULT []*contentatom.Atom

func (p *Atoms) GetMedia() []*contentatom.Atom {
	return p.Media
}

var Atoms_Explainers_DEFAULT []*contentatom.Atom

func (p *Atoms) GetExplainers() []*contentatom.Atom {
	return p.Explainers
}
func (p *Atoms) IsSetQuizzes() bool {
	return p.Quizzes != nil
}

func (p *Atoms) IsSetViewpoints() bool {
	return p.Viewpoints != nil
}

func (p *Atoms) IsSetMedia() bool {
	return p.Media != nil
}

func (p *Atoms) IsSetExplainers() bool {
	return p.Explainers != nil
}

func (p *Atoms) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Atoms) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Quizzes = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &contentatom.Atom{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Quizzes = append(p.Quizzes, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Atoms) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Viewpoints = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &contentatom.Atom{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.Viewpoints = append(p.Viewpoints, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Atoms) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Media = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &contentatom.Atom{}
		if err := _elem21.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
		}
		p.Media = append(p.Media, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Atoms) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Explainers = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &contentatom.Atom{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.Explainers = append(p.Explainers, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Atoms) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Atoms"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Atoms) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuizzes() {
		if err := oprot.WriteFieldBegin("quizzes", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:quizzes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Quizzes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Quizzes {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:quizzes: ", p), err)
		}
	}
	return err
}

func (p *Atoms) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewpoints() {
		if err := oprot.WriteFieldBegin("viewpoints", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:viewpoints: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Viewpoints)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Viewpoints {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:viewpoints: ", p), err)
		}
	}
	return err
}

func (p *Atoms) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMedia() {
		if err := oprot.WriteFieldBegin("media", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:media: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Media)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Media {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:media: ", p), err)
		}
	}
	return err
}

func (p *Atoms) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplainers() {
		if err := oprot.WriteFieldBegin("explainers", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:explainers: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Explainers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Explainers {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:explainers: ", p), err)
		}
	}
	return err
}

func (p *Atoms) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Atoms(%+v)", *p)
}

// Attributes:
//  - Videos
//  - Images
//  - Text
//  - Tweets
//  - Pullquotes
//  - Audio
//  - Interactives
//  - Witness
//  - Richlinks
//  - Membership
//  - Embeds
//  - Comments
//  - Instagram
//  - Vines
type ContentStats struct {
	Videos       int32 `thrift:"videos,1,required" json:"videos"`
	Images       int32 `thrift:"images,2,required" json:"images"`
	Text         int32 `thrift:"text,3,required" json:"text"`
	Tweets       int32 `thrift:"tweets,4,required" json:"tweets"`
	Pullquotes   int32 `thrift:"pullquotes,5,required" json:"pullquotes"`
	Audio        int32 `thrift:"audio,6,required" json:"audio"`
	Interactives int32 `thrift:"interactives,7,required" json:"interactives"`
	Witness      int32 `thrift:"witness,8,required" json:"witness"`
	Richlinks    int32 `thrift:"richlinks,9,required" json:"richlinks"`
	Membership   int32 `thrift:"membership,10,required" json:"membership"`
	Embeds       int32 `thrift:"embeds,11,required" json:"embeds"`
	Comments     int32 `thrift:"comments,12,required" json:"comments"`
	Instagram    int32 `thrift:"instagram,13,required" json:"instagram"`
	Vines        int32 `thrift:"vines,14,required" json:"vines"`
}

func NewContentStats() *ContentStats {
	return &ContentStats{}
}

func (p *ContentStats) GetVideos() int32 {
	return p.Videos
}

func (p *ContentStats) GetImages() int32 {
	return p.Images
}

func (p *ContentStats) GetText() int32 {
	return p.Text
}

func (p *ContentStats) GetTweets() int32 {
	return p.Tweets
}

func (p *ContentStats) GetPullquotes() int32 {
	return p.Pullquotes
}

func (p *ContentStats) GetAudio() int32 {
	return p.Audio
}

func (p *ContentStats) GetInteractives() int32 {
	return p.Interactives
}

func (p *ContentStats) GetWitness() int32 {
	return p.Witness
}

func (p *ContentStats) GetRichlinks() int32 {
	return p.Richlinks
}

func (p *ContentStats) GetMembership() int32 {
	return p.Membership
}

func (p *ContentStats) GetEmbeds() int32 {
	return p.Embeds
}

func (p *ContentStats) GetComments() int32 {
	return p.Comments
}

func (p *ContentStats) GetInstagram() int32 {
	return p.Instagram
}

func (p *ContentStats) GetVines() int32 {
	return p.Vines
}
func (p *ContentStats) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVideos bool = false
	var issetImages bool = false
	var issetText bool = false
	var issetTweets bool = false
	var issetPullquotes bool = false
	var issetAudio bool = false
	var issetInteractives bool = false
	var issetWitness bool = false
	var issetRichlinks bool = false
	var issetMembership bool = false
	var issetEmbeds bool = false
	var issetComments bool = false
	var issetInstagram bool = false
	var issetVines bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVideos = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetImages = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetText = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetTweets = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPullquotes = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetAudio = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetInteractives = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetWitness = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetRichlinks = true
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
			issetMembership = true
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
			issetEmbeds = true
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
			issetComments = true
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
			issetInstagram = true
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
			issetVines = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVideos {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Videos is not set"))
	}
	if !issetImages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Images is not set"))
	}
	if !issetText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Text is not set"))
	}
	if !issetTweets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tweets is not set"))
	}
	if !issetPullquotes {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pullquotes is not set"))
	}
	if !issetAudio {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Audio is not set"))
	}
	if !issetInteractives {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Interactives is not set"))
	}
	if !issetWitness {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Witness is not set"))
	}
	if !issetRichlinks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Richlinks is not set"))
	}
	if !issetMembership {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Membership is not set"))
	}
	if !issetEmbeds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Embeds is not set"))
	}
	if !issetComments {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Comments is not set"))
	}
	if !issetInstagram {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Instagram is not set"))
	}
	if !issetVines {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Vines is not set"))
	}
	return nil
}

func (p *ContentStats) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Videos = v
	}
	return nil
}

func (p *ContentStats) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Images = v
	}
	return nil
}

func (p *ContentStats) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *ContentStats) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Tweets = v
	}
	return nil
}

func (p *ContentStats) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Pullquotes = v
	}
	return nil
}

func (p *ContentStats) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Audio = v
	}
	return nil
}

func (p *ContentStats) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Interactives = v
	}
	return nil
}

func (p *ContentStats) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Witness = v
	}
	return nil
}

func (p *ContentStats) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Richlinks = v
	}
	return nil
}

func (p *ContentStats) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Membership = v
	}
	return nil
}

func (p *ContentStats) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Embeds = v
	}
	return nil
}

func (p *ContentStats) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Comments = v
	}
	return nil
}

func (p *ContentStats) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Instagram = v
	}
	return nil
}

func (p *ContentStats) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Vines = v
	}
	return nil
}

func (p *ContentStats) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("videos", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:videos: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Videos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.videos (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:videos: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("images", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:images: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Images)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.images (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:images: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tweets", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tweets: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Tweets)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tweets (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tweets: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pullquotes", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pullquotes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pullquotes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pullquotes (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pullquotes: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("audio", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:audio: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Audio)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.audio (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:audio: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interactives", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:interactives: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Interactives)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interactives (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:interactives: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("witness", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:witness: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Witness)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.witness (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:witness: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("richlinks", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:richlinks: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Richlinks)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.richlinks (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:richlinks: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("membership", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:membership: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Membership)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.membership (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:membership: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("embeds", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:embeds: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Embeds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.embeds (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:embeds: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comments", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:comments: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Comments)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comments (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:comments: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("instagram", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:instagram: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Instagram)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.instagram (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:instagram: ", p), err)
	}
	return err
}

func (p *ContentStats) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vines", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:vines: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Vines)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vines (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:vines: ", p), err)
	}
	return err
}

func (p *ContentStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentStats(%+v)", *p)
}

// Attributes:
//  - LastSeenByPorterAt
//  - RevisionSeenByPorter
//  - ContentSource
type Debug struct {
	LastSeenByPorterAt   *CapiDateTime `thrift:"lastSeenByPorterAt,1" json:"lastSeenByPorterAt,omitempty"`
	RevisionSeenByPorter *CapiDateTime `thrift:"revisionSeenByPorter,2" json:"revisionSeenByPorter,omitempty"`
	ContentSource        *string       `thrift:"contentSource,3" json:"contentSource,omitempty"`
}

func NewDebug() *Debug {
	return &Debug{}
}

var Debug_LastSeenByPorterAt_DEFAULT *CapiDateTime

func (p *Debug) GetLastSeenByPorterAt() *CapiDateTime {
	if !p.IsSetLastSeenByPorterAt() {
		return Debug_LastSeenByPorterAt_DEFAULT
	}
	return p.LastSeenByPorterAt
}

var Debug_RevisionSeenByPorter_DEFAULT *CapiDateTime

func (p *Debug) GetRevisionSeenByPorter() *CapiDateTime {
	if !p.IsSetRevisionSeenByPorter() {
		return Debug_RevisionSeenByPorter_DEFAULT
	}
	return p.RevisionSeenByPorter
}

var Debug_ContentSource_DEFAULT string

func (p *Debug) GetContentSource() string {
	if !p.IsSetContentSource() {
		return Debug_ContentSource_DEFAULT
	}
	return *p.ContentSource
}
func (p *Debug) IsSetLastSeenByPorterAt() bool {
	return p.LastSeenByPorterAt != nil
}

func (p *Debug) IsSetRevisionSeenByPorter() bool {
	return p.RevisionSeenByPorter != nil
}

func (p *Debug) IsSetContentSource() bool {
	return p.ContentSource != nil
}

func (p *Debug) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Debug) readField1(iprot thrift.TProtocol) error {
	p.LastSeenByPorterAt = &CapiDateTime{}
	if err := p.LastSeenByPorterAt.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastSeenByPorterAt), err)
	}
	return nil
}

func (p *Debug) readField2(iprot thrift.TProtocol) error {
	p.RevisionSeenByPorter = &CapiDateTime{}
	if err := p.RevisionSeenByPorter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RevisionSeenByPorter), err)
	}
	return nil
}

func (p *Debug) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ContentSource = &v
	}
	return nil
}

func (p *Debug) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Debug"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Debug) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSeenByPorterAt() {
		if err := oprot.WriteFieldBegin("lastSeenByPorterAt", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastSeenByPorterAt: ", p), err)
		}
		if err := p.LastSeenByPorterAt.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastSeenByPorterAt), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastSeenByPorterAt: ", p), err)
		}
	}
	return err
}

func (p *Debug) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevisionSeenByPorter() {
		if err := oprot.WriteFieldBegin("revisionSeenByPorter", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revisionSeenByPorter: ", p), err)
		}
		if err := p.RevisionSeenByPorter.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RevisionSeenByPorter), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revisionSeenByPorter: ", p), err)
		}
	}
	return err
}

func (p *Debug) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentSource() {
		if err := oprot.WriteFieldBegin("contentSource", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contentSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContentSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentSource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contentSource: ", p), err)
		}
	}
	return err
}

func (p *Debug) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Debug(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - SectionId
//  - SectionName
//  - WebPublicationDate
//  - WebTitle
//  - WebUrl
//  - ApiUrl
//  - Fields
//  - Tags
//  - Elements
//  - References
//  - IsExpired
//  - Blocks
//  - Rights
//  - Crossword
//  - Atoms
//  - Stats
//  - Section
//  - Debug
//  - IsGone
//  - IsHosted
type Content struct {
	ID                 string         `thrift:"id,1,required" json:"id"`
	Type               ContentType    `thrift:"type,2,required" json:"type"`
	SectionId          *string        `thrift:"sectionId,3" json:"sectionId,omitempty"`
	SectionName        *string        `thrift:"sectionName,4" json:"sectionName,omitempty"`
	WebPublicationDate *CapiDateTime  `thrift:"webPublicationDate,5" json:"webPublicationDate,omitempty"`
	WebTitle           string         `thrift:"webTitle,6,required" json:"webTitle"`
	WebUrl             string         `thrift:"webUrl,7,required" json:"webUrl"`
	ApiUrl             string         `thrift:"apiUrl,8,required" json:"apiUrl"`
	Fields             *ContentFields `thrift:"fields,9" json:"fields,omitempty"`
	Tags               []*Tag         `thrift:"tags,10,required" json:"tags"`
	Elements           []*Element     `thrift:"elements,11" json:"elements,omitempty"`
	References         []*Reference   `thrift:"references,12,required" json:"references"`
	IsExpired          *bool          `thrift:"isExpired,13" json:"isExpired,omitempty"`
	Blocks             *Blocks        `thrift:"blocks,14" json:"blocks,omitempty"`
	Rights             *Rights        `thrift:"rights,15" json:"rights,omitempty"`
	Crossword          *Crossword     `thrift:"crossword,16" json:"crossword,omitempty"`
	Atoms              *Atoms         `thrift:"atoms,17" json:"atoms,omitempty"`
	Stats              *ContentStats  `thrift:"stats,18" json:"stats,omitempty"`
	Section            *Section       `thrift:"section,19" json:"section,omitempty"`
	Debug              *Debug         `thrift:"debug,20" json:"debug,omitempty"`
	IsGone             *bool          `thrift:"isGone,21" json:"isGone,omitempty"`
	// unused field # 22
	IsHosted bool `thrift:"isHosted,23,required" json:"isHosted"`
}

func NewContent() *Content {
	return &Content{
		Type: 0,

		Tags: []*Tag{},

		References: []*Reference{},
	}
}

func (p *Content) GetID() string {
	return p.ID
}

func (p *Content) GetType() ContentType {
	return p.Type
}

var Content_SectionId_DEFAULT string

func (p *Content) GetSectionId() string {
	if !p.IsSetSectionId() {
		return Content_SectionId_DEFAULT
	}
	return *p.SectionId
}

var Content_SectionName_DEFAULT string

func (p *Content) GetSectionName() string {
	if !p.IsSetSectionName() {
		return Content_SectionName_DEFAULT
	}
	return *p.SectionName
}

var Content_WebPublicationDate_DEFAULT *CapiDateTime

func (p *Content) GetWebPublicationDate() *CapiDateTime {
	if !p.IsSetWebPublicationDate() {
		return Content_WebPublicationDate_DEFAULT
	}
	return p.WebPublicationDate
}

func (p *Content) GetWebTitle() string {
	return p.WebTitle
}

func (p *Content) GetWebUrl() string {
	return p.WebUrl
}

func (p *Content) GetApiUrl() string {
	return p.ApiUrl
}

var Content_Fields_DEFAULT *ContentFields

func (p *Content) GetFields() *ContentFields {
	if !p.IsSetFields() {
		return Content_Fields_DEFAULT
	}
	return p.Fields
}

func (p *Content) GetTags() []*Tag {
	return p.Tags
}

var Content_Elements_DEFAULT []*Element

func (p *Content) GetElements() []*Element {
	return p.Elements
}

func (p *Content) GetReferences() []*Reference {
	return p.References
}

var Content_IsExpired_DEFAULT bool

func (p *Content) GetIsExpired() bool {
	if !p.IsSetIsExpired() {
		return Content_IsExpired_DEFAULT
	}
	return *p.IsExpired
}

var Content_Blocks_DEFAULT *Blocks

func (p *Content) GetBlocks() *Blocks {
	if !p.IsSetBlocks() {
		return Content_Blocks_DEFAULT
	}
	return p.Blocks
}

var Content_Rights_DEFAULT *Rights

func (p *Content) GetRights() *Rights {
	if !p.IsSetRights() {
		return Content_Rights_DEFAULT
	}
	return p.Rights
}

var Content_Crossword_DEFAULT *Crossword

func (p *Content) GetCrossword() *Crossword {
	if !p.IsSetCrossword() {
		return Content_Crossword_DEFAULT
	}
	return p.Crossword
}

var Content_Atoms_DEFAULT *Atoms

func (p *Content) GetAtoms() *Atoms {
	if !p.IsSetAtoms() {
		return Content_Atoms_DEFAULT
	}
	return p.Atoms
}

var Content_Stats_DEFAULT *ContentStats

func (p *Content) GetStats() *ContentStats {
	if !p.IsSetStats() {
		return Content_Stats_DEFAULT
	}
	return p.Stats
}

var Content_Section_DEFAULT *Section

func (p *Content) GetSection() *Section {
	if !p.IsSetSection() {
		return Content_Section_DEFAULT
	}
	return p.Section
}

var Content_Debug_DEFAULT *Debug

func (p *Content) GetDebug() *Debug {
	if !p.IsSetDebug() {
		return Content_Debug_DEFAULT
	}
	return p.Debug
}

var Content_IsGone_DEFAULT bool

func (p *Content) GetIsGone() bool {
	if !p.IsSetIsGone() {
		return Content_IsGone_DEFAULT
	}
	return *p.IsGone
}

func (p *Content) GetIsHosted() bool {
	return p.IsHosted
}
func (p *Content) IsSetSectionId() bool {
	return p.SectionId != nil
}

func (p *Content) IsSetSectionName() bool {
	return p.SectionName != nil
}

func (p *Content) IsSetWebPublicationDate() bool {
	return p.WebPublicationDate != nil
}

func (p *Content) IsSetFields() bool {
	return p.Fields != nil
}

func (p *Content) IsSetElements() bool {
	return p.Elements != nil
}

func (p *Content) IsSetIsExpired() bool {
	return p.IsExpired != nil
}

func (p *Content) IsSetBlocks() bool {
	return p.Blocks != nil
}

func (p *Content) IsSetRights() bool {
	return p.Rights != nil
}

func (p *Content) IsSetCrossword() bool {
	return p.Crossword != nil
}

func (p *Content) IsSetAtoms() bool {
	return p.Atoms != nil
}

func (p *Content) IsSetStats() bool {
	return p.Stats != nil
}

func (p *Content) IsSetSection() bool {
	return p.Section != nil
}

func (p *Content) IsSetDebug() bool {
	return p.Debug != nil
}

func (p *Content) IsSetIsGone() bool {
	return p.IsGone != nil
}

func (p *Content) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetType bool = false
	var issetWebTitle bool = false
	var issetWebUrl bool = false
	var issetApiUrl bool = false
	var issetTags bool = false
	var issetReferences bool = false
	var issetIsHosted bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetWebTitle = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetApiUrl = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
			issetTags = true
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
			issetReferences = true
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
			issetIsHosted = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetWebTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebTitle is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	if !issetApiUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApiUrl is not set"))
	}
	if !issetTags {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tags is not set"))
	}
	if !issetReferences {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field References is not set"))
	}
	if !issetIsHosted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsHosted is not set"))
	}
	return nil
}

func (p *Content) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Content) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ContentType(v)
		p.Type = temp
	}
	return nil
}

func (p *Content) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SectionId = &v
	}
	return nil
}

func (p *Content) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SectionName = &v
	}
	return nil
}

func (p *Content) readField5(iprot thrift.TProtocol) error {
	p.WebPublicationDate = &CapiDateTime{}
	if err := p.WebPublicationDate.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebPublicationDate), err)
	}
	return nil
}

func (p *Content) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WebTitle = v
	}
	return nil
}

func (p *Content) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *Content) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *Content) readField9(iprot thrift.TProtocol) error {
	p.Fields = &ContentFields{}
	if err := p.Fields.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fields), err)
	}
	return nil
}

func (p *Content) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tag, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &Tag{}
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.Tags = append(p.Tags, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Content) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Element, 0, size)
	p.Elements = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &Element{}
		if err := _elem24.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.Elements = append(p.Elements, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Content) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Reference, 0, size)
	p.References = tSlice
	for i := 0; i < size; i++ {
		_elem25 := &Reference{}
		if err := _elem25.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
		}
		p.References = append(p.References, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Content) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.IsExpired = &v
	}
	return nil
}

func (p *Content) readField14(iprot thrift.TProtocol) error {
	p.Blocks = &Blocks{}
	if err := p.Blocks.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Blocks), err)
	}
	return nil
}

func (p *Content) readField15(iprot thrift.TProtocol) error {
	p.Rights = &Rights{}
	if err := p.Rights.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rights), err)
	}
	return nil
}

func (p *Content) readField16(iprot thrift.TProtocol) error {
	p.Crossword = &Crossword{}
	if err := p.Crossword.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Crossword), err)
	}
	return nil
}

func (p *Content) readField17(iprot thrift.TProtocol) error {
	p.Atoms = &Atoms{}
	if err := p.Atoms.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atoms), err)
	}
	return nil
}

func (p *Content) readField18(iprot thrift.TProtocol) error {
	p.Stats = &ContentStats{}
	if err := p.Stats.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
	}
	return nil
}

func (p *Content) readField19(iprot thrift.TProtocol) error {
	p.Section = &Section{}
	if err := p.Section.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Section), err)
	}
	return nil
}

func (p *Content) readField20(iprot thrift.TProtocol) error {
	p.Debug = &Debug{}
	if err := p.Debug.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Debug), err)
	}
	return nil
}

func (p *Content) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.IsGone = &v
	}
	return nil
}

func (p *Content) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.IsHosted = v
	}
	return nil
}

func (p *Content) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Content"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Content) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Content) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *Content) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSectionId() {
		if err := oprot.WriteFieldBegin("sectionId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sectionId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SectionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sectionId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sectionId: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSectionName() {
		if err := oprot.WriteFieldBegin("sectionName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sectionName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SectionName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sectionName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sectionName: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebPublicationDate() {
		if err := oprot.WriteFieldBegin("webPublicationDate", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webPublicationDate: ", p), err)
		}
		if err := p.WebPublicationDate.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebPublicationDate), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webPublicationDate: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webTitle", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:webTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webTitle (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:webTitle: ", p), err)
	}
	return err
}

func (p *Content) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:webUrl: ", p), err)
	}
	return err
}

func (p *Content) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:apiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiUrl (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:apiUrl: ", p), err)
	}
	return err
}

func (p *Content) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err := oprot.WriteFieldBegin("fields", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:fields: ", p), err)
		}
		if err := p.Fields.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fields), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:fields: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tags", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tags: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tags {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tags: ", p), err)
	}
	return err
}

func (p *Content) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetElements() {
		if err := oprot.WriteFieldBegin("elements", thrift.LIST, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:elements: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Elements)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Elements {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:elements: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("references", thrift.LIST, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:references: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.References {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:references: ", p), err)
	}
	return err
}

func (p *Content) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsExpired() {
		if err := oprot.WriteFieldBegin("isExpired", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:isExpired: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsExpired)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isExpired (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:isExpired: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlocks() {
		if err := oprot.WriteFieldBegin("blocks", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:blocks: ", p), err)
		}
		if err := p.Blocks.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Blocks), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:blocks: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRights() {
		if err := oprot.WriteFieldBegin("rights", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:rights: ", p), err)
		}
		if err := p.Rights.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rights), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:rights: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCrossword() {
		if err := oprot.WriteFieldBegin("crossword", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:crossword: ", p), err)
		}
		if err := p.Crossword.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Crossword), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:crossword: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAtoms() {
		if err := oprot.WriteFieldBegin("atoms", thrift.STRUCT, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:atoms: ", p), err)
		}
		if err := p.Atoms.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atoms), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:atoms: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetStats() {
		if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:stats: ", p), err)
		}
		if err := p.Stats.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:stats: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSection() {
		if err := oprot.WriteFieldBegin("section", thrift.STRUCT, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:section: ", p), err)
		}
		if err := p.Section.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Section), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:section: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebug() {
		if err := oprot.WriteFieldBegin("debug", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:debug: ", p), err)
		}
		if err := p.Debug.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Debug), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:debug: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsGone() {
		if err := oprot.WriteFieldBegin("isGone", thrift.BOOL, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:isGone: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsGone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isGone (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:isGone: ", p), err)
		}
	}
	return err
}

func (p *Content) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isHosted", thrift.BOOL, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:isHosted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsHosted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isHosted (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:isHosted: ", p), err)
	}
	return err
}

func (p *Content) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Content(%+v)", *p)
}

// Attributes:
//  - ID
//  - Path
//  - Edition
//  - WebTitle
//  - WebUrl
//  - ApiUrl
type NetworkFront struct {
	ID       string `thrift:"id,1,required" json:"id"`
	Path     string `thrift:"path,2,required" json:"path"`
	Edition  string `thrift:"edition,3,required" json:"edition"`
	WebTitle string `thrift:"webTitle,4,required" json:"webTitle"`
	WebUrl   string `thrift:"webUrl,5,required" json:"webUrl"`
	ApiUrl   string `thrift:"apiUrl,6,required" json:"apiUrl"`
}

func NewNetworkFront() *NetworkFront {
	return &NetworkFront{}
}

func (p *NetworkFront) GetID() string {
	return p.ID
}

func (p *NetworkFront) GetPath() string {
	return p.Path
}

func (p *NetworkFront) GetEdition() string {
	return p.Edition
}

func (p *NetworkFront) GetWebTitle() string {
	return p.WebTitle
}

func (p *NetworkFront) GetWebUrl() string {
	return p.WebUrl
}

func (p *NetworkFront) GetApiUrl() string {
	return p.ApiUrl
}
func (p *NetworkFront) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetPath bool = false
	var issetEdition bool = false
	var issetWebTitle bool = false
	var issetWebUrl bool = false
	var issetApiUrl bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPath = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetEdition = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetWebTitle = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetWebUrl = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetApiUrl = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"))
	}
	if !issetEdition {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Edition is not set"))
	}
	if !issetWebTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebTitle is not set"))
	}
	if !issetWebUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WebUrl is not set"))
	}
	if !issetApiUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApiUrl is not set"))
	}
	return nil
}

func (p *NetworkFront) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NetworkFront) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *NetworkFront) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Edition = v
	}
	return nil
}

func (p *NetworkFront) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WebTitle = v
	}
	return nil
}

func (p *NetworkFront) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WebUrl = v
	}
	return nil
}

func (p *NetworkFront) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ApiUrl = v
	}
	return nil
}

func (p *NetworkFront) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NetworkFront"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NetworkFront) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NetworkFront) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err)
	}
	return err
}

func (p *NetworkFront) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("edition", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edition: ", p), err)
	}
	if err := oprot.WriteString(string(p.Edition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.edition (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edition: ", p), err)
	}
	return err
}

func (p *NetworkFront) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webTitle", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:webTitle: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebTitle)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webTitle (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:webTitle: ", p), err)
	}
	return err
}

func (p *NetworkFront) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webUrl", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.WebUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webUrl (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webUrl: ", p), err)
	}
	return err
}

func (p *NetworkFront) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiUrl", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:apiUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApiUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.apiUrl (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:apiUrl: ", p), err)
	}
	return err
}

func (p *NetworkFront) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NetworkFront(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - Content
type PackageArticle struct {
	Metadata *story_package_article.Article `thrift:"metadata,1,required" json:"metadata"`
	Content  *Content                       `thrift:"content,2,required" json:"content"`
}

func NewPackageArticle() *PackageArticle {
	return &PackageArticle{}
}

var PackageArticle_Metadata_DEFAULT *story_package_article.Article

func (p *PackageArticle) GetMetadata() *story_package_article.Article {
	if !p.IsSetMetadata() {
		return PackageArticle_Metadata_DEFAULT
	}
	return p.Metadata
}

var PackageArticle_Content_DEFAULT *Content

func (p *PackageArticle) GetContent() *Content {
	if !p.IsSetContent() {
		return PackageArticle_Content_DEFAULT
	}
	return p.Content
}
func (p *PackageArticle) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *PackageArticle) IsSetContent() bool {
	return p.Content != nil
}

func (p *PackageArticle) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMetadata bool = false
	var issetContent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMetadata = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetContent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMetadata {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Metadata is not set"))
	}
	if !issetContent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"))
	}
	return nil
}

func (p *PackageArticle) readField1(iprot thrift.TProtocol) error {
	p.Metadata = &story_package_article.Article{}
	if err := p.Metadata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
	}
	return nil
}

func (p *PackageArticle) readField2(iprot thrift.TProtocol) error {
	p.Content = &Content{
		Type: 0,

		Tags: []*Tag{},

		References: []*Reference{},
	}
	if err := p.Content.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Content), err)
	}
	return nil
}

func (p *PackageArticle) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PackageArticle"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PackageArticle) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err)
	}
	if err := p.Metadata.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err)
	}
	return err
}

func (p *PackageArticle) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err)
	}
	if err := p.Content.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Content), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err)
	}
	return err
}

func (p *PackageArticle) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PackageArticle(%+v)", *p)
}

// Attributes:
//  - PackageId
//  - Articles
//  - PackageName
//  - LastModified
type Package struct {
	PackageId    string            `thrift:"packageId,1,required" json:"packageId"`
	Articles     []*PackageArticle `thrift:"articles,2,required" json:"articles"`
	PackageName  string            `thrift:"packageName,3,required" json:"packageName"`
	LastModified *CapiDateTime     `thrift:"lastModified,4,required" json:"lastModified"`
}

func NewPackage() *Package {
	return &Package{}
}

func (p *Package) GetPackageId() string {
	return p.PackageId
}

func (p *Package) GetArticles() []*PackageArticle {
	return p.Articles
}

func (p *Package) GetPackageName() string {
	return p.PackageName
}

var Package_LastModified_DEFAULT *CapiDateTime

func (p *Package) GetLastModified() *CapiDateTime {
	if !p.IsSetLastModified() {
		return Package_LastModified_DEFAULT
	}
	return p.LastModified
}
func (p *Package) IsSetLastModified() bool {
	return p.LastModified != nil
}

func (p *Package) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPackageId bool = false
	var issetArticles bool = false
	var issetPackageName bool = false
	var issetLastModified bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPackageId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetArticles = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetPackageName = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetLastModified = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPackageId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PackageId is not set"))
	}
	if !issetArticles {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Articles is not set"))
	}
	if !issetPackageName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PackageName is not set"))
	}
	if !issetLastModified {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastModified is not set"))
	}
	return nil
}

func (p *Package) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PackageId = v
	}
	return nil
}

func (p *Package) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PackageArticle, 0, size)
	p.Articles = tSlice
	for i := 0; i < size; i++ {
		_elem26 := &PackageArticle{}
		if err := _elem26.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
		}
		p.Articles = append(p.Articles, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Package) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PackageName = v
	}
	return nil
}

func (p *Package) readField4(iprot thrift.TProtocol) error {
	p.LastModified = &CapiDateTime{}
	if err := p.LastModified.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastModified), err)
	}
	return nil
}

func (p *Package) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Package"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Package) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:packageId: ", p), err)
	}
	if err := oprot.WriteString(string(p.PackageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packageId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:packageId: ", p), err)
	}
	return err
}

func (p *Package) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("articles", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:articles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Articles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Articles {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:articles: ", p), err)
	}
	return err
}

func (p *Package) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packageName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:packageName: ", p), err)
	}
	if err := oprot.WriteString(string(p.PackageName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packageName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:packageName: ", p), err)
	}
	return err
}

func (p *Package) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastModified", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastModified: ", p), err)
	}
	if err := p.LastModified.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastModified), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastModified: ", p), err)
	}
	return err
}

func (p *Package) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Package(%+v)", *p)
}

// Attributes:
//  - ID
//  - Count
type MostViewedVideo struct {
	ID    string `thrift:"id,1,required" json:"id"`
	Count int32  `thrift:"count,2,required" json:"count"`
}

func NewMostViewedVideo() *MostViewedVideo {
	return &MostViewedVideo{}
}

func (p *MostViewedVideo) GetID() string {
	return p.ID
}

func (p *MostViewedVideo) GetCount() int32 {
	return p.Count
}
func (p *MostViewedVideo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetCount = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"))
	}
	return nil
}

func (p *MostViewedVideo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MostViewedVideo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *MostViewedVideo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MostViewedVideo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MostViewedVideo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MostViewedVideo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *MostViewedVideo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MostViewedVideo(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - OrderBy
//  - Results
type SearchResponse struct {
	Status      string     `thrift:"status,1,required" json:"status"`
	UserTier    string     `thrift:"userTier,2,required" json:"userTier"`
	Total       int32      `thrift:"total,3,required" json:"total"`
	StartIndex  int32      `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32      `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32      `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32      `thrift:"pages,7,required" json:"pages"`
	OrderBy     string     `thrift:"orderBy,8,required" json:"orderBy"`
	Results     []*Content `thrift:"results,9,required" json:"results"`
}

func NewSearchResponse() *SearchResponse {
	return &SearchResponse{}
}

func (p *SearchResponse) GetStatus() string {
	return p.Status
}

func (p *SearchResponse) GetUserTier() string {
	return p.UserTier
}

func (p *SearchResponse) GetTotal() int32 {
	return p.Total
}

func (p *SearchResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *SearchResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *SearchResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *SearchResponse) GetPages() int32 {
	return p.Pages
}

func (p *SearchResponse) GetOrderBy() string {
	return p.OrderBy
}

func (p *SearchResponse) GetResults() []*Content {
	return p.Results
}
func (p *SearchResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetOrderBy bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetOrderBy = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetOrderBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OrderBy is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *SearchResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SearchResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *SearchResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *SearchResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *SearchResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *SearchResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *SearchResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *SearchResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OrderBy = v
	}
	return nil
}

func (p *SearchResponse) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem27.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
		}
		p.Results = append(p.Results, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderBy", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:orderBy: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderBy (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:orderBy: ", p), err)
	}
	return err
}

func (p *SearchResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:results: ", p), err)
	}
	return err
}

func (p *SearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - OrderBy
//  - Content
//  - Tag
//  - Edition
//  - Section
//  - Results
//  - Quiz
//  - RelatedContent
//  - StoryPackage
//  - EditorsPicks
//  - MostViewed
//  - LeadContent
//  - Packages
//  - Viewpoints: Viewpoints are deprecated
//  - Media
//  - Explainer
type ItemResponse struct {
	Status         string              `thrift:"status,1,required" json:"status"`
	UserTier       string              `thrift:"userTier,2,required" json:"userTier"`
	Total          *int32              `thrift:"total,3" json:"total,omitempty"`
	StartIndex     *int32              `thrift:"startIndex,4" json:"startIndex,omitempty"`
	PageSize       *int32              `thrift:"pageSize,5" json:"pageSize,omitempty"`
	CurrentPage    *int32              `thrift:"currentPage,6" json:"currentPage,omitempty"`
	Pages          *int32              `thrift:"pages,7" json:"pages,omitempty"`
	OrderBy        *string             `thrift:"orderBy,8" json:"orderBy,omitempty"`
	Content        *Content            `thrift:"content,9" json:"content,omitempty"`
	Tag            *Tag                `thrift:"tag,10" json:"tag,omitempty"`
	Edition        *Edition            `thrift:"edition,11" json:"edition,omitempty"`
	Section        *Section            `thrift:"section,12" json:"section,omitempty"`
	Results        []*Content          `thrift:"results,13" json:"results,omitempty"`
	Quiz           *contentatom.Atom   `thrift:"quiz,14" json:"quiz,omitempty"`
	RelatedContent []*Content          `thrift:"relatedContent,15" json:"relatedContent,omitempty"`
	StoryPackage   []*Content          `thrift:"storyPackage,16" json:"storyPackage,omitempty"`
	EditorsPicks   []*Content          `thrift:"editorsPicks,17" json:"editorsPicks,omitempty"`
	MostViewed     []*Content          `thrift:"mostViewed,18" json:"mostViewed,omitempty"`
	LeadContent    []*Content          `thrift:"leadContent,19" json:"leadContent,omitempty"`
	Packages       []*Package          `thrift:"packages,20" json:"packages,omitempty"`
	Viewpoints     []*contentatom.Atom `thrift:"viewpoints,21" json:"viewpoints,omitempty"`
	Media          *contentatom.Atom   `thrift:"media,22" json:"media,omitempty"`
	Explainer      *contentatom.Atom   `thrift:"explainer,23" json:"explainer,omitempty"`
}

func NewItemResponse() *ItemResponse {
	return &ItemResponse{}
}

func (p *ItemResponse) GetStatus() string {
	return p.Status
}

func (p *ItemResponse) GetUserTier() string {
	return p.UserTier
}

var ItemResponse_Total_DEFAULT int32

func (p *ItemResponse) GetTotal() int32 {
	if !p.IsSetTotal() {
		return ItemResponse_Total_DEFAULT
	}
	return *p.Total
}

var ItemResponse_StartIndex_DEFAULT int32

func (p *ItemResponse) GetStartIndex() int32 {
	if !p.IsSetStartIndex() {
		return ItemResponse_StartIndex_DEFAULT
	}
	return *p.StartIndex
}

var ItemResponse_PageSize_DEFAULT int32

func (p *ItemResponse) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return ItemResponse_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ItemResponse_CurrentPage_DEFAULT int32

func (p *ItemResponse) GetCurrentPage() int32 {
	if !p.IsSetCurrentPage() {
		return ItemResponse_CurrentPage_DEFAULT
	}
	return *p.CurrentPage
}

var ItemResponse_Pages_DEFAULT int32

func (p *ItemResponse) GetPages() int32 {
	if !p.IsSetPages() {
		return ItemResponse_Pages_DEFAULT
	}
	return *p.Pages
}

var ItemResponse_OrderBy_DEFAULT string

func (p *ItemResponse) GetOrderBy() string {
	if !p.IsSetOrderBy() {
		return ItemResponse_OrderBy_DEFAULT
	}
	return *p.OrderBy
}

var ItemResponse_Content_DEFAULT *Content

func (p *ItemResponse) GetContent() *Content {
	if !p.IsSetContent() {
		return ItemResponse_Content_DEFAULT
	}
	return p.Content
}

var ItemResponse_Tag_DEFAULT *Tag

func (p *ItemResponse) GetTag() *Tag {
	if !p.IsSetTag() {
		return ItemResponse_Tag_DEFAULT
	}
	return p.Tag
}

var ItemResponse_Edition_DEFAULT *Edition

func (p *ItemResponse) GetEdition() *Edition {
	if !p.IsSetEdition() {
		return ItemResponse_Edition_DEFAULT
	}
	return p.Edition
}

var ItemResponse_Section_DEFAULT *Section

func (p *ItemResponse) GetSection() *Section {
	if !p.IsSetSection() {
		return ItemResponse_Section_DEFAULT
	}
	return p.Section
}

var ItemResponse_Results_DEFAULT []*Content

func (p *ItemResponse) GetResults() []*Content {
	return p.Results
}

var ItemResponse_Quiz_DEFAULT *contentatom.Atom

func (p *ItemResponse) GetQuiz() *contentatom.Atom {
	if !p.IsSetQuiz() {
		return ItemResponse_Quiz_DEFAULT
	}
	return p.Quiz
}

var ItemResponse_RelatedContent_DEFAULT []*Content

func (p *ItemResponse) GetRelatedContent() []*Content {
	return p.RelatedContent
}

var ItemResponse_StoryPackage_DEFAULT []*Content

func (p *ItemResponse) GetStoryPackage() []*Content {
	return p.StoryPackage
}

var ItemResponse_EditorsPicks_DEFAULT []*Content

func (p *ItemResponse) GetEditorsPicks() []*Content {
	return p.EditorsPicks
}

var ItemResponse_MostViewed_DEFAULT []*Content

func (p *ItemResponse) GetMostViewed() []*Content {
	return p.MostViewed
}

var ItemResponse_LeadContent_DEFAULT []*Content

func (p *ItemResponse) GetLeadContent() []*Content {
	return p.LeadContent
}

var ItemResponse_Packages_DEFAULT []*Package

func (p *ItemResponse) GetPackages() []*Package {
	return p.Packages
}

var ItemResponse_Viewpoints_DEFAULT []*contentatom.Atom

func (p *ItemResponse) GetViewpoints() []*contentatom.Atom {
	return p.Viewpoints
}

var ItemResponse_Media_DEFAULT *contentatom.Atom

func (p *ItemResponse) GetMedia() *contentatom.Atom {
	if !p.IsSetMedia() {
		return ItemResponse_Media_DEFAULT
	}
	return p.Media
}

var ItemResponse_Explainer_DEFAULT *contentatom.Atom

func (p *ItemResponse) GetExplainer() *contentatom.Atom {
	if !p.IsSetExplainer() {
		return ItemResponse_Explainer_DEFAULT
	}
	return p.Explainer
}
func (p *ItemResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ItemResponse) IsSetStartIndex() bool {
	return p.StartIndex != nil
}

func (p *ItemResponse) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ItemResponse) IsSetCurrentPage() bool {
	return p.CurrentPage != nil
}

func (p *ItemResponse) IsSetPages() bool {
	return p.Pages != nil
}

func (p *ItemResponse) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *ItemResponse) IsSetContent() bool {
	return p.Content != nil
}

func (p *ItemResponse) IsSetTag() bool {
	return p.Tag != nil
}

func (p *ItemResponse) IsSetEdition() bool {
	return p.Edition != nil
}

func (p *ItemResponse) IsSetSection() bool {
	return p.Section != nil
}

func (p *ItemResponse) IsSetResults() bool {
	return p.Results != nil
}

func (p *ItemResponse) IsSetQuiz() bool {
	return p.Quiz != nil
}

func (p *ItemResponse) IsSetRelatedContent() bool {
	return p.RelatedContent != nil
}

func (p *ItemResponse) IsSetStoryPackage() bool {
	return p.StoryPackage != nil
}

func (p *ItemResponse) IsSetEditorsPicks() bool {
	return p.EditorsPicks != nil
}

func (p *ItemResponse) IsSetMostViewed() bool {
	return p.MostViewed != nil
}

func (p *ItemResponse) IsSetLeadContent() bool {
	return p.LeadContent != nil
}

func (p *ItemResponse) IsSetPackages() bool {
	return p.Packages != nil
}

func (p *ItemResponse) IsSetViewpoints() bool {
	return p.Viewpoints != nil
}

func (p *ItemResponse) IsSetMedia() bool {
	return p.Media != nil
}

func (p *ItemResponse) IsSetExplainer() bool {
	return p.Explainer != nil
}

func (p *ItemResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	return nil
}

func (p *ItemResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ItemResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *ItemResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = &v
	}
	return nil
}

func (p *ItemResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = &v
	}
	return nil
}

func (p *ItemResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *ItemResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = &v
	}
	return nil
}

func (p *ItemResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = &v
	}
	return nil
}

func (p *ItemResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OrderBy = &v
	}
	return nil
}

func (p *ItemResponse) readField9(iprot thrift.TProtocol) error {
	p.Content = &Content{
		Type: 0,

		Tags: []*Tag{},

		References: []*Reference{},
	}
	if err := p.Content.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Content), err)
	}
	return nil
}

func (p *ItemResponse) readField10(iprot thrift.TProtocol) error {
	p.Tag = &Tag{}
	if err := p.Tag.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tag), err)
	}
	return nil
}

func (p *ItemResponse) readField11(iprot thrift.TProtocol) error {
	p.Edition = &Edition{}
	if err := p.Edition.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Edition), err)
	}
	return nil
}

func (p *ItemResponse) readField12(iprot thrift.TProtocol) error {
	p.Section = &Section{}
	if err := p.Section.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Section), err)
	}
	return nil
}

func (p *ItemResponse) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem28 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem28.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
		}
		p.Results = append(p.Results, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField14(iprot thrift.TProtocol) error {
	p.Quiz = &contentatom.Atom{}
	if err := p.Quiz.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Quiz), err)
	}
	return nil
}

func (p *ItemResponse) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.RelatedContent = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem29.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
		}
		p.RelatedContent = append(p.RelatedContent, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.StoryPackage = tSlice
	for i := 0; i < size; i++ {
		_elem30 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem30.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
		}
		p.StoryPackage = append(p.StoryPackage, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.EditorsPicks = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem31.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
		}
		p.EditorsPicks = append(p.EditorsPicks, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.MostViewed = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.MostViewed = append(p.MostViewed, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Content, 0, size)
	p.LeadContent = tSlice
	for i := 0; i < size; i++ {
		_elem33 := &Content{
			Type: 0,

			Tags: []*Tag{},

			References: []*Reference{},
		}
		if err := _elem33.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
		}
		p.LeadContent = append(p.LeadContent, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Package, 0, size)
	p.Packages = tSlice
	for i := 0; i < size; i++ {
		_elem34 := &Package{}
		if err := _elem34.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
		}
		p.Packages = append(p.Packages, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Viewpoints = tSlice
	for i := 0; i < size; i++ {
		_elem35 := &contentatom.Atom{}
		if err := _elem35.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
		}
		p.Viewpoints = append(p.Viewpoints, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemResponse) readField22(iprot thrift.TProtocol) error {
	p.Media = &contentatom.Atom{}
	if err := p.Media.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Media), err)
	}
	return nil
}

func (p *ItemResponse) readField23(iprot thrift.TProtocol) error {
	p.Explainer = &contentatom.Atom{}
	if err := p.Explainer.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Explainer), err)
	}
	return nil
}

func (p *ItemResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ItemResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ItemResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *ItemResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Total)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StartIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentPage() {
		if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.CurrentPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPages() {
		if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Pages)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err := oprot.WriteFieldBegin("orderBy", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:orderBy: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrderBy)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderBy (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:orderBy: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:content: ", p), err)
		}
		if err := p.Content.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Content), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:content: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tag: ", p), err)
		}
		if err := p.Tag.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tag), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tag: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEdition() {
		if err := oprot.WriteFieldBegin("edition", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:edition: ", p), err)
		}
		if err := p.Edition.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Edition), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:edition: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSection() {
		if err := oprot.WriteFieldBegin("section", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:section: ", p), err)
		}
		if err := p.Section.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Section), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:section: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetResults() {
		if err := oprot.WriteFieldBegin("results", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:results: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Results {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:results: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuiz() {
		if err := oprot.WriteFieldBegin("quiz", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:quiz: ", p), err)
		}
		if err := p.Quiz.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Quiz), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:quiz: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedContent() {
		if err := oprot.WriteFieldBegin("relatedContent", thrift.LIST, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:relatedContent: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelatedContent)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RelatedContent {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:relatedContent: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoryPackage() {
		if err := oprot.WriteFieldBegin("storyPackage", thrift.LIST, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:storyPackage: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StoryPackage)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StoryPackage {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:storyPackage: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetEditorsPicks() {
		if err := oprot.WriteFieldBegin("editorsPicks", thrift.LIST, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:editorsPicks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EditorsPicks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EditorsPicks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:editorsPicks: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetMostViewed() {
		if err := oprot.WriteFieldBegin("mostViewed", thrift.LIST, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:mostViewed: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MostViewed)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MostViewed {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:mostViewed: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeadContent() {
		if err := oprot.WriteFieldBegin("leadContent", thrift.LIST, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:leadContent: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LeadContent)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LeadContent {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:leadContent: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackages() {
		if err := oprot.WriteFieldBegin("packages", thrift.LIST, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:packages: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Packages)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Packages {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:packages: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewpoints() {
		if err := oprot.WriteFieldBegin("viewpoints", thrift.LIST, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:viewpoints: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Viewpoints)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Viewpoints {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:viewpoints: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetMedia() {
		if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:media: ", p), err)
		}
		if err := p.Media.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Media), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:media: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplainer() {
		if err := oprot.WriteFieldBegin("explainer", thrift.STRUCT, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:explainer: ", p), err)
		}
		if err := p.Explainer.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Explainer), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:explainer: ", p), err)
		}
	}
	return err
}

func (p *ItemResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - Results
type TagsResponse struct {
	Status      string `thrift:"status,1,required" json:"status"`
	UserTier    string `thrift:"userTier,2,required" json:"userTier"`
	Total       int32  `thrift:"total,3,required" json:"total"`
	StartIndex  int32  `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32  `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32  `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32  `thrift:"pages,7,required" json:"pages"`
	Results     []*Tag `thrift:"results,8,required" json:"results"`
}

func NewTagsResponse() *TagsResponse {
	return &TagsResponse{}
}

func (p *TagsResponse) GetStatus() string {
	return p.Status
}

func (p *TagsResponse) GetUserTier() string {
	return p.UserTier
}

func (p *TagsResponse) GetTotal() int32 {
	return p.Total
}

func (p *TagsResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *TagsResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *TagsResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *TagsResponse) GetPages() int32 {
	return p.Pages
}

func (p *TagsResponse) GetResults() []*Tag {
	return p.Results
}
func (p *TagsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *TagsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TagsResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *TagsResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *TagsResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *TagsResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *TagsResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *TagsResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *TagsResponse) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Tag, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem36 := &Tag{}
		if err := _elem36.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
		}
		p.Results = append(p.Results, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TagsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TagsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TagsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *TagsResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:results: ", p), err)
	}
	return err
}

func (p *TagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagsResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - Results
type SectionsResponse struct {
	Status   string     `thrift:"status,1,required" json:"status"`
	UserTier string     `thrift:"userTier,2,required" json:"userTier"`
	Total    int32      `thrift:"total,3,required" json:"total"`
	Results  []*Section `thrift:"results,4,required" json:"results"`
}

func NewSectionsResponse() *SectionsResponse {
	return &SectionsResponse{}
}

func (p *SectionsResponse) GetStatus() string {
	return p.Status
}

func (p *SectionsResponse) GetUserTier() string {
	return p.UserTier
}

func (p *SectionsResponse) GetTotal() int32 {
	return p.Total
}

func (p *SectionsResponse) GetResults() []*Section {
	return p.Results
}
func (p *SectionsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *SectionsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SectionsResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *SectionsResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *SectionsResponse) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Section, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem37 := &Section{}
		if err := _elem37.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
		}
		p.Results = append(p.Results, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SectionsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SectionsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SectionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *SectionsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *SectionsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *SectionsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:results: ", p), err)
	}
	return err
}

func (p *SectionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SectionsResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - Results
type EditionsResponse struct {
	Status   string          `thrift:"status,1,required" json:"status"`
	UserTier string          `thrift:"userTier,2,required" json:"userTier"`
	Total    int32           `thrift:"total,3,required" json:"total"`
	Results  []*NetworkFront `thrift:"results,4,required" json:"results"`
}

func NewEditionsResponse() *EditionsResponse {
	return &EditionsResponse{}
}

func (p *EditionsResponse) GetStatus() string {
	return p.Status
}

func (p *EditionsResponse) GetUserTier() string {
	return p.UserTier
}

func (p *EditionsResponse) GetTotal() int32 {
	return p.Total
}

func (p *EditionsResponse) GetResults() []*NetworkFront {
	return p.Results
}
func (p *EditionsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *EditionsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *EditionsResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *EditionsResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *EditionsResponse) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NetworkFront, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem38 := &NetworkFront{}
		if err := _elem38.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
		}
		p.Results = append(p.Results, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EditionsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EditionsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EditionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *EditionsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *EditionsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *EditionsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:results: ", p), err)
	}
	return err
}

func (p *EditionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EditionsResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - Results
type AtomsResponse struct {
	Status      string              `thrift:"status,1,required" json:"status"`
	UserTier    string              `thrift:"userTier,2,required" json:"userTier"`
	Total       int32               `thrift:"total,3,required" json:"total"`
	StartIndex  int32               `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32               `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32               `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32               `thrift:"pages,7,required" json:"pages"`
	Results     []*contentatom.Atom `thrift:"results,8,required" json:"results"`
}

func NewAtomsResponse() *AtomsResponse {
	return &AtomsResponse{}
}

func (p *AtomsResponse) GetStatus() string {
	return p.Status
}

func (p *AtomsResponse) GetUserTier() string {
	return p.UserTier
}

func (p *AtomsResponse) GetTotal() int32 {
	return p.Total
}

func (p *AtomsResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *AtomsResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *AtomsResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *AtomsResponse) GetPages() int32 {
	return p.Pages
}

func (p *AtomsResponse) GetResults() []*contentatom.Atom {
	return p.Results
}
func (p *AtomsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *AtomsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *AtomsResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *AtomsResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *AtomsResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *AtomsResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *AtomsResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *AtomsResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *AtomsResponse) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*contentatom.Atom, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &contentatom.Atom{}
		if err := _elem39.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.Results = append(p.Results, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AtomsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtomsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AtomsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *AtomsResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:results: ", p), err)
	}
	return err
}

func (p *AtomsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomsResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - OrderBy
//  - Results
type PackagesResponse struct {
	Status      string     `thrift:"status,1,required" json:"status"`
	UserTier    string     `thrift:"userTier,2,required" json:"userTier"`
	Total       int32      `thrift:"total,3,required" json:"total"`
	StartIndex  int32      `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32      `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32      `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32      `thrift:"pages,7,required" json:"pages"`
	OrderBy     string     `thrift:"orderBy,8,required" json:"orderBy"`
	Results     []*Package `thrift:"results,9,required" json:"results"`
}

func NewPackagesResponse() *PackagesResponse {
	return &PackagesResponse{}
}

func (p *PackagesResponse) GetStatus() string {
	return p.Status
}

func (p *PackagesResponse) GetUserTier() string {
	return p.UserTier
}

func (p *PackagesResponse) GetTotal() int32 {
	return p.Total
}

func (p *PackagesResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *PackagesResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *PackagesResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *PackagesResponse) GetPages() int32 {
	return p.Pages
}

func (p *PackagesResponse) GetOrderBy() string {
	return p.OrderBy
}

func (p *PackagesResponse) GetResults() []*Package {
	return p.Results
}
func (p *PackagesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetOrderBy bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetOrderBy = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetOrderBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OrderBy is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *PackagesResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *PackagesResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *PackagesResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *PackagesResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *PackagesResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *PackagesResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *PackagesResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *PackagesResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OrderBy = v
	}
	return nil
}

func (p *PackagesResponse) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Package, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem40 := &Package{}
		if err := _elem40.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
		}
		p.Results = append(p.Results, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PackagesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PackagesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PackagesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderBy", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:orderBy: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderBy (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:orderBy: ", p), err)
	}
	return err
}

func (p *PackagesResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:results: ", p), err)
	}
	return err
}

func (p *PackagesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PackagesResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - OrderBy
//  - Results
type RemovedContentResponse struct {
	Status      string   `thrift:"status,1,required" json:"status"`
	UserTier    string   `thrift:"userTier,2,required" json:"userTier"`
	Total       int32    `thrift:"total,3,required" json:"total"`
	StartIndex  int32    `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32    `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32    `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32    `thrift:"pages,7,required" json:"pages"`
	OrderBy     string   `thrift:"orderBy,8,required" json:"orderBy"`
	Results     []string `thrift:"results,9,required" json:"results"`
}

func NewRemovedContentResponse() *RemovedContentResponse {
	return &RemovedContentResponse{}
}

func (p *RemovedContentResponse) GetStatus() string {
	return p.Status
}

func (p *RemovedContentResponse) GetUserTier() string {
	return p.UserTier
}

func (p *RemovedContentResponse) GetTotal() int32 {
	return p.Total
}

func (p *RemovedContentResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *RemovedContentResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *RemovedContentResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *RemovedContentResponse) GetPages() int32 {
	return p.Pages
}

func (p *RemovedContentResponse) GetOrderBy() string {
	return p.OrderBy
}

func (p *RemovedContentResponse) GetResults() []string {
	return p.Results
}
func (p *RemovedContentResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetOrderBy bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetOrderBy = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetOrderBy {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OrderBy is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *RemovedContentResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *RemovedContentResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *RemovedContentResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *RemovedContentResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *RemovedContentResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *RemovedContentResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *RemovedContentResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *RemovedContentResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OrderBy = v
	}
	return nil
}

func (p *RemovedContentResponse) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		var _elem41 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.Results = append(p.Results, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RemovedContentResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RemovedContentResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RemovedContentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderBy", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:orderBy: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderBy (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:orderBy: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:results: ", p), err)
	}
	return err
}

func (p *RemovedContentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RemovedContentResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - Message
type ErrorResponse struct {
	Status  string `thrift:"status,1,required" json:"status"`
	Message string `thrift:"message,2,required" json:"message"`
}

func NewErrorResponse() *ErrorResponse {
	return &ErrorResponse{}
}

func (p *ErrorResponse) GetStatus() string {
	return p.Status
}

func (p *ErrorResponse) GetMessage() string {
	return p.Message
}
func (p *ErrorResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *ErrorResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ErrorResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ErrorResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrorResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ErrorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ErrorResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *ErrorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrorResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - MostViewedVideos
type VideoStatsResponse struct {
	Status           string             `thrift:"status,1,required" json:"status"`
	MostViewedVideos []*MostViewedVideo `thrift:"mostViewedVideos,2,required" json:"mostViewedVideos"`
}

func NewVideoStatsResponse() *VideoStatsResponse {
	return &VideoStatsResponse{}
}

func (p *VideoStatsResponse) GetStatus() string {
	return p.Status
}

func (p *VideoStatsResponse) GetMostViewedVideos() []*MostViewedVideo {
	return p.MostViewedVideos
}
func (p *VideoStatsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetMostViewedVideos bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMostViewedVideos = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetMostViewedVideos {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MostViewedVideos is not set"))
	}
	return nil
}

func (p *VideoStatsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *VideoStatsResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MostViewedVideo, 0, size)
	p.MostViewedVideos = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &MostViewedVideo{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.MostViewedVideos = append(p.MostViewedVideos, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VideoStatsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoStatsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VideoStatsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *VideoStatsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mostViewedVideos", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mostViewedVideos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MostViewedVideos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MostViewedVideos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mostViewedVideos: ", p), err)
	}
	return err
}

func (p *VideoStatsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoStatsResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTier
//  - Total
//  - StartIndex
//  - PageSize
//  - CurrentPage
//  - Pages
//  - Results
type AtomUsageResponse struct {
	Status      string   `thrift:"status,1,required" json:"status"`
	UserTier    string   `thrift:"userTier,2,required" json:"userTier"`
	Total       int32    `thrift:"total,3,required" json:"total"`
	StartIndex  int32    `thrift:"startIndex,4,required" json:"startIndex"`
	PageSize    int32    `thrift:"pageSize,5,required" json:"pageSize"`
	CurrentPage int32    `thrift:"currentPage,6,required" json:"currentPage"`
	Pages       int32    `thrift:"pages,7,required" json:"pages"`
	Results     []string `thrift:"results,8,required" json:"results"`
}

func NewAtomUsageResponse() *AtomUsageResponse {
	return &AtomUsageResponse{}
}

func (p *AtomUsageResponse) GetStatus() string {
	return p.Status
}

func (p *AtomUsageResponse) GetUserTier() string {
	return p.UserTier
}

func (p *AtomUsageResponse) GetTotal() int32 {
	return p.Total
}

func (p *AtomUsageResponse) GetStartIndex() int32 {
	return p.StartIndex
}

func (p *AtomUsageResponse) GetPageSize() int32 {
	return p.PageSize
}

func (p *AtomUsageResponse) GetCurrentPage() int32 {
	return p.CurrentPage
}

func (p *AtomUsageResponse) GetPages() int32 {
	return p.Pages
}

func (p *AtomUsageResponse) GetResults() []string {
	return p.Results
}
func (p *AtomUsageResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetUserTier bool = false
	var issetTotal bool = false
	var issetStartIndex bool = false
	var issetPageSize bool = false
	var issetCurrentPage bool = false
	var issetPages bool = false
	var issetResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUserTier = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTotal = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetStartIndex = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPageSize = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetCurrentPage = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPages = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetResults = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetUserTier {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserTier is not set"))
	}
	if !issetTotal {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"))
	}
	if !issetStartIndex {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartIndex is not set"))
	}
	if !issetPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageSize is not set"))
	}
	if !issetCurrentPage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentPage is not set"))
	}
	if !issetPages {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Pages is not set"))
	}
	if !issetResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"))
	}
	return nil
}

func (p *AtomUsageResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *AtomUsageResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserTier = v
	}
	return nil
}

func (p *AtomUsageResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *AtomUsageResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartIndex = v
	}
	return nil
}

func (p *AtomUsageResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *AtomUsageResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CurrentPage = v
	}
	return nil
}

func (p *AtomUsageResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pages = v
	}
	return nil
}

func (p *AtomUsageResponse) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		var _elem43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem43 = v
		}
		p.Results = append(p.Results, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AtomUsageResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtomUsageResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AtomUsageResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userTier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userTier: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userTier: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startIndex: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startIndex (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startIndex: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentPage", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currentPage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentPage (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currentPage: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pages", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pages: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pages)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pages (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pages: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:results: ", p), err)
	}
	return err
}

func (p *AtomUsageResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomUsageResponse(%+v)", *p)
}
