// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package contentatom

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/guardian/gocapimodels/contentatom/explainer"
	"github.com/guardian/gocapimodels/contentatom/media"
	"github.com/guardian/gocapimodels/contentatom/quiz"
	"github.com/guardian/gocapimodels/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = quiz.GoUnusedProtection__
var _ = media.GoUnusedProtection__
var _ = explainer.GoUnusedProtection__
var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

type AtomType int64

const (
	AtomType_QUIZ      AtomType = 0
	AtomType_MEDIA     AtomType = 2
	AtomType_EXPLAINER AtomType = 3
)

func (p AtomType) String() string {
	switch p {
	case AtomType_QUIZ:
		return "QUIZ"
	case AtomType_MEDIA:
		return "MEDIA"
	case AtomType_EXPLAINER:
		return "EXPLAINER"
	}
	return "<UNSET>"
}

func AtomTypeFromString(s string) (AtomType, error) {
	switch s {
	case "QUIZ":
		return AtomType_QUIZ, nil
	case "MEDIA":
		return AtomType_MEDIA, nil
	case "EXPLAINER":
		return AtomType_EXPLAINER, nil
	}
	return AtomType(0), fmt.Errorf("not a valid AtomType string")
}

func AtomTypePtr(v AtomType) *AtomType { return &v }

func (p AtomType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AtomType) UnmarshalText(text []byte) error {
	q, err := AtomTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type EventType int64

const (
	EventType_UPDATE   EventType = 0
	EventType_TAKEDOWN EventType = 1
)

func (p EventType) String() string {
	switch p {
	case EventType_UPDATE:
		return "UPDATE"
	case EventType_TAKEDOWN:
		return "TAKEDOWN"
	}
	return "<UNSET>"
}

func EventTypeFromString(s string) (EventType, error) {
	switch s {
	case "UPDATE":
		return EventType_UPDATE, nil
	case "TAKEDOWN":
		return EventType_TAKEDOWN, nil
	}
	return EventType(0), fmt.Errorf("not a valid EventType string")
}

func EventTypePtr(v EventType) *EventType { return &v }

func (p EventType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EventType) UnmarshalText(text []byte) error {
	q, err := EventTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ContentAtomID string

func ContentAtomIDPtr(v ContentAtomID) *ContentAtomID { return &v }

// Attributes:
//  - Quiz
//  - Media
//  - Explainer
type AtomData struct {
	Quiz *quiz.QuizAtom `thrift:"quiz,1" json:"quiz,omitempty"`
	// unused field # 2
	Media     *media.MediaAtom         `thrift:"media,3" json:"media,omitempty"`
	Explainer *explainer.ExplainerAtom `thrift:"explainer,4" json:"explainer,omitempty"`
}

func NewAtomData() *AtomData {
	return &AtomData{}
}

var AtomData_Quiz_DEFAULT *quiz.QuizAtom

func (p *AtomData) GetQuiz() *quiz.QuizAtom {
	if !p.IsSetQuiz() {
		return AtomData_Quiz_DEFAULT
	}
	return p.Quiz
}

var AtomData_Media_DEFAULT *media.MediaAtom

func (p *AtomData) GetMedia() *media.MediaAtom {
	if !p.IsSetMedia() {
		return AtomData_Media_DEFAULT
	}
	return p.Media
}

var AtomData_Explainer_DEFAULT *explainer.ExplainerAtom

func (p *AtomData) GetExplainer() *explainer.ExplainerAtom {
	if !p.IsSetExplainer() {
		return AtomData_Explainer_DEFAULT
	}
	return p.Explainer
}
func (p *AtomData) CountSetFieldsAtomData() int {
	count := 0
	if p.IsSetQuiz() {
		count++
	}
	if p.IsSetMedia() {
		count++
	}
	if p.IsSetExplainer() {
		count++
	}
	return count

}

func (p *AtomData) IsSetQuiz() bool {
	return p.Quiz != nil
}

func (p *AtomData) IsSetMedia() bool {
	return p.Media != nil
}

func (p *AtomData) IsSetExplainer() bool {
	return p.Explainer != nil
}

func (p *AtomData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AtomData) readField1(iprot thrift.TProtocol) error {
	p.Quiz = &quiz.QuizAtom{}
	if err := p.Quiz.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Quiz), err)
	}
	return nil
}

func (p *AtomData) readField3(iprot thrift.TProtocol) error {
	p.Media = &media.MediaAtom{}
	if err := p.Media.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Media), err)
	}
	return nil
}

func (p *AtomData) readField4(iprot thrift.TProtocol) error {
	p.Explainer = &explainer.ExplainerAtom{}
	if err := p.Explainer.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Explainer), err)
	}
	return nil
}

func (p *AtomData) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsAtomData(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("AtomData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AtomData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuiz() {
		if err := oprot.WriteFieldBegin("quiz", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:quiz: ", p), err)
		}
		if err := p.Quiz.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Quiz), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:quiz: ", p), err)
		}
	}
	return err
}

func (p *AtomData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMedia() {
		if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:media: ", p), err)
		}
		if err := p.Media.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Media), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:media: ", p), err)
		}
	}
	return err
}

func (p *AtomData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplainer() {
		if err := oprot.WriteFieldBegin("explainer", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:explainer: ", p), err)
		}
		if err := p.Explainer.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Explainer), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:explainer: ", p), err)
		}
	}
	return err
}

func (p *AtomData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomData(%+v)", *p)
}

// Attributes:
//  - LastModified: the latest change to the content atom
//  - Created: the atom creation event
//  - Published: the atom publication event (if published)
//  - Revision: the revision number of the content.
//
// This value is incremented whenever content is written to the database and can be used to
// ensure message ordering.
type ContentChangeDetails struct {
	LastModified *shared.ChangeRecord `thrift:"lastModified,1" json:"lastModified,omitempty"`
	Created      *shared.ChangeRecord `thrift:"created,2" json:"created,omitempty"`
	Published    *shared.ChangeRecord `thrift:"published,3" json:"published,omitempty"`
	Revision     int64                `thrift:"revision,4,required" json:"revision"`
}

func NewContentChangeDetails() *ContentChangeDetails {
	return &ContentChangeDetails{}
}

var ContentChangeDetails_LastModified_DEFAULT *shared.ChangeRecord

func (p *ContentChangeDetails) GetLastModified() *shared.ChangeRecord {
	if !p.IsSetLastModified() {
		return ContentChangeDetails_LastModified_DEFAULT
	}
	return p.LastModified
}

var ContentChangeDetails_Created_DEFAULT *shared.ChangeRecord

func (p *ContentChangeDetails) GetCreated() *shared.ChangeRecord {
	if !p.IsSetCreated() {
		return ContentChangeDetails_Created_DEFAULT
	}
	return p.Created
}

var ContentChangeDetails_Published_DEFAULT *shared.ChangeRecord

func (p *ContentChangeDetails) GetPublished() *shared.ChangeRecord {
	if !p.IsSetPublished() {
		return ContentChangeDetails_Published_DEFAULT
	}
	return p.Published
}

func (p *ContentChangeDetails) GetRevision() int64 {
	return p.Revision
}
func (p *ContentChangeDetails) IsSetLastModified() bool {
	return p.LastModified != nil
}

func (p *ContentChangeDetails) IsSetCreated() bool {
	return p.Created != nil
}

func (p *ContentChangeDetails) IsSetPublished() bool {
	return p.Published != nil
}

func (p *ContentChangeDetails) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRevision bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetRevision = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRevision {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Revision is not set"))
	}
	return nil
}

func (p *ContentChangeDetails) readField1(iprot thrift.TProtocol) error {
	p.LastModified = &shared.ChangeRecord{}
	if err := p.LastModified.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastModified), err)
	}
	return nil
}

func (p *ContentChangeDetails) readField2(iprot thrift.TProtocol) error {
	p.Created = &shared.ChangeRecord{}
	if err := p.Created.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Created), err)
	}
	return nil
}

func (p *ContentChangeDetails) readField3(iprot thrift.TProtocol) error {
	p.Published = &shared.ChangeRecord{}
	if err := p.Published.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Published), err)
	}
	return nil
}

func (p *ContentChangeDetails) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ContentChangeDetails) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentChangeDetails"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentChangeDetails) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastModified() {
		if err := oprot.WriteFieldBegin("lastModified", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastModified: ", p), err)
		}
		if err := p.LastModified.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastModified), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastModified: ", p), err)
		}
	}
	return err
}

func (p *ContentChangeDetails) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:created: ", p), err)
		}
		if err := p.Created.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Created), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:created: ", p), err)
		}
	}
	return err
}

func (p *ContentChangeDetails) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublished() {
		if err := oprot.WriteFieldBegin("published", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:published: ", p), err)
		}
		if err := p.Published.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Published), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:published: ", p), err)
		}
	}
	return err
}

func (p *ContentChangeDetails) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revision", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:revision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Revision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revision (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:revision: ", p), err)
	}
	return err
}

func (p *ContentChangeDetails) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentChangeDetails(%+v)", *p)
}

// Attributes:
//  - SuppressFurniture
type Flags struct {
	SuppressFurniture *bool `thrift:"suppressFurniture,1" json:"suppressFurniture,omitempty"`
}

func NewFlags() *Flags {
	return &Flags{}
}

var Flags_SuppressFurniture_DEFAULT bool

func (p *Flags) GetSuppressFurniture() bool {
	if !p.IsSetSuppressFurniture() {
		return Flags_SuppressFurniture_DEFAULT
	}
	return *p.SuppressFurniture
}
func (p *Flags) IsSetSuppressFurniture() bool {
	return p.SuppressFurniture != nil
}

func (p *Flags) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Flags) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SuppressFurniture = &v
	}
	return nil
}

func (p *Flags) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Flags"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Flags) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuppressFurniture() {
		if err := oprot.WriteFieldBegin("suppressFurniture", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:suppressFurniture: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SuppressFurniture)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.suppressFurniture (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:suppressFurniture: ", p), err)
		}
	}
	return err
}

func (p *Flags) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Flags(%+v)", *p)
}

// Attributes:
//  - ID
//  - AtomType
//  - Labels
//  - DefaultHtml
//  - Data
//  - ContentChangeDetails
//  - Flags
type Atom struct {
	ID                   ContentAtomID         `thrift:"id,1,required" json:"id"`
	AtomType             AtomType              `thrift:"atomType,2,required" json:"atomType"`
	Labels               []string              `thrift:"labels,3,required" json:"labels"`
	DefaultHtml          string                `thrift:"defaultHtml,4,required" json:"defaultHtml"`
	Data                 *AtomData             `thrift:"data,5,required" json:"data"`
	ContentChangeDetails *ContentChangeDetails `thrift:"contentChangeDetails,6,required" json:"contentChangeDetails"`
	Flags                *Flags                `thrift:"flags,7" json:"flags,omitempty"`
}

func NewAtom() *Atom {
	return &Atom{}
}

func (p *Atom) GetID() ContentAtomID {
	return p.ID
}

func (p *Atom) GetAtomType() AtomType {
	return p.AtomType
}

func (p *Atom) GetLabels() []string {
	return p.Labels
}

func (p *Atom) GetDefaultHtml() string {
	return p.DefaultHtml
}

var Atom_Data_DEFAULT *AtomData

func (p *Atom) GetData() *AtomData {
	if !p.IsSetData() {
		return Atom_Data_DEFAULT
	}
	return p.Data
}

var Atom_ContentChangeDetails_DEFAULT *ContentChangeDetails

func (p *Atom) GetContentChangeDetails() *ContentChangeDetails {
	if !p.IsSetContentChangeDetails() {
		return Atom_ContentChangeDetails_DEFAULT
	}
	return p.ContentChangeDetails
}

var Atom_Flags_DEFAULT *Flags

func (p *Atom) GetFlags() *Flags {
	if !p.IsSetFlags() {
		return Atom_Flags_DEFAULT
	}
	return p.Flags
}
func (p *Atom) IsSetData() bool {
	return p.Data != nil
}

func (p *Atom) IsSetContentChangeDetails() bool {
	return p.ContentChangeDetails != nil
}

func (p *Atom) IsSetFlags() bool {
	return p.Flags != nil
}

func (p *Atom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetAtomType bool = false
	var issetLabels bool = false
	var issetDefaultHtml bool = false
	var issetData bool = false
	var issetContentChangeDetails bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAtomType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetLabels = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetDefaultHtml = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetData = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetContentChangeDetails = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetAtomType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AtomType is not set"))
	}
	if !issetLabels {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Labels is not set"))
	}
	if !issetDefaultHtml {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefaultHtml is not set"))
	}
	if !issetData {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"))
	}
	if !issetContentChangeDetails {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentChangeDetails is not set"))
	}
	return nil
}

func (p *Atom) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ContentAtomID(v)
		p.ID = temp
	}
	return nil
}

func (p *Atom) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := AtomType(v)
		p.AtomType = temp
	}
	return nil
}

func (p *Atom) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Labels = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Labels = append(p.Labels, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Atom) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DefaultHtml = v
	}
	return nil
}

func (p *Atom) readField5(iprot thrift.TProtocol) error {
	p.Data = &AtomData{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *Atom) readField6(iprot thrift.TProtocol) error {
	p.ContentChangeDetails = &ContentChangeDetails{}
	if err := p.ContentChangeDetails.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContentChangeDetails), err)
	}
	return nil
}

func (p *Atom) readField7(iprot thrift.TProtocol) error {
	p.Flags = &Flags{}
	if err := p.Flags.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Flags), err)
	}
	return nil
}

func (p *Atom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Atom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Atom) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Atom) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("atomType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:atomType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AtomType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.atomType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:atomType: ", p), err)
	}
	return err
}

func (p *Atom) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("labels", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:labels: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Labels {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:labels: ", p), err)
	}
	return err
}

func (p *Atom) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultHtml", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:defaultHtml: ", p), err)
	}
	if err := oprot.WriteString(string(p.DefaultHtml)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.defaultHtml (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:defaultHtml: ", p), err)
	}
	return err
}

func (p *Atom) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err)
	}
	if err := p.Data.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err)
	}
	return err
}

func (p *Atom) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentChangeDetails", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contentChangeDetails: ", p), err)
	}
	if err := p.ContentChangeDetails.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContentChangeDetails), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contentChangeDetails: ", p), err)
	}
	return err
}

func (p *Atom) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlags() {
		if err := oprot.WriteFieldBegin("flags", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:flags: ", p), err)
		}
		if err := p.Flags.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Flags), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:flags: ", p), err)
		}
	}
	return err
}

func (p *Atom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Atom(%+v)", *p)
}

// Attributes:
//  - Atom
//  - EventType
//  - EventCreationTime
type ContentAtomEvent struct {
	Atom              *Atom           `thrift:"atom,1,required" json:"atom"`
	EventType         EventType       `thrift:"eventType,2,required" json:"eventType"`
	EventCreationTime shared.DateTime `thrift:"eventCreationTime,3,required" json:"eventCreationTime"`
}

func NewContentAtomEvent() *ContentAtomEvent {
	return &ContentAtomEvent{}
}

var ContentAtomEvent_Atom_DEFAULT *Atom

func (p *ContentAtomEvent) GetAtom() *Atom {
	if !p.IsSetAtom() {
		return ContentAtomEvent_Atom_DEFAULT
	}
	return p.Atom
}

func (p *ContentAtomEvent) GetEventType() EventType {
	return p.EventType
}

func (p *ContentAtomEvent) GetEventCreationTime() shared.DateTime {
	return p.EventCreationTime
}
func (p *ContentAtomEvent) IsSetAtom() bool {
	return p.Atom != nil
}

func (p *ContentAtomEvent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAtom bool = false
	var issetEventType bool = false
	var issetEventCreationTime bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetAtom = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetEventType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetEventCreationTime = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAtom {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Atom is not set"))
	}
	if !issetEventType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventType is not set"))
	}
	if !issetEventCreationTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EventCreationTime is not set"))
	}
	return nil
}

func (p *ContentAtomEvent) readField1(iprot thrift.TProtocol) error {
	p.Atom = &Atom{}
	if err := p.Atom.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atom), err)
	}
	return nil
}

func (p *ContentAtomEvent) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := EventType(v)
		p.EventType = temp
	}
	return nil
}

func (p *ContentAtomEvent) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := shared.DateTime(v)
		p.EventCreationTime = temp
	}
	return nil
}

func (p *ContentAtomEvent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentAtomEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentAtomEvent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("atom", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:atom: ", p), err)
	}
	if err := p.Atom.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atom), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:atom: ", p), err)
	}
	return err
}

func (p *ContentAtomEvent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eventType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventType: ", p), err)
	}
	return err
}

func (p *ContentAtomEvent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("eventCreationTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventCreationTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EventCreationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.eventCreationTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventCreationTime: ", p), err)
	}
	return err
}

func (p *ContentAtomEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentAtomEvent(%+v)", *p)
}
