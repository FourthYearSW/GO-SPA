// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package media

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Platform int64

const (
	Platform_YOUTUBE     Platform = 0
	Platform_FACEBOOK    Platform = 1
	Platform_DAILYMOTION Platform = 2
	Platform_MAINSTREAM  Platform = 3
	Platform_URL         Platform = 4
)

func (p Platform) String() string {
	switch p {
	case Platform_YOUTUBE:
		return "YOUTUBE"
	case Platform_FACEBOOK:
		return "FACEBOOK"
	case Platform_DAILYMOTION:
		return "DAILYMOTION"
	case Platform_MAINSTREAM:
		return "MAINSTREAM"
	case Platform_URL:
		return "URL"
	}
	return "<UNSET>"
}

func PlatformFromString(s string) (Platform, error) {
	switch s {
	case "YOUTUBE":
		return Platform_YOUTUBE, nil
	case "FACEBOOK":
		return Platform_FACEBOOK, nil
	case "DAILYMOTION":
		return Platform_DAILYMOTION, nil
	case "MAINSTREAM":
		return Platform_MAINSTREAM, nil
	case "URL":
		return Platform_URL, nil
	}
	return Platform(0), fmt.Errorf("not a valid Platform string")
}

func PlatformPtr(v Platform) *Platform { return &v }

func (p Platform) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Platform) UnmarshalText(text []byte) error {
	q, err := PlatformFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type AssetType int64

const (
	AssetType_AUDIO AssetType = 0
	AssetType_VIDEO AssetType = 1
)

func (p AssetType) String() string {
	switch p {
	case AssetType_AUDIO:
		return "AUDIO"
	case AssetType_VIDEO:
		return "VIDEO"
	}
	return "<UNSET>"
}

func AssetTypeFromString(s string) (AssetType, error) {
	switch s {
	case "AUDIO":
		return AssetType_AUDIO, nil
	case "VIDEO":
		return AssetType_VIDEO, nil
	}
	return AssetType(0), fmt.Errorf("not a valid AssetType string")
}

func AssetTypePtr(v AssetType) *AssetType { return &v }

func (p AssetType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AssetType) UnmarshalText(text []byte) error {
	q, err := AssetTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Category int64

const (
	Category_DOCUMENTARY Category = 0
	Category_EXPLAINER   Category = 1
	Category_FEATURE     Category = 2
	Category_NEWS        Category = 3
	Category_HOSTED      Category = 4
)

func (p Category) String() string {
	switch p {
	case Category_DOCUMENTARY:
		return "DOCUMENTARY"
	case Category_EXPLAINER:
		return "EXPLAINER"
	case Category_FEATURE:
		return "FEATURE"
	case Category_NEWS:
		return "NEWS"
	case Category_HOSTED:
		return "HOSTED"
	}
	return "<UNSET>"
}

func CategoryFromString(s string) (Category, error) {
	switch s {
	case "DOCUMENTARY":
		return Category_DOCUMENTARY, nil
	case "EXPLAINER":
		return Category_EXPLAINER, nil
	case "FEATURE":
		return Category_FEATURE, nil
	case "NEWS":
		return Category_NEWS, nil
	case "HOSTED":
		return Category_HOSTED, nil
	}
	return Category(0), fmt.Errorf("not a valid Category string")
}

func CategoryPtr(v Category) *Category { return &v }

func (p Category) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Category) UnmarshalText(text []byte) error {
	q, err := CategoryFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Version int64

func VersionPtr(v Version) *Version { return &v }

// Attributes:
//  - AssetType
//  - Version
//  - ID
//  - Platform
//  - MimeType
type Asset struct {
	AssetType AssetType `thrift:"assetType,1,required" json:"assetType"`
	Version   Version   `thrift:"version,2,required" json:"version"`
	ID        string    `thrift:"id,3,required" json:"id"`
	Platform  Platform  `thrift:"platform,4,required" json:"platform"`
	MimeType  *string   `thrift:"mimeType,5" json:"mimeType,omitempty"`
}

func NewAsset() *Asset {
	return &Asset{}
}

func (p *Asset) GetAssetType() AssetType {
	return p.AssetType
}

func (p *Asset) GetVersion() Version {
	return p.Version
}

func (p *Asset) GetID() string {
	return p.ID
}

func (p *Asset) GetPlatform() Platform {
	return p.Platform
}

var Asset_MimeType_DEFAULT string

func (p *Asset) GetMimeType() string {
	if !p.IsSetMimeType() {
		return Asset_MimeType_DEFAULT
	}
	return *p.MimeType
}
func (p *Asset) IsSetMimeType() bool {
	return p.MimeType != nil
}

func (p *Asset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAssetType bool = false
	var issetVersion bool = false
	var issetID bool = false
	var issetPlatform bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetAssetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetVersion = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetID = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetPlatform = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAssetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AssetType is not set"))
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetPlatform {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Platform is not set"))
	}
	return nil
}

func (p *Asset) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AssetType(v)
		p.AssetType = temp
	}
	return nil
}

func (p *Asset) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Version(v)
		p.Version = temp
	}
	return nil
}

func (p *Asset) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Asset) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Platform(v)
		p.Platform = temp
	}
	return nil
}

func (p *Asset) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MimeType = &v
	}
	return nil
}

func (p *Asset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Asset"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Asset) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assetType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assetType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.assetType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assetType: ", p), err)
	}
	return err
}

func (p *Asset) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *Asset) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
	}
	return err
}

func (p *Asset) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("platform", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:platform: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Platform)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.platform (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:platform: ", p), err)
	}
	return err
}

func (p *Asset) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMimeType() {
		if err := oprot.WriteFieldBegin("mimeType", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mimeType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MimeType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mimeType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mimeType: ", p), err)
		}
	}
	return err
}

func (p *Asset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Asset(%+v)", *p)
}

// Attributes:
//  - Assets
//  - ActiveVersion
//  - Title
//  - Category
//  - PlutoProjectId
//  - Duration
//  - Source
//  - PosterUrl
type MediaAtom struct {
	// unused field # 1
	Assets         []*Asset `thrift:"assets,2,required" json:"assets"`
	ActiveVersion  *Version `thrift:"activeVersion,3" json:"activeVersion,omitempty"`
	Title          string   `thrift:"title,4,required" json:"title"`
	Category       Category `thrift:"category,5,required" json:"category"`
	PlutoProjectId *string  `thrift:"plutoProjectId,6" json:"plutoProjectId,omitempty"`
	Duration       *int64   `thrift:"duration,7" json:"duration,omitempty"`
	Source         *string  `thrift:"source,8" json:"source,omitempty"`
	PosterUrl      *string  `thrift:"posterUrl,9" json:"posterUrl,omitempty"`
}

func NewMediaAtom() *MediaAtom {
	return &MediaAtom{}
}

func (p *MediaAtom) GetAssets() []*Asset {
	return p.Assets
}

var MediaAtom_ActiveVersion_DEFAULT Version

func (p *MediaAtom) GetActiveVersion() Version {
	if !p.IsSetActiveVersion() {
		return MediaAtom_ActiveVersion_DEFAULT
	}
	return *p.ActiveVersion
}

func (p *MediaAtom) GetTitle() string {
	return p.Title
}

func (p *MediaAtom) GetCategory() Category {
	return p.Category
}

var MediaAtom_PlutoProjectId_DEFAULT string

func (p *MediaAtom) GetPlutoProjectId() string {
	if !p.IsSetPlutoProjectId() {
		return MediaAtom_PlutoProjectId_DEFAULT
	}
	return *p.PlutoProjectId
}

var MediaAtom_Duration_DEFAULT int64

func (p *MediaAtom) GetDuration() int64 {
	if !p.IsSetDuration() {
		return MediaAtom_Duration_DEFAULT
	}
	return *p.Duration
}

var MediaAtom_Source_DEFAULT string

func (p *MediaAtom) GetSource() string {
	if !p.IsSetSource() {
		return MediaAtom_Source_DEFAULT
	}
	return *p.Source
}

var MediaAtom_PosterUrl_DEFAULT string

func (p *MediaAtom) GetPosterUrl() string {
	if !p.IsSetPosterUrl() {
		return MediaAtom_PosterUrl_DEFAULT
	}
	return *p.PosterUrl
}
func (p *MediaAtom) IsSetActiveVersion() bool {
	return p.ActiveVersion != nil
}

func (p *MediaAtom) IsSetPlutoProjectId() bool {
	return p.PlutoProjectId != nil
}

func (p *MediaAtom) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *MediaAtom) IsSetSource() bool {
	return p.Source != nil
}

func (p *MediaAtom) IsSetPosterUrl() bool {
	return p.PosterUrl != nil
}

func (p *MediaAtom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAssets bool = false
	var issetTitle bool = false
	var issetCategory bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAssets = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetCategory = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAssets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assets is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetCategory {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Category is not set"))
	}
	return nil
}

func (p *MediaAtom) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Asset{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Assets = append(p.Assets, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MediaAtom) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Version(v)
		p.ActiveVersion = &temp
	}
	return nil
}

func (p *MediaAtom) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MediaAtom) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Category(v)
		p.Category = temp
	}
	return nil
}

func (p *MediaAtom) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PlutoProjectId = &v
	}
	return nil
}

func (p *MediaAtom) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *MediaAtom) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *MediaAtom) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.PosterUrl = &v
	}
	return nil
}

func (p *MediaAtom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MediaAtom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MediaAtom) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:assets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Assets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:assets: ", p), err)
	}
	return err
}

func (p *MediaAtom) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveVersion() {
		if err := oprot.WriteFieldBegin("activeVersion", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeVersion: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ActiveVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeVersion (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeVersion: ", p), err)
		}
	}
	return err
}

func (p *MediaAtom) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
	}
	return err
}

func (p *MediaAtom) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:category: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.category (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:category: ", p), err)
	}
	return err
}

func (p *MediaAtom) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlutoProjectId() {
		if err := oprot.WriteFieldBegin("plutoProjectId", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:plutoProjectId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PlutoProjectId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.plutoProjectId (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:plutoProjectId: ", p), err)
		}
	}
	return err
}

func (p *MediaAtom) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:duration: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:duration: ", p), err)
		}
	}
	return err
}

func (p *MediaAtom) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:source: ", p), err)
		}
	}
	return err
}

func (p *MediaAtom) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterUrl() {
		if err := oprot.WriteFieldBegin("posterUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:posterUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PosterUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.posterUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:posterUrl: ", p), err)
		}
	}
	return err
}

func (p *MediaAtom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaAtom(%+v)", *p)
}
