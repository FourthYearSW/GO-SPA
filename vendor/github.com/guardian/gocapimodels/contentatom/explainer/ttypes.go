// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package explainer

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/guardian/gocapimodels/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

type DisplayType int64

const (
	DisplayType_FLAT       DisplayType = 0
	DisplayType_EXPANDABLE DisplayType = 1
	DisplayType_CAROUSEL   DisplayType = 2
)

func (p DisplayType) String() string {
	switch p {
	case DisplayType_FLAT:
		return "FLAT"
	case DisplayType_EXPANDABLE:
		return "EXPANDABLE"
	case DisplayType_CAROUSEL:
		return "CAROUSEL"
	}
	return "<UNSET>"
}

func DisplayTypeFromString(s string) (DisplayType, error) {
	switch s {
	case "FLAT":
		return DisplayType_FLAT, nil
	case "EXPANDABLE":
		return DisplayType_EXPANDABLE, nil
	case "CAROUSEL":
		return DisplayType_CAROUSEL, nil
	}
	return DisplayType(0), fmt.Errorf("not a valid DisplayType string")
}

func DisplayTypePtr(v DisplayType) *DisplayType { return &v }

func (p DisplayType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DisplayType) UnmarshalText(text []byte) error {
	q, err := DisplayTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Title
//  - Body
//  - DisplayType
//  - Tags
type ExplainerAtom struct {
	// unused field # 1
	Title       string      `thrift:"title,2,required" json:"title"`
	Body        string      `thrift:"body,3,required" json:"body"`
	DisplayType DisplayType `thrift:"displayType,4,required" json:"displayType"`
	Tags        []string    `thrift:"tags,5" json:"tags,omitempty"`
}

func NewExplainerAtom() *ExplainerAtom {
	return &ExplainerAtom{}
}

func (p *ExplainerAtom) GetTitle() string {
	return p.Title
}

func (p *ExplainerAtom) GetBody() string {
	return p.Body
}

func (p *ExplainerAtom) GetDisplayType() DisplayType {
	return p.DisplayType
}

var ExplainerAtom_Tags_DEFAULT []string

func (p *ExplainerAtom) GetTags() []string {
	return p.Tags
}
func (p *ExplainerAtom) IsSetTags() bool {
	return p.Tags != nil
}

func (p *ExplainerAtom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTitle bool = false
	var issetBody bool = false
	var issetDisplayType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetBody = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetDisplayType = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetBody {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Body is not set"))
	}
	if !issetDisplayType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DisplayType is not set"))
	}
	return nil
}

func (p *ExplainerAtom) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *ExplainerAtom) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *ExplainerAtom) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := DisplayType(v)
		p.DisplayType = temp
	}
	return nil
}

func (p *ExplainerAtom) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Tags = append(p.Tags, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExplainerAtom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExplainerAtom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExplainerAtom) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *ExplainerAtom) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err)
	}
	return err
}

func (p *ExplainerAtom) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:displayType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:displayType: ", p), err)
	}
	return err
}

func (p *ExplainerAtom) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err := oprot.WriteFieldBegin("tags", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tags: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tags {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tags: ", p), err)
		}
	}
	return err
}

func (p *ExplainerAtom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExplainerAtom(%+v)", *p)
}
