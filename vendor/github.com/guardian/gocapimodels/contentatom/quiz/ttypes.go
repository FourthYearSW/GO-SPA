// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package quiz

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/guardian/gocapimodels/shared"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - Title
//  - Share
//  - MinScore
//  - ID
type ResultGroup struct {
	Title    string `thrift:"title,1,required" json:"title"`
	Share    string `thrift:"share,2,required" json:"share"`
	MinScore int16  `thrift:"minScore,3,required" json:"minScore"`
	ID       string `thrift:"id,4,required" json:"id"`
}

func NewResultGroup() *ResultGroup {
	return &ResultGroup{}
}

func (p *ResultGroup) GetTitle() string {
	return p.Title
}

func (p *ResultGroup) GetShare() string {
	return p.Share
}

func (p *ResultGroup) GetMinScore() int16 {
	return p.MinScore
}

func (p *ResultGroup) GetID() string {
	return p.ID
}
func (p *ResultGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTitle bool = false
	var issetShare bool = false
	var issetMinScore bool = false
	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetShare = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMinScore = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetShare {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Share is not set"))
	}
	if !issetMinScore {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinScore is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *ResultGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *ResultGroup) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *ResultGroup) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MinScore = v
	}
	return nil
}

func (p *ResultGroup) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ResultGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *ResultGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:share: ", p), err)
	}
	return err
}

func (p *ResultGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minScore", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:minScore: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.MinScore)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minScore (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:minScore: ", p), err)
	}
	return err
}

func (p *ResultGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err)
	}
	return err
}

func (p *ResultGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultGroup(%+v)", *p)
}

// Attributes:
//  - Type
//  - Data
type Asset struct {
	Type string            `thrift:"type,1,required" json:"type"`
	Data shared.OpaqueJson `thrift:"data,2,required" json:"data"`
}

func NewAsset() *Asset {
	return &Asset{}
}

func (p *Asset) GetType() string {
	return p.Type
}

func (p *Asset) GetData() shared.OpaqueJson {
	return p.Data
}
func (p *Asset) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetData bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetData = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetData {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"))
	}
	return nil
}

func (p *Asset) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Asset) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := shared.OpaqueJson(v)
		p.Data = temp
	}
	return nil
}

func (p *Asset) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Asset"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Asset) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *Asset) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *Asset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Asset(%+v)", *p)
}

// Attributes:
//  - AnswerText
//  - Assets
//  - Weight
//  - RevealText
//  - ID
//  - Bucket
type Answer struct {
	AnswerText string   `thrift:"answerText,1,required" json:"answerText"`
	Assets     []*Asset `thrift:"assets,2,required" json:"assets"`
	Weight     int16    `thrift:"weight,3,required" json:"weight"`
	RevealText *string  `thrift:"revealText,4" json:"revealText,omitempty"`
	ID         string   `thrift:"id,5,required" json:"id"`
	Bucket     []string `thrift:"bucket,6" json:"bucket,omitempty"`
}

func NewAnswer() *Answer {
	return &Answer{}
}

func (p *Answer) GetAnswerText() string {
	return p.AnswerText
}

func (p *Answer) GetAssets() []*Asset {
	return p.Assets
}

func (p *Answer) GetWeight() int16 {
	return p.Weight
}

var Answer_RevealText_DEFAULT string

func (p *Answer) GetRevealText() string {
	if !p.IsSetRevealText() {
		return Answer_RevealText_DEFAULT
	}
	return *p.RevealText
}

func (p *Answer) GetID() string {
	return p.ID
}

var Answer_Bucket_DEFAULT []string

func (p *Answer) GetBucket() []string {
	return p.Bucket
}
func (p *Answer) IsSetRevealText() bool {
	return p.RevealText != nil
}

func (p *Answer) IsSetBucket() bool {
	return p.Bucket != nil
}

func (p *Answer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAnswerText bool = false
	var issetAssets bool = false
	var issetWeight bool = false
	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetAnswerText = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAssets = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetWeight = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetID = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAnswerText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AnswerText is not set"))
	}
	if !issetAssets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assets is not set"))
	}
	if !issetWeight {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Weight is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *Answer) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnswerText = v
	}
	return nil
}

func (p *Answer) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Asset{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Assets = append(p.Assets, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Answer) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *Answer) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RevealText = &v
	}
	return nil
}

func (p *Answer) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Answer) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Bucket = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Bucket = append(p.Bucket, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Answer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Answer"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Answer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("answerText", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:answerText: ", p), err)
	}
	if err := oprot.WriteString(string(p.AnswerText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.answerText (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:answerText: ", p), err)
	}
	return err
}

func (p *Answer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:assets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Assets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:assets: ", p), err)
	}
	return err
}

func (p *Answer) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("weight", thrift.I16, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:weight: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.weight (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:weight: ", p), err)
	}
	return err
}

func (p *Answer) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevealText() {
		if err := oprot.WriteFieldBegin("revealText", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:revealText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RevealText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.revealText (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:revealText: ", p), err)
		}
	}
	return err
}

func (p *Answer) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:id: ", p), err)
	}
	return err
}

func (p *Answer) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBucket() {
		if err := oprot.WriteFieldBegin("bucket", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bucket: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Bucket)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Bucket {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bucket: ", p), err)
		}
	}
	return err
}

func (p *Answer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Answer(%+v)", *p)
}

// Attributes:
//  - Assets
//  - Description
//  - Title
//  - Share
//  - ID
type ResultBucket struct {
	Assets      []*Asset `thrift:"assets,1" json:"assets,omitempty"`
	Description string   `thrift:"description,2,required" json:"description"`
	Title       string   `thrift:"title,3,required" json:"title"`
	Share       string   `thrift:"share,4,required" json:"share"`
	ID          string   `thrift:"id,5,required" json:"id"`
}

func NewResultBucket() *ResultBucket {
	return &ResultBucket{}
}

var ResultBucket_Assets_DEFAULT []*Asset

func (p *ResultBucket) GetAssets() []*Asset {
	return p.Assets
}

func (p *ResultBucket) GetDescription() string {
	return p.Description
}

func (p *ResultBucket) GetTitle() string {
	return p.Title
}

func (p *ResultBucket) GetShare() string {
	return p.Share
}

func (p *ResultBucket) GetID() string {
	return p.ID
}
func (p *ResultBucket) IsSetAssets() bool {
	return p.Assets != nil
}

func (p *ResultBucket) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetDescription bool = false
	var issetTitle bool = false
	var issetShare bool = false
	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetDescription = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetShare = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetDescription {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Description is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetShare {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Share is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *ResultBucket) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Asset{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Assets = append(p.Assets, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ResultBucket) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *ResultBucket) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *ResultBucket) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *ResultBucket) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ResultBucket) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultBucket"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultBucket) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAssets() {
		if err := oprot.WriteFieldBegin("assets", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assets: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Assets {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assets: ", p), err)
		}
	}
	return err
}

func (p *ResultBucket) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err)
	}
	return err
}

func (p *ResultBucket) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *ResultBucket) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:share: ", p), err)
	}
	return err
}

func (p *ResultBucket) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:id: ", p), err)
	}
	return err
}

func (p *ResultBucket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultBucket(%+v)", *p)
}

// Attributes:
//  - Buckets
type ResultBuckets struct {
	Buckets []*ResultBucket `thrift:"buckets,1,required" json:"buckets"`
}

func NewResultBuckets() *ResultBuckets {
	return &ResultBuckets{}
}

func (p *ResultBuckets) GetBuckets() []*ResultBucket {
	return p.Buckets
}
func (p *ResultBuckets) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBuckets bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetBuckets = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBuckets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Buckets is not set"))
	}
	return nil
}

func (p *ResultBuckets) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ResultBucket, 0, size)
	p.Buckets = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &ResultBucket{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Buckets = append(p.Buckets, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ResultBuckets) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultBuckets"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultBuckets) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buckets", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buckets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Buckets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Buckets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buckets: ", p), err)
	}
	return err
}

func (p *ResultBuckets) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultBuckets(%+v)", *p)
}

// Attributes:
//  - QuestionText
//  - Assets
//  - Answers
//  - ID
type Question struct {
	QuestionText string    `thrift:"questionText,1,required" json:"questionText"`
	Assets       []*Asset  `thrift:"assets,2,required" json:"assets"`
	Answers      []*Answer `thrift:"answers,3,required" json:"answers"`
	ID           string    `thrift:"id,4,required" json:"id"`
}

func NewQuestion() *Question {
	return &Question{}
}

func (p *Question) GetQuestionText() string {
	return p.QuestionText
}

func (p *Question) GetAssets() []*Asset {
	return p.Assets
}

func (p *Question) GetAnswers() []*Answer {
	return p.Answers
}

func (p *Question) GetID() string {
	return p.ID
}
func (p *Question) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetQuestionText bool = false
	var issetAssets bool = false
	var issetAnswers bool = false
	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetQuestionText = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAssets = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetAnswers = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetQuestionText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QuestionText is not set"))
	}
	if !issetAssets {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assets is not set"))
	}
	if !issetAnswers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Answers is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *Question) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.QuestionText = v
	}
	return nil
}

func (p *Question) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Asset, 0, size)
	p.Assets = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &Asset{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Assets = append(p.Assets, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Question) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Answer, 0, size)
	p.Answers = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &Answer{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Answers = append(p.Answers, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Question) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Question) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Question"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Question) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("questionText", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:questionText: ", p), err)
	}
	if err := oprot.WriteString(string(p.QuestionText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.questionText (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:questionText: ", p), err)
	}
	return err
}

func (p *Question) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("assets", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:assets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Assets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Assets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:assets: ", p), err)
	}
	return err
}

func (p *Question) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("answers", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:answers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Answers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Answers {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:answers: ", p), err)
	}
	return err
}

func (p *Question) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err)
	}
	return err
}

func (p *Question) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Question(%+v)", *p)
}

// Attributes:
//  - Groups
type ResultGroups struct {
	Groups []*ResultGroup `thrift:"groups,1,required" json:"groups"`
}

func NewResultGroups() *ResultGroups {
	return &ResultGroups{}
}

func (p *ResultGroups) GetGroups() []*ResultGroup {
	return p.Groups
}
func (p *ResultGroups) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetGroups = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *ResultGroups) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ResultGroup, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &ResultGroup{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Groups = append(p.Groups, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ResultGroups) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultGroups"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultGroups) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groups: ", p), err)
	}
	return err
}

func (p *ResultGroups) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultGroups(%+v)", *p)
}

// Attributes:
//  - Questions
//  - ResultGroups
//  - ResultBuckets
type QuizContent struct {
	Questions     []*Question    `thrift:"questions,1,required" json:"questions"`
	ResultGroups  *ResultGroups  `thrift:"resultGroups,2" json:"resultGroups,omitempty"`
	ResultBuckets *ResultBuckets `thrift:"resultBuckets,3" json:"resultBuckets,omitempty"`
}

func NewQuizContent() *QuizContent {
	return &QuizContent{}
}

func (p *QuizContent) GetQuestions() []*Question {
	return p.Questions
}

var QuizContent_ResultGroups_DEFAULT *ResultGroups

func (p *QuizContent) GetResultGroups() *ResultGroups {
	if !p.IsSetResultGroups() {
		return QuizContent_ResultGroups_DEFAULT
	}
	return p.ResultGroups
}

var QuizContent_ResultBuckets_DEFAULT *ResultBuckets

func (p *QuizContent) GetResultBuckets() *ResultBuckets {
	if !p.IsSetResultBuckets() {
		return QuizContent_ResultBuckets_DEFAULT
	}
	return p.ResultBuckets
}
func (p *QuizContent) IsSetResultGroups() bool {
	return p.ResultGroups != nil
}

func (p *QuizContent) IsSetResultBuckets() bool {
	return p.ResultBuckets != nil
}

func (p *QuizContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetQuestions bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetQuestions = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetQuestions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Questions is not set"))
	}
	return nil
}

func (p *QuizContent) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Question, 0, size)
	p.Questions = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &Question{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Questions = append(p.Questions, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuizContent) readField2(iprot thrift.TProtocol) error {
	p.ResultGroups = &ResultGroups{}
	if err := p.ResultGroups.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultGroups), err)
	}
	return nil
}

func (p *QuizContent) readField3(iprot thrift.TProtocol) error {
	p.ResultBuckets = &ResultBuckets{}
	if err := p.ResultBuckets.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultBuckets), err)
	}
	return nil
}

func (p *QuizContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QuizContent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QuizContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("questions", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:questions: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Questions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Questions {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:questions: ", p), err)
	}
	return err
}

func (p *QuizContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultGroups() {
		if err := oprot.WriteFieldBegin("resultGroups", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultGroups: ", p), err)
		}
		if err := p.ResultGroups.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultGroups), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultGroups: ", p), err)
		}
	}
	return err
}

func (p *QuizContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultBuckets() {
		if err := oprot.WriteFieldBegin("resultBuckets", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resultBuckets: ", p), err)
		}
		if err := p.ResultBuckets.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultBuckets), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resultBuckets: ", p), err)
		}
	}
	return err
}

func (p *QuizContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizContent(%+v)", *p)
}

// Attributes:
//  - ID
//  - Title
//  - Published
//  - RevealAtEnd
//  - QuizType
//  - DefaultColumns
//  - Content
type QuizAtom struct {
	ID    string `thrift:"id,1,required" json:"id"`
	Title string `thrift:"title,2,required" json:"title"`
	// unused fields # 3 to 5
	RevealAtEnd    bool         `thrift:"revealAtEnd,6,required" json:"revealAtEnd"`
	Published      bool         `thrift:"published,7,required" json:"published"`
	QuizType       string       `thrift:"quizType,8,required" json:"quizType"`
	DefaultColumns *int16       `thrift:"defaultColumns,9" json:"defaultColumns,omitempty"`
	Content        *QuizContent `thrift:"content,10,required" json:"content"`
}

func NewQuizAtom() *QuizAtom {
	return &QuizAtom{}
}

func (p *QuizAtom) GetID() string {
	return p.ID
}

func (p *QuizAtom) GetTitle() string {
	return p.Title
}

func (p *QuizAtom) GetPublished() bool {
	return p.Published
}

func (p *QuizAtom) GetRevealAtEnd() bool {
	return p.RevealAtEnd
}

func (p *QuizAtom) GetQuizType() string {
	return p.QuizType
}

var QuizAtom_DefaultColumns_DEFAULT int16

func (p *QuizAtom) GetDefaultColumns() int16 {
	if !p.IsSetDefaultColumns() {
		return QuizAtom_DefaultColumns_DEFAULT
	}
	return *p.DefaultColumns
}

var QuizAtom_Content_DEFAULT *QuizContent

func (p *QuizAtom) GetContent() *QuizContent {
	if !p.IsSetContent() {
		return QuizAtom_Content_DEFAULT
	}
	return p.Content
}
func (p *QuizAtom) IsSetDefaultColumns() bool {
	return p.DefaultColumns != nil
}

func (p *QuizAtom) IsSetContent() bool {
	return p.Content != nil
}

func (p *QuizAtom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetTitle bool = false
	var issetPublished bool = false
	var issetRevealAtEnd bool = false
	var issetQuizType bool = false
	var issetContent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTitle = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPublished = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetRevealAtEnd = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetQuizType = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
			issetContent = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetTitle {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"))
	}
	if !issetPublished {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Published is not set"))
	}
	if !issetRevealAtEnd {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RevealAtEnd is not set"))
	}
	if !issetQuizType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QuizType is not set"))
	}
	if !issetContent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"))
	}
	return nil
}

func (p *QuizAtom) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *QuizAtom) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *QuizAtom) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Published = v
	}
	return nil
}

func (p *QuizAtom) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RevealAtEnd = v
	}
	return nil
}

func (p *QuizAtom) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.QuizType = v
	}
	return nil
}

func (p *QuizAtom) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DefaultColumns = &v
	}
	return nil
}

func (p *QuizAtom) readField10(iprot thrift.TProtocol) error {
	p.Content = &QuizContent{}
	if err := p.Content.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Content), err)
	}
	return nil
}

func (p *QuizAtom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QuizAtom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QuizAtom) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *QuizAtom) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *QuizAtom) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("revealAtEnd", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:revealAtEnd: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.RevealAtEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.revealAtEnd (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:revealAtEnd: ", p), err)
	}
	return err
}

func (p *QuizAtom) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("published", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:published: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Published)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.published (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:published: ", p), err)
	}
	return err
}

func (p *QuizAtom) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quizType", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:quizType: ", p), err)
	}
	if err := oprot.WriteString(string(p.QuizType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.quizType (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:quizType: ", p), err)
	}
	return err
}

func (p *QuizAtom) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultColumns() {
		if err := oprot.WriteFieldBegin("defaultColumns", thrift.I16, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:defaultColumns: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.DefaultColumns)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultColumns (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:defaultColumns: ", p), err)
		}
	}
	return err
}

func (p *QuizAtom) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:content: ", p), err)
	}
	if err := p.Content.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Content), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:content: ", p), err)
	}
	return err
}

func (p *QuizAtom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuizAtom(%+v)", *p)
}
