// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package story_package_article

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ArticleType int64

const (
	ArticleType_Article ArticleType = 1
	ArticleType_Snap    ArticleType = 2
)

func (p ArticleType) String() string {
	switch p {
	case ArticleType_Article:
		return "Article"
	case ArticleType_Snap:
		return "Snap"
	}
	return "<UNSET>"
}

func ArticleTypeFromString(s string) (ArticleType, error) {
	switch s {
	case "Article":
		return ArticleType_Article, nil
	case "Snap":
		return ArticleType_Snap, nil
	}
	return ArticleType(0), fmt.Errorf("not a valid ArticleType string")
}

func ArticleTypePtr(v ArticleType) *ArticleType { return &v }

func (p ArticleType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ArticleType) UnmarshalText(text []byte) error {
	q, err := ArticleTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Group int64

const (
	Group_Included Group = 1
	Group_Linked   Group = 2
)

func (p Group) String() string {
	switch p {
	case Group_Included:
		return "Included"
	case Group_Linked:
		return "Linked"
	}
	return "<UNSET>"
}

func GroupFromString(s string) (Group, error) {
	switch s {
	case "Included":
		return Group_Included, nil
	case "Linked":
		return Group_Linked, nil
	}
	return Group(0), fmt.Errorf("not a valid Group string")
}

func GroupPtr(v Group) *Group { return &v }

func (p Group) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Group) UnmarshalText(text []byte) error {
	q, err := GroupFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// this stucture represents articles and its overrides
//
//
// Attributes:
//  - ID
//  - ArticleType
//  - Group
//  - Headline
//  - Href
//  - TrailText
//  - ImageSrc
//  - IsBoosted
//  - ImageHide
//  - ShowMainVideo
//  - ShowKickerTag
//  - ShowKickerSection
//  - Byline
//  - CustomKicker
//  - ShowBoostedHeadline
//  - ShowQuotedHeadline
type Article struct {
	ID                  string      `thrift:"id,1,required" json:"id"`
	ArticleType         ArticleType `thrift:"articleType,2,required" json:"articleType"`
	Group               Group       `thrift:"group,3,required" json:"group"`
	Headline            *string     `thrift:"headline,4" json:"headline,omitempty"`
	Href                *string     `thrift:"href,5" json:"href,omitempty"`
	TrailText           *string     `thrift:"trailText,6" json:"trailText,omitempty"`
	ImageSrc            *string     `thrift:"imageSrc,7" json:"imageSrc,omitempty"`
	IsBoosted           *bool       `thrift:"isBoosted,8" json:"isBoosted,omitempty"`
	ImageHide           *bool       `thrift:"imageHide,9" json:"imageHide,omitempty"`
	ShowMainVideo       *bool       `thrift:"showMainVideo,10" json:"showMainVideo,omitempty"`
	ShowKickerTag       *bool       `thrift:"showKickerTag,11" json:"showKickerTag,omitempty"`
	ShowKickerSection   *bool       `thrift:"showKickerSection,12" json:"showKickerSection,omitempty"`
	Byline              *string     `thrift:"byline,13" json:"byline,omitempty"`
	CustomKicker        *string     `thrift:"customKicker,14" json:"customKicker,omitempty"`
	ShowBoostedHeadline *bool       `thrift:"showBoostedHeadline,15" json:"showBoostedHeadline,omitempty"`
	ShowQuotedHeadline  *bool       `thrift:"showQuotedHeadline,16" json:"showQuotedHeadline,omitempty"`
}

func NewArticle() *Article {
	return &Article{}
}

func (p *Article) GetID() string {
	return p.ID
}

func (p *Article) GetArticleType() ArticleType {
	return p.ArticleType
}

func (p *Article) GetGroup() Group {
	return p.Group
}

var Article_Headline_DEFAULT string

func (p *Article) GetHeadline() string {
	if !p.IsSetHeadline() {
		return Article_Headline_DEFAULT
	}
	return *p.Headline
}

var Article_Href_DEFAULT string

func (p *Article) GetHref() string {
	if !p.IsSetHref() {
		return Article_Href_DEFAULT
	}
	return *p.Href
}

var Article_TrailText_DEFAULT string

func (p *Article) GetTrailText() string {
	if !p.IsSetTrailText() {
		return Article_TrailText_DEFAULT
	}
	return *p.TrailText
}

var Article_ImageSrc_DEFAULT string

func (p *Article) GetImageSrc() string {
	if !p.IsSetImageSrc() {
		return Article_ImageSrc_DEFAULT
	}
	return *p.ImageSrc
}

var Article_IsBoosted_DEFAULT bool

func (p *Article) GetIsBoosted() bool {
	if !p.IsSetIsBoosted() {
		return Article_IsBoosted_DEFAULT
	}
	return *p.IsBoosted
}

var Article_ImageHide_DEFAULT bool

func (p *Article) GetImageHide() bool {
	if !p.IsSetImageHide() {
		return Article_ImageHide_DEFAULT
	}
	return *p.ImageHide
}

var Article_ShowMainVideo_DEFAULT bool

func (p *Article) GetShowMainVideo() bool {
	if !p.IsSetShowMainVideo() {
		return Article_ShowMainVideo_DEFAULT
	}
	return *p.ShowMainVideo
}

var Article_ShowKickerTag_DEFAULT bool

func (p *Article) GetShowKickerTag() bool {
	if !p.IsSetShowKickerTag() {
		return Article_ShowKickerTag_DEFAULT
	}
	return *p.ShowKickerTag
}

var Article_ShowKickerSection_DEFAULT bool

func (p *Article) GetShowKickerSection() bool {
	if !p.IsSetShowKickerSection() {
		return Article_ShowKickerSection_DEFAULT
	}
	return *p.ShowKickerSection
}

var Article_Byline_DEFAULT string

func (p *Article) GetByline() string {
	if !p.IsSetByline() {
		return Article_Byline_DEFAULT
	}
	return *p.Byline
}

var Article_CustomKicker_DEFAULT string

func (p *Article) GetCustomKicker() string {
	if !p.IsSetCustomKicker() {
		return Article_CustomKicker_DEFAULT
	}
	return *p.CustomKicker
}

var Article_ShowBoostedHeadline_DEFAULT bool

func (p *Article) GetShowBoostedHeadline() bool {
	if !p.IsSetShowBoostedHeadline() {
		return Article_ShowBoostedHeadline_DEFAULT
	}
	return *p.ShowBoostedHeadline
}

var Article_ShowQuotedHeadline_DEFAULT bool

func (p *Article) GetShowQuotedHeadline() bool {
	if !p.IsSetShowQuotedHeadline() {
		return Article_ShowQuotedHeadline_DEFAULT
	}
	return *p.ShowQuotedHeadline
}
func (p *Article) IsSetHeadline() bool {
	return p.Headline != nil
}

func (p *Article) IsSetHref() bool {
	return p.Href != nil
}

func (p *Article) IsSetTrailText() bool {
	return p.TrailText != nil
}

func (p *Article) IsSetImageSrc() bool {
	return p.ImageSrc != nil
}

func (p *Article) IsSetIsBoosted() bool {
	return p.IsBoosted != nil
}

func (p *Article) IsSetImageHide() bool {
	return p.ImageHide != nil
}

func (p *Article) IsSetShowMainVideo() bool {
	return p.ShowMainVideo != nil
}

func (p *Article) IsSetShowKickerTag() bool {
	return p.ShowKickerTag != nil
}

func (p *Article) IsSetShowKickerSection() bool {
	return p.ShowKickerSection != nil
}

func (p *Article) IsSetByline() bool {
	return p.Byline != nil
}

func (p *Article) IsSetCustomKicker() bool {
	return p.CustomKicker != nil
}

func (p *Article) IsSetShowBoostedHeadline() bool {
	return p.ShowBoostedHeadline != nil
}

func (p *Article) IsSetShowQuotedHeadline() bool {
	return p.ShowQuotedHeadline != nil
}

func (p *Article) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetArticleType bool = false
	var issetGroup bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetArticleType = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetGroup = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetArticleType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArticleType is not set"))
	}
	if !issetGroup {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Group is not set"))
	}
	return nil
}

func (p *Article) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Article) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ArticleType(v)
		p.ArticleType = temp
	}
	return nil
}

func (p *Article) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Group(v)
		p.Group = temp
	}
	return nil
}

func (p *Article) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Headline = &v
	}
	return nil
}

func (p *Article) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Href = &v
	}
	return nil
}

func (p *Article) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TrailText = &v
	}
	return nil
}

func (p *Article) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ImageSrc = &v
	}
	return nil
}

func (p *Article) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IsBoosted = &v
	}
	return nil
}

func (p *Article) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ImageHide = &v
	}
	return nil
}

func (p *Article) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ShowMainVideo = &v
	}
	return nil
}

func (p *Article) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ShowKickerTag = &v
	}
	return nil
}

func (p *Article) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ShowKickerSection = &v
	}
	return nil
}

func (p *Article) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Byline = &v
	}
	return nil
}

func (p *Article) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CustomKicker = &v
	}
	return nil
}

func (p *Article) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ShowBoostedHeadline = &v
	}
	return nil
}

func (p *Article) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ShowQuotedHeadline = &v
	}
	return nil
}

func (p *Article) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Article"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Article) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Article) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("articleType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:articleType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ArticleType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.articleType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:articleType: ", p), err)
	}
	return err
}

func (p *Article) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:group: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:group: ", p), err)
	}
	return err
}

func (p *Article) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeadline() {
		if err := oprot.WriteFieldBegin("headline", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:headline: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Headline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.headline (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:headline: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHref() {
		if err := oprot.WriteFieldBegin("href", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:href: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Href)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.href (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:href: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTrailText() {
		if err := oprot.WriteFieldBegin("trailText", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trailText: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TrailText)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.trailText (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trailText: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageSrc() {
		if err := oprot.WriteFieldBegin("imageSrc", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:imageSrc: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ImageSrc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageSrc (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:imageSrc: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBoosted() {
		if err := oprot.WriteFieldBegin("isBoosted", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isBoosted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsBoosted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isBoosted (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isBoosted: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageHide() {
		if err := oprot.WriteFieldBegin("imageHide", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:imageHide: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ImageHide)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageHide (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:imageHide: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowMainVideo() {
		if err := oprot.WriteFieldBegin("showMainVideo", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:showMainVideo: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowMainVideo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showMainVideo (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:showMainVideo: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowKickerTag() {
		if err := oprot.WriteFieldBegin("showKickerTag", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:showKickerTag: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowKickerTag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showKickerTag (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:showKickerTag: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowKickerSection() {
		if err := oprot.WriteFieldBegin("showKickerSection", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:showKickerSection: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowKickerSection)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showKickerSection (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:showKickerSection: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetByline() {
		if err := oprot.WriteFieldBegin("byline", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:byline: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Byline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byline (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:byline: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomKicker() {
		if err := oprot.WriteFieldBegin("customKicker", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:customKicker: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CustomKicker)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.customKicker (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:customKicker: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowBoostedHeadline() {
		if err := oprot.WriteFieldBegin("showBoostedHeadline", thrift.BOOL, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:showBoostedHeadline: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowBoostedHeadline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showBoostedHeadline (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:showBoostedHeadline: ", p), err)
		}
	}
	return err
}

func (p *Article) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowQuotedHeadline() {
		if err := oprot.WriteFieldBegin("showQuotedHeadline", thrift.BOOL, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:showQuotedHeadline: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ShowQuotedHeadline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showQuotedHeadline (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:showQuotedHeadline: ", p), err)
		}
	}
	return err
}

func (p *Article) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Article(%+v)", *p)
}
